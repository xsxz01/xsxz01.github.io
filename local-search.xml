<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Linux系列】在PopOS的启动器中添加自定义程序图标</title>
    <link href="/2024/10/16/%E3%80%90Linux%E7%B3%BB%E5%88%97%E3%80%91%E5%9C%A8PopOS%E7%9A%84%E5%90%AF%E5%8A%A8%E5%99%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87/"/>
    <url>/2024/10/16/%E3%80%90Linux%E7%B3%BB%E5%88%97%E3%80%91%E5%9C%A8PopOS%E7%9A%84%E5%90%AF%E5%8A%A8%E5%99%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<meta name=referrer content=no-referrer><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a8d4969771940717f33696a79c4a715b.png#pic_center" alt="在这里插入图片描述"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>无论是在Windows上，还是Linux，或者安卓这些我们常用的操作系统上，一些应用程序的快捷方式放在桌面或者启动器，只需要简单的点击就可以启动，但是在Linux上，有相当多的程序是通过命令行启动的，这种方式对于某些人来说确实挺快，但是用惯了Windows就不太适应了，而且在桌面环境下，还是快捷图标更加友好，因此探索了一波Linux创建启动器图标。</p><p>由于本人使用的操作系统是Pop！OS，是Ubuntu发行版的一个分支，因此基本和Ubuntu是一致的。</p><hr><h1 id="一、创建快捷方式"><a href="#一、创建快捷方式" class="headerlink" title="一、创建快捷方式"></a>一、创建快捷方式</h1><p>在创建快捷方式之前，创建的快捷方式是所有用户都要看到还是仅自己可见，也就是说创建系统级图标还是用户级图标。</p><p>如果是用户级图标，那么路径为<code>.local/share/applications/</code>，</p><p>如果是系统级图标，那么路径为<code>/usr/share/applications</code>，</p><p>进入该路径以后，你会看到一堆<code>.desktop</code>文件</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b8e32c82fcb0aa1b90c3bd6358134494.png" alt="在这里插入图片描述"><br>这些东西就是快捷方式的本来面目了。这里面有一些文件是需要了解一下的。</p><ol><li><code>context-menus</code>文件夹是存放一些右键菜单的。</li><li><code>pop-mimeapps.list</code>，<code>gnome-mimeapps.list</code>， <code>defaults.list</code>以及<code>mimeapps.list</code>都是指定文件的默认执行方式的。</li></ol><p>你在系统级目录下新建<code>desktop</code>文件，创建的就是系统级图标，如果在用户级目录下新建<code>desktop</code>文件，那么创建的就是用户级图标。</p><h1 id="二、快捷方式参数"><a href="#二、快捷方式参数" class="headerlink" title="二、快捷方式参数"></a>二、快捷方式参数</h1><p>以安装Jetbrains的Idea为例，我从官网下载了压缩包，并且解压到了<code>/home/pang/workspace/env/idea-IU-232.8660.185</code>路径，此时有个文件<code>Install-Linux-tar.txt</code>提示如何在Linux上安装，但是实际上也只说进入<code>bin</code>目录运行</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">./idea.sh<br></code></pre></td></tr></table></figure><p>对于这种运行方式，使用体验是比较差的，因此需要创建个快捷方式启动，我选择的是系统级快捷方式，然后创建个<code>idea.desktop</code>，内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Desktop Entry]</span><br>Name<span class="hljs-section">[tr]</span>=idea<br>Name<span class="hljs-section">[zh_CN]</span>=idea<br><span class="hljs-attr">Exec</span>=/home/pang/workspace/env/idea-IU-<span class="hljs-number">232.8660</span>.<span class="hljs-number">185</span>/bin/idea.sh<br><span class="hljs-attr">Terminal</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">Type</span>=Application<br><span class="hljs-attr">Icon</span>=/home/pang/workspace/env/Icon/idea.png<br><span class="hljs-attr">Comment</span>=idea<br><span class="hljs-attr">Categories</span>=Utility<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f3ee5ea78f22d31babab7b23976661d2.jpeg" alt="在这里插入图片描述"><br>可见图标就创建好了，并且功能运行正常。</p><p>简单介绍下这个文件中参数的作用，</p><ol><li><code>Name</code>代表显示名字，并且可以指定语言，比如<code>Name[zh_CN]</code>、</li><li><code>Exec</code>是可执行文件，或者命令</li><li><code>Terminal</code>是否显示终端</li><li><code>Type</code>应用程序类型</li><li><code>Icon</code>图标</li><li><code>Comment</code>描述</li><li><code>Categories</code>分类</li></ol><blockquote><p>如果你想要查看所有相关的参数，建议查看大佬<a href="https://blog.csdn.net/u011198687/article/details/121806095">玩转智能机器人</a>的文章，或者直接去官网查看（能看懂英文）。<br>官网<a href="https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html">https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html</a></p></blockquote><h1 id="三、添加右键菜单和注册MIME"><a href="#三、添加右键菜单和注册MIME" class="headerlink" title="三、添加右键菜单和注册MIME"></a>三、添加右键菜单和注册MIME</h1><p>其实有很多功能是用不到的，所以挑两个可能用到的说一下，首先给出一份较为完整的文件例子</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Desktop Entry]</span><br><span class="hljs-attr">Version</span>=<span class="hljs-number">1.0</span><br><span class="hljs-attr">Type</span>=Application<br><span class="hljs-attr">Name</span>=Foo Viewer<br><span class="hljs-attr">Comment</span>=The best viewer for Foo objects available!<br><span class="hljs-attr">TryExec</span>=fooview<br><span class="hljs-attr">Exec</span>=fooview %F<br><span class="hljs-attr">Icon</span>=fooview<br><span class="hljs-attr">MimeType</span>=image/x-foo<span class="hljs-comment">;</span><br><span class="hljs-attr">Actions</span>=Gallery<span class="hljs-comment">;Create;</span><br><br><span class="hljs-section">[Desktop Action Gallery]</span><br><span class="hljs-attr">Exec</span>=fooview --gallery<br><span class="hljs-attr">Name</span>=Browse Gallery<br><br><span class="hljs-section">[Desktop Action Create]</span><br><span class="hljs-attr">Exec</span>=fooview --create-new<br><span class="hljs-attr">Name</span>=Create a new Foo!<br><span class="hljs-attr">Icon</span>=fooview-new<br></code></pre></td></tr></table></figure><p>在这个文件中，<code>MimeType=image/x-foo;</code>注册了MIME，然后就可以在指定默认执行程序那写了<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c8cb450b5777da70771439aba04d4a7f.png" alt="在这里插入图片描述"><br>以及一些右键菜单也可以看出来是怎么写的，大概影响的是这几行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">……<br><span class="hljs-attribute">Actions</span>=Gallery;Create;<br><br>[Desktop Action Gallery]<br><span class="hljs-attribute">Exec</span>=fooview --gallery<br><span class="hljs-attribute">Name</span>=Browse Gallery<br><br>[Desktop Action Create]<br><span class="hljs-attribute">Exec</span>=fooview --create-new<br><span class="hljs-attribute">Name</span>=Create a new Foo!<br><span class="hljs-attribute">Icon</span>=fooview-new<br></code></pre></td></tr></table></figure><p>由<code>Action</code>指定有几个菜单选项，然后下面用<code>[Desktop Action ActionName]</code>来指定，且有三个参数</p><ul><li><code>Exec</code> 执行的命令</li><li><code>Name</code> 显示名字</li><li><code>Icon</code> 图标</li></ul><div class="note note-info">            <p>本文最早发布于：<a href="https://blog.csdn.net/weixin_47754149/article/details/137646973">https://blog.csdn.net/weixin_47754149/article/details/137646973</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web3之Helloworld</title>
    <link href="/2023/11/27/web3%E4%B9%8BHelloworld/"/>
    <url>/2023/11/27/web3%E4%B9%8BHelloworld/</url>
    
    <content type="html"><![CDATA[<p>开始学习Web 3，本文是博主学习Web 3的学习记录。</p><span id="more"></span><h1 id="本节内容学习地址"><a href="#本节内容学习地址" class="headerlink" title="本节内容学习地址"></a><a href="https://github.com/AmazingAng/WTF-Solidity/blob/main/01_HelloWeb3/readme.md">本节内容学习地址</a></h1><p>使用的IDE是Remix，地址: <a href="https://remix.ethereum.org/">点此打开</a></p><p>原教程写的极为详细</p><ol><li>新建文件</li><li>输入新建的文件名</li><li>将Hello Word代码复制进去</li><li>按Ctrl+s 就会自动编译</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br>pragma solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.4</span>;<br>contract <span class="hljs-title class_">HelloWeb3</span>&#123;<br>    <span class="hljs-built_in">string</span> <span class="hljs-keyword">public</span> _string = <span class="hljs-string">&quot;Hello Web3!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20231127173651.png" alt="编写代码"><br>然后进行部署<br>点击左侧的部署按钮，看到下方余额那里有String类型的Hello World就说明成功。<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20231127174049.png" alt="部署"></p><p>对于这段代码的解释，我觉得还是作者写的好：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 第 1 行是注释，说明代码所使用的软件许可（license），这里使用的是 MIT 许可。如果不写许可，编译时会出现警告（warning），但程序仍可运行。Solidity 注释以“//”开头，后面跟注释内容，注释不会被程序执行。</span><br><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br><span class="hljs-comment">// 第 2 行声明源文件所使用的 Solidity 版本，因为不同版本的语法有差异。这行代码表示源文件将不允许小于 0.8.4 版本或大于等于 0.9.0 的编译器编译（第二个条件由 ^ 提供）。Solidity 语句以分号（;）结尾。</span><br>pragma solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.4</span>;<br><span class="hljs-comment">// 第 3-4 行是合约部分。第 3 行创建合约（contract），并声明合约名为 HelloWeb3。第 4 行是合约内容，声明了一个 string（字符串）变量 _string，并赋值为 &quot;Hello Web3!&quot;。</span><br>contract <span class="hljs-title class_">HelloWeb3</span>&#123;<br>    <span class="hljs-built_in">string</span> <span class="hljs-keyword">public</span> _string = <span class="hljs-string">&quot;Hello Web3!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>我还是比较喜欢把_string改成name，来自其他编程语言的习惯</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Web 3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux+picgo快速配置</title>
    <link href="/2023/11/24/Linux-picgo%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/24/Linux-picgo%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>因为 PicGo 在 Linux 下的安装体验并不是很好，经过查找一堆资料后发现还是 “Seven’s blog” 提供的解决方案较为完美，但是其环境与我还是有一些差异，并且一些小错误进行了修正，建议参考我修改后的配置。</p><span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>操作系统</td><td>Pop! OS(Ubuntu 22.04)</td></tr><tr><td>Node.js</td><td>v18.16.1</td></tr><tr><td>OSS 对象存储</td><td>aliyun</td></tr><tr><td>picgo</td><td>当前最新</td></tr><tr><td>picgo-plugin-autocopy</td><td>当前最新</td></tr><tr><td>xclip</td><td>系统自带</td></tr><tr><td>notify-send</td><td>系统自带</td></tr></tbody></table><h1 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h1><h2 id="1-安装picgo"><a href="#1-安装picgo" class="headerlink" title="1. 安装picgo"></a>1. 安装picgo</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm install picgo -g<br><br><span class="hljs-comment"># 或者</span><br><br>yarn global add picgo<br></code></pre></td></tr></table></figure><h2 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">picgo install autocopy<br></code></pre></td></tr></table></figure><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>picgo 的配置文件默认存储在 ~&#x2F;.picgo&#x2F;config.json ，这里提供参考配置。</p><blockquote><p>配置请参考<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html">配置文档</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;picBed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>    <span class="hljs-attr">&quot;uploader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aliyun&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;current&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aliyun&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;aliyun&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;accessKeyId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;----&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;accessKeySecret&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;---&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;---&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;----&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;customUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;---&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;transformer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;path&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;picgoPlugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;picgo-plugin-autocopy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="配置shell脚本"><a href="#配置shell脚本" class="headerlink" title="配置shell脚本"></a>配置shell脚本</h1><p>将脚本放在<code>~/.script/app/picgo-upload.sh</code>。</p><blockquote><p>注意：脚本解释器换成你自己所使用的，我使用的是bash</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">!/bin/bash</span><br>source $HOME/.bashrc<br>picgo_upload_result=`picgo upload`<br><br>if [ $? -ne 0 ]; then<br><span class="hljs-meta">  # </span><span class="language-bash">系统提示图片上传失败并显示失败原因</span><br>  notify-send -u normal -t 5000 -a picgo &#x27;picture upload failed&#x27; $picgo_upload_result<br><span class="hljs-meta">  # </span><span class="language-bash">语音提示图片上传失败</span><br><span class="hljs-meta">  # </span><span class="language-bash">espeak <span class="hljs-string">&#x27;picture upload failed&#x27;</span></span><br>  exit<br>else<br><span class="hljs-meta">  # </span><span class="language-bash">系统提示图片上传成功</span><br>  notify-send -u normal -t 5000 -a picgo &#x27;picture  upload succees&#x27; `xclip  -o -selection clipboard`<br><span class="hljs-meta">  # </span><span class="language-bash">删除 xclip 自动添加的换行符</span><br>  xclip -o -selection clipboard | sed &#x27;/^[[:blank:]]*$/d&#x27; | xclip -selection clipboard -r<br><span class="hljs-meta">  # </span><span class="language-bash"> 语音提示图片上传成功</span><br><span class="hljs-meta">  # </span><span class="language-bash">espeak <span class="hljs-string">&#x27;picture upload succeed&#x27;</span></span><br>fi<br></code></pre></td></tr></table></figure><p>然后给脚本执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ~/.script/app/picgo-upload.sh<br></code></pre></td></tr></table></figure><h1 id="配置系统快捷键"><a href="#配置系统快捷键" class="headerlink" title="配置系统快捷键"></a>配置系统快捷键</h1><p>依次打开以下设置</p><ol><li>设置</li><li>键盘</li><li>查看以及自定义快捷键</li><li>自定义快捷键</li></ol><p>步骤如下<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20231124171851.png" alt="1 - 3步骤"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20231124171940.png" alt="4步骤"><br>并且按照如下配置<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20231124172113.png" alt="快捷键配置"><br>然后按下你设置的快捷键就可以看到效果了</p><blockquote><p>如果没有效果的话，就将命令改成绝对路径<br>这里还存在个问题我目前没有解决，就是复制到剪切板的并不是一开始就是markdown格式的，由于我对于shell脚本并不是很熟练，但是我会努力尝试修改的。所以会在在后面继续改改看。</p></blockquote><p><em>这里再次感谢“Seven’s blog”大佬的解决方案，原文地址：<a href="https://blog.diqigan.cn/posts/geek/picgo-linux-script.html">https://blog.diqigan.cn/posts/geek/picgo-linux-script.html</a></em></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue+node+webpack前端自动化部署</title>
    <link href="/2022/06/09/vue-node-webpack%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/06/09/vue-node-webpack%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>vue+node+webpack前端自动化部署是前端工程师所使用的一种自动化部署方式，它可以让我们的项目在服务器上运行，并且可以自动更新。</p><span id="more"></span><h1 id="1-首先用nodejs封装一个能操作远程服务器的工具库"><a href="#1-首先用nodejs封装一个能操作远程服务器的工具库" class="headerlink" title="1. 首先用nodejs封装一个能操作远程服务器的工具库"></a>1. 首先用nodejs封装一个能操作远程服务器的工具库</h1><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// filename serverLib.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 该文件封装了对远程服务器的操作</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> events = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Client</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ssh2&#x27;</span>); <span class="hljs-comment">// ssh2模块需要使用npm安装</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：连接远程电脑</span><br><span class="hljs-comment">* 参数：server 远程电脑凭证；</span><br><span class="hljs-comment">then 回调函数</span><br><span class="hljs-comment">* 回调：then(conn) 连接远程的client对象</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Connect</span>(<span class="hljs-params">server, then</span>) &#123;<br>    <span class="hljs-keyword">const</span> conn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();<br>    conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;ready&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">then</span>(conn);<br>    &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&quot;connect error!&quot;);</span><br>    &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&quot;connect end!&quot;);</span><br>    &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">had_error</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&quot;connect close&quot;);</span><br>    &#125;)<br>    .<span class="hljs-title function_">connect</span>(server);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：运行shell命令</span><br><span class="hljs-comment">* 参数：server 远程电脑凭证；</span><br><span class="hljs-comment">cmd 执行的命令；</span><br><span class="hljs-comment">then 回调函数</span><br><span class="hljs-comment">* 回调：then(err, data) ： data 运行命令之后的返回数据信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Shell</span>(<span class="hljs-params">server, cmd, then</span>) &#123;<br>    <span class="hljs-title class_">Connect</span>(server, <span class="hljs-function">(<span class="hljs-params">conn</span>) =&gt;</span> &#123;<br>        conn.<span class="hljs-title function_">shell</span>(<span class="hljs-function">(<span class="hljs-params">err, stream</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-title function_">then</span>(err);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// end of if</span><br>                <span class="hljs-keyword">let</span> buf = <span class="hljs-string">&#x27;&#x27;</span>;<br>                stream.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                    conn.<span class="hljs-title function_">end</span>();<br>                    <span class="hljs-title function_">then</span>(err, buf);<br>                &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>                    buf += data;<br>                &#125;).<span class="hljs-property">stderr</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`stderr: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>                &#125;);<br>                stream.<span class="hljs-title function_">end</span>(cmd);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：上传文件</span><br><span class="hljs-comment">* 参数：server 远程电脑凭证；</span><br><span class="hljs-comment">localPath 本地路径；</span><br><span class="hljs-comment">remotePath 远程路径；</span><br><span class="hljs-comment">then 回调函数</span><br><span class="hljs-comment">* 回调：then(err, result)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">UploadFile</span>(<span class="hljs-params">server, localPath, remotePath, then</span>) &#123;<br>    <span class="hljs-title class_">Connect</span>(server, <span class="hljs-function">(<span class="hljs-params">conn</span>) =&gt;</span> &#123;<br>        conn.<span class="hljs-title function_">sftp</span>(<span class="hljs-function">(<span class="hljs-params">err, sftp</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-title function_">then</span>(err);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sftp.<span class="hljs-title function_">fastPut</span>(localPath, remotePath, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>                    conn.<span class="hljs-title function_">end</span>();<br>                    <span class="hljs-title function_">then</span>(err, result);<br>                &#125;);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：下载文件</span><br><span class="hljs-comment">* 参数：server 远程电脑凭证；</span><br><span class="hljs-comment">remotePath 远程路径；</span><br><span class="hljs-comment">localPath 本地路径；</span><br><span class="hljs-comment">then 回调函数</span><br><span class="hljs-comment">* 回调：then(err, result)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">DownloadFile</span>(<span class="hljs-params">server, remotePath, localPath, then</span>) &#123;<br>    <span class="hljs-title class_">Connect</span>(server, <span class="hljs-function">(<span class="hljs-params">conn</span>) =&gt;</span> &#123;<br>        conn.<span class="hljs-title function_">sftp</span>(<span class="hljs-function">(<span class="hljs-params">err, sftp</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-title function_">then</span>(err);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sftp.<span class="hljs-title function_">fastGet</span>(remotePath, localPath, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span> (err) &#123;<br>                        <span class="hljs-title function_">then</span>(err);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        conn.<span class="hljs-title function_">end</span>();<br>                        <span class="hljs-title function_">then</span>(err, result);<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：获取远程文件路径下文件列表信息</span><br><span class="hljs-comment">* 参数：server 远程电脑凭证；</span><br><span class="hljs-comment">* remotePath 远程路径；</span><br><span class="hljs-comment">* isFile 是否是获取文件，true获取文件信息，false获取目录信息；</span><br><span class="hljs-comment">* then 回调函数</span><br><span class="hljs-comment">* 回调：then(err, dirs) ： dir, 获取的列表信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">GetFileOrDirList</span>(<span class="hljs-params">server, remotePath, isFile, then</span>) &#123;<br>    <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`find <span class="hljs-subst">$&#123;remotePath&#125;</span> -type <span class="hljs-subst">$&#123;isFile == <span class="hljs-literal">true</span> ? <span class="hljs-string">&#x27;f&#x27;</span> : <span class="hljs-string">&#x27;d&#x27;</span>&#125;</span>\r\nexit\r\n`</span>;<br>    <span class="hljs-title class_">Shell</span>(server, cmd, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> arr = [];<br>        <span class="hljs-keyword">const</span> remoteFile = [];<br>        arr = data.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\r\n&#x27;</span>);<br>        arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">dir</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (dir.<span class="hljs-title function_">indexOf</span>(remotePath) == <span class="hljs-number">0</span>) &#123;<br>                remoteFile.<span class="hljs-title function_">push</span>(dir);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-title function_">then</span>(err, remoteFile);<br>    &#125;);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：控制上传或者下载一个一个的执行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Control</span>(<span class="hljs-params"></span>) &#123;<br>    events.<span class="hljs-property">EventEmitter</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br>util.<span class="hljs-title function_">inherits</span>(<span class="hljs-title class_">Control</span>, events.<span class="hljs-property">EventEmitter</span>); <span class="hljs-comment">// 使这个类继承EventEmitter</span><br> <br><span class="hljs-keyword">const</span> control = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Control</span>();<br> <br>control.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;donext&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">todos, then</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (todos.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> func = todos.<span class="hljs-title function_">shift</span>();<br>        <span class="hljs-title function_">func</span>(<span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-keyword">throw</span> err;<br>            <span class="hljs-title function_">then</span>(err);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                control.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;donext&#x27;</span>, todos, then);<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">then</span>(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;);<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：下载目录到本地</span><br><span class="hljs-comment">* 参数：server 远程电脑凭证；</span><br><span class="hljs-comment">* remotePath 远程路径；</span><br><span class="hljs-comment">* localDir 本地路径，</span><br><span class="hljs-comment">* then 回调函数</span><br><span class="hljs-comment">* 回调：then(err)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">DownloadDir</span>(<span class="hljs-params">server, remoteDir, localDir, then</span>) &#123;<br>    <span class="hljs-title class_">GetFileOrDirList</span>(server, remoteDir, <span class="hljs-literal">false</span>, <span class="hljs-function">(<span class="hljs-params">err, dirs</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">throw</span> err;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title class_">GetFileOrDirList</span>(server, remoteDir, <span class="hljs-literal">true</span>, <span class="hljs-function">(<span class="hljs-params">err, files</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">throw</span> err;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dirs.<span class="hljs-title function_">shift</span>();<br>            dirs.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">dir</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> tmpDir = path.<span class="hljs-title function_">join</span>(localDir, dir.<span class="hljs-title function_">slice</span>(remoteDir.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>)).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[//]\g/</span>, <span class="hljs-string">&#x27;\\&#x27;</span>);<br>                <span class="hljs-comment">// 创建目录</span><br>                fs.<span class="hljs-title function_">mkdirSync</span>(tmpDir);<br>            &#125;);<br>            <span class="hljs-keyword">const</span> todoFiles = [];<br>            files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> tmpPath = path.<span class="hljs-title function_">join</span>(localDir, file.<span class="hljs-title function_">slice</span>(remoteDir.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>)).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[//]\g/</span>, <span class="hljs-string">&#x27;\\&#x27;</span>);<br>                todoFiles.<span class="hljs-title function_">push</span>(<span class="hljs-function">(<span class="hljs-params">done</span>) =&gt;</span> &#123;<br>                    <span class="hljs-title class_">DownloadFile</span>(server, file, tmpPath, done);<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`downloading the <span class="hljs-subst">$&#123;file&#125;</span>`</span>);<br>                &#125;);<span class="hljs-comment">// end of todoFiles.push</span><br>            &#125;);<br>            control.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;donext&#x27;</span>, todoFiles, then);<br>        &#125;<br>        &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：获取windows上的文件目录以及文件列表信息</span><br><span class="hljs-comment">* 参数：destDir 本地路径，</span><br><span class="hljs-comment">* dirs 目录列表</span><br><span class="hljs-comment">* files 文件列表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">GetFileAndDirList</span>(<span class="hljs-params">localDir, dirs, files</span>) &#123;<br>    <span class="hljs-keyword">const</span> dir = fs.<span class="hljs-title function_">readdirSync</span>(localDir);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; dir.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> p = path.<span class="hljs-title function_">join</span>(localDir, dir[i]);<br>        <span class="hljs-keyword">const</span> stat = fs.<span class="hljs-title function_">statSync</span>(p);<br>        <span class="hljs-keyword">if</span> (stat.<span class="hljs-title function_">isDirectory</span>()) &#123;<br>            dirs.<span class="hljs-title function_">push</span>(p);<br>            <span class="hljs-title class_">GetFileAndDirList</span>(p, dirs, files);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            files.<span class="hljs-title function_">push</span>(p);<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 描述：上传文件夹到远程目录</span><br><span class="hljs-comment">* 参数：server 远程电脑凭证；</span><br><span class="hljs-comment">* localDir 本地路径，</span><br><span class="hljs-comment">* remoteDir 远程路径；</span><br><span class="hljs-comment">* then 回调函数</span><br><span class="hljs-comment">* 回调：then(err)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">UploadDir</span>(<span class="hljs-params">server, localDir, remoteDir, then</span>) &#123;<br>    <span class="hljs-keyword">const</span> dirs = [];<br>    <span class="hljs-keyword">const</span> files = [];<br>    <span class="hljs-title class_">GetFileAndDirList</span>(localDir, dirs, files);<br> <br>    <span class="hljs-comment">// 删除远程指定目录下的所有文件</span><br>    <span class="hljs-keyword">const</span> deleteDir = [<span class="hljs-function">(<span class="hljs-params">done</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`rm -rf <span class="hljs-subst">$&#123;remoteDir&#125;</span>* \r\nexit\r\n`</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cmd);<br>        <span class="hljs-title class_">Shell</span>(server, cmd, done);<br>    &#125;];<br> <br>    <span class="hljs-comment">// 创建远程目录</span><br>    <span class="hljs-keyword">const</span> todoDir = [];<br>    dirs.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">dir</span>) =&gt;</span> &#123;<br>        todoDir.<span class="hljs-title function_">push</span>(<span class="hljs-function">(<span class="hljs-params">done</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> to = path.<span class="hljs-title function_">join</span>(remoteDir, dir.<span class="hljs-title function_">slice</span>(localDir.<span class="hljs-property">length</span>)).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[\\]/g</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>            <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`mkdir -p <span class="hljs-subst">$&#123;to&#125;</span>\r\nexit\r\n`</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cmd);<br>            <span class="hljs-title class_">Shell</span>(server, cmd, done);<br>        &#125;);<span class="hljs-comment">// end of push</span><br>    &#125;);<br> <br>    <span class="hljs-comment">// 上传文件</span><br>    <span class="hljs-keyword">const</span> todoFile = [];<br>    files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>        todoFile.<span class="hljs-title function_">push</span>(<span class="hljs-function">(<span class="hljs-params">done</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> to = path.<span class="hljs-title function_">join</span>(remoteDir, file.<span class="hljs-title function_">slice</span>(localDir.<span class="hljs-property">length</span>)).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[\\]/g</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`upload <span class="hljs-subst">$&#123;to&#125;</span>`</span>);<br>            <span class="hljs-title class_">UploadFile</span>(server, file, to, done);<br>        &#125;);<br>    &#125;);<br> <br>    control.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;donext&#x27;</span>, deleteDir, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            <span class="hljs-keyword">throw</span> err;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            control.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;donext&#x27;</span>, todoDir, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (err) &#123;<br>                    <span class="hljs-keyword">throw</span> err;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    control.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;donext&#x27;</span>, todoFile, then);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br> <br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Shell</span> = <span class="hljs-title class_">Shell</span>;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">UploadFile</span> = <span class="hljs-title class_">UploadFile</span>;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">DownloadFile</span> = <span class="hljs-title class_">DownloadFile</span>;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">GetFileOrDirList</span> = <span class="hljs-title class_">GetFileOrDirList</span>;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">DownloadDir</span> = <span class="hljs-title class_">DownloadDir</span>;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">UploadDir</span> = <span class="hljs-title class_">UploadDir</span>;<br></code></pre></td></tr></table></figure><h1 id="2-封装webpack插件"><a href="#2-封装webpack插件" class="headerlink" title="2. 封装webpack插件"></a>2. 封装webpack插件</h1><p>插件实现webpack打包后将打包目录文件上传到服务器上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// filename uploadFileWebPackPlugin.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 上传打包后的文件到服务器上的webpack插件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> &#123; spawn &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><span class="hljs-keyword">const</span> uploadDir = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./serverLib&#x27;</span>).<span class="hljs-property">UploadDir</span>;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadFileWebPackPlugin</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>    &#125;<br>    <br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>        <span class="hljs-comment">// 定义在打包后执行这个webpack插件</span><br>        <span class="hljs-comment">// 需要用到对应的钩子函数</span><br>        compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">done</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;upload-file-plugin&#x27;</span>, <span class="hljs-keyword">async</span> (status) =&gt; &#123;<br>            <span class="hljs-comment">// console.log(&#x27;this.options: &#x27;, this.options);</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">deploy</span>();<br>        &#125;);<br>    &#125;<br>    <br>    <span class="hljs-title function_">deploy</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> chmod = <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;chmod&#x27;</span>, [<span class="hljs-string">&#x27;-R&#x27;</span>, <span class="hljs-string">&#x27;777&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">buildFolder</span>]);<br>        chmod.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">code, signal</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;\n服务器授权成功，开始自动化部署~~\n&#x27;</span>);<br>            <span class="hljs-title function_">uploadDir</span>(<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">serverConfig</span>,<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">buildFolder</span>,<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">servePath</span>,<br>                <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;\n自动化部署成功~\n&#x27;</span>);<br>                &#125;,<br>            );<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">UploadFileWebPackPlugin</span>;<br></code></pre></td></tr></table></figure><h1 id="3-webpack配置文件的plugins配置项引入自定义插件"><a href="#3-webpack配置文件的plugins配置项引入自定义插件" class="headerlink" title="3. webpack配置文件的plugins配置项引入自定义插件"></a>3. webpack配置文件的plugins配置项引入自定义插件</h1><p>引入方式同Vue-cli，这里需要设定运行参数，与远程服务器对应即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// filename webpack.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 自动化部署代码引入 start</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 引入自定义的上传文件webpack插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">UploadFileWebPackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack-plugin/uploadFileWebPackPlugin&#x27;</span>);<br> <br><span class="hljs-comment">// 获取运行命令的参数</span><br><span class="hljs-keyword">const</span> deployArgv = process.<span class="hljs-property">argv</span>.<span class="hljs-title function_">pop</span>();<br><span class="hljs-comment">// 通过参数判断是否要执行上传插件</span><br><span class="hljs-keyword">let</span> isNeedUpload = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">let</span> uploadServerConfig = &#123;&#125;;<br><span class="hljs-comment">// 根据参数设置不同服务器信息</span><br><span class="hljs-keyword">if</span> (deployArgv === <span class="hljs-string">&#x27;-95&#x27;</span>) &#123;<br>    isNeedUpload = <span class="hljs-literal">true</span>;<br>    uploadServerConfig = &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;xxx.xxx.xxx.95&#x27;</span>, <span class="hljs-comment">// 服务器ip地址</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">55314</span>, <span class="hljs-comment">// 服务器端口号</span><br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;xxxxx&#x27;</span>, <span class="hljs-comment">// 登录服务器的用户名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;xxxxxxx&#x27;</span>, <span class="hljs-comment">// 登录服务器的密码</span><br>    &#125;;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (deployArgv === <span class="hljs-string">&#x27;-114&#x27;</span>) &#123;<br>    isNeedUpload = <span class="hljs-literal">true</span>;<br>    uploadServerConfig = &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;xxx.xxx.xxx.114&#x27;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">55314</span>,<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;xxxxx&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;xxxxxxxxx&#x27;</span>,<br>    &#125;;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 自动化部署代码引入 end</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> webpackConfig = &#123;<br>    <span class="hljs-attr">configureWebpack</span>: &#123;<br>        <span class="hljs-comment">// plugin配置项</span><br>        <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-comment">// // 在npm run build的时候才执行这个插件（自动化部署插件）</span><br>        <span class="hljs-comment">// ---- 尝试过这个方法使用插件，但是在不加参数的时候就会报错说webpack插件定义不正确的情况</span><br>        <span class="hljs-comment">// (process.env.NODE_ENV === &#x27;production&#x27; &amp;&amp; isNeedUpload)</span><br>        <span class="hljs-comment">// &amp;&amp; new UploadFileWebPackPlugin(&#123;</span><br>        <span class="hljs-comment">// // 服务器的配置信息</span><br>        <span class="hljs-comment">// serverConfig: uploadServerConfig,</span><br>        <span class="hljs-comment">// // 本地打包输出的文件夹路径</span><br>        <span class="hljs-comment">// buildFolder: &#x27;dist/&#x27;,</span><br>        <span class="hljs-comment">// // 上传到服务器上的路径</span><br>        <span class="hljs-comment">// servePath: &#x27;/home/sendi/fe/winne-test/&#x27;,</span><br>        <span class="hljs-comment">// &#125;),</span><br>        ],<br>    &#125;,<br>    <span class="hljs-comment">// 暂时关闭eslint校验, 方便测试</span><br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">overlay</span>: &#123;<br>        <span class="hljs-attr">warining</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">errors</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 配置部署应用包时的基本 URL</span><br>    <span class="hljs-attr">publicPath</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;/winne-test/&#x27;</span> : <span class="hljs-string">&#x27;/&#x27;</span>,<br>&#125;;<br> <br><span class="hljs-comment">// webpack插件根据环境判断来使用改为这个方式（在加参数或者不加参数的情况都能正确运行）</span><br><span class="hljs-keyword">if</span> ((process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; isNeedUpload)) &#123;<br>    webpackConfig.<span class="hljs-property">configureWebpack</span>.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">push</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadFileWebPackPlugin</span>(&#123;<br>            <span class="hljs-comment">// 服务器的配置信息</span><br>            <span class="hljs-attr">serverConfig</span>: uploadServerConfig,<br>            <span class="hljs-comment">// 本地打包输出的文件夹路径</span><br>            <span class="hljs-attr">buildFolder</span>: <span class="hljs-string">&#x27;dist/&#x27;</span>,<br>            <span class="hljs-comment">// 上传到服务器上的路径</span><br>            <span class="hljs-attr">servePath</span>: <span class="hljs-string">&#x27;/home/sendi/fe/winne-test/&#x27;</span>,<br>        &#125;),<br>    );<br>&#125;<br> <br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = webpackConfig;<br></code></pre></td></tr></table></figure><h1 id="4-运行打包命令"><a href="#4-运行打包命令" class="headerlink" title="4. 运行打包命令"></a>4. 运行打包命令</h1><ol><li><p>没用到自动化部署时，我们这样打包项目<br> 使用npm打包：</p><blockquote><p>npm run build</p></blockquote><p> 使用yarn打包：</p><blockquote><p>yarn build</p></blockquote></li><li><p>需要自动化部署时，我们这样打包项目（打包命令后面加参数，识别不同参数部署到不同服务器）<br> 使用npm打包：</p><blockquote><p>npm run build – -95 </p></blockquote><p> 或者（注意在参数前有两个中划线）</p><blockquote><p>npm run build – -114 </p></blockquote><p> 使用yarn打包：</p><blockquote><p>yarn build -95 </p></blockquote><p> 或者 </p><blockquote><p>yarn build -114</p></blockquote><p> 最后,如果要更方便的使用，可以把自动部署功能代码直接封装成npm包发布到npm上，这样以后用到时可以直接使用npm下载，就可以使用啦。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>自动化部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap5文字排版</title>
    <link href="/2022/06/01/Bootstrap5%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88/"/>
    <url>/2022/06/01/Bootstrap5%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 5 文字排版实际上就是文字的使用。<br>Bootstrap 5 默认的 font-size 为 16px, line-height 为 1.5。<br>默认的 font-family 为 “Helvetica Neue”, Helvetica, Arial, sans-serif。<br>此外，所有的 <code>&lt;p&gt;</code> 元素 margin-top: 0 、 margin-bottom: 1rem (16px)。</p><span id="more"></span><p>在Bootstrap 5 中，涉及到的内容主要是H1-H6，Display 标题类以及各种表述文字内容的标签。</p><h1 id="标题-H1-H6"><a href="#标题-H1-H6" class="headerlink" title="标题 H1-H6"></a>标题 H1-H6</h1><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h3 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>h4 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>h5 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>h6 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601180950.png" alt="效果图"></p><p>在Bootstrap 5中也支持使用.h1 - .h6 类，来做标题，效果同上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>h1 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>h2 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>h3 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h4&quot;</span>&gt;</span>h4 Bootstrap 标题 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h5&quot;</span>&gt;</span>h5 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h6&quot;</span>&gt;</span>h6 Bootstrap 标题<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="标题-Display"><a href="#标题-Display" class="headerlink" title="标题 Display"></a>标题 Display</h1><p>可以输出更大的标题，使用 .display-1 - .display-6 类，效果同上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">```html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Display 标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Display 标题可以输出更大更粗的字体样式。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display-1&quot;</span>&gt;</span>Display 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display-2&quot;</span>&gt;</span>Display 2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display-3&quot;</span>&gt;</span>Display 3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display-4&quot;</span>&gt;</span>Display 4<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601181217.png" alt="效果图"></p><h1 id="功能性标签"><a href="#功能性标签" class="headerlink" title="功能性标签"></a>功能性标签</h1><h2 id="lt-small-gt"><a href="#lt-small-gt" class="headerlink" title="&lt;small&gt;"></a><code>&lt;small&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>更小文本标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>small 元素用于字号更小的颜色更浅的文本:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>       <br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1 标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2 标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h3 标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>h4 标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>h5 标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>h6 标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601183140.png" alt="效果图"></p><h2 id="lt-mark-gt"><a href="#lt-mark-gt" class="headerlink" title="&lt;mark&gt;"></a><code>&lt;mark&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>高亮文本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>使用 mark 元素来 <span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>高亮<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span> 文本。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601183243.png" alt="效果图"></p><h2 id="lt-abbr-gt"><a href="#lt-abbr-gt" class="headerlink" title="&lt;abbr&gt;"></a><code>&lt;abbr&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Abbreviations<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The abbr element is used to mark up an abbreviation or acronym:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The <span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;World Health Organization&quot;</span>&gt;</span>WHO<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span> was founded in 1948.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601183333.png" alt="效果图"></p><h2 id="lt-blockquote-gt"><a href="#lt-blockquote-gt" class="headerlink" title="&lt;blockquote&gt;"></a><code>&lt;blockquote&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Blockquotes<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The blockquote element is used to present content from another source:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For 50 years, WWF has been protecting the future of nature. The world&#x27;s leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote-footer&quot;</span>&gt;</span>From WWF&#x27;s website<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601183435.png" alt="效果图"></p><h2 id="lt-dl-gt"><a href="#lt-dl-gt" class="headerlink" title="&lt;dl&gt;"></a><code>&lt;dl&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Description Lists<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The dl element indicates a description list:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- white cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span>     <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601183525.png" alt="效果图"></p><h2 id="lt-code-gt"><a href="#lt-code-gt" class="headerlink" title="&lt;code&gt;"></a><code>&lt;code&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>代码片段<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>可以将一些代码元素放到 code 元素里面:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>以下 HTML 元素: <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>section<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>, 和 <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> 用于定义部分文档内容。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601183611.png" alt="效果图"></p><h2 id="lt-kbd-gt"><a href="#lt-kbd-gt" class="headerlink" title="&lt;kbd&gt;"></a><code>&lt;kbd&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Keyboard Inputs<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>To indicate input that is typically entered via the keyboard, use the kbd element:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Use <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>ctrl + p<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> to open the Print dialog box.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601183652.png" alt="效果图"></p><h2 id="lt-pre-gt"><a href="#lt-pre-gt" class="headerlink" title="&lt;pre&gt;"></a><code>&lt;pre&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Multiple Code Lines<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For multiple lines of code, use the pre element:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><br>Text in a pre element<br>is displayed in a fixed-width<br>font, and it preserves<br>both      spaces and<br>line breaks.<br><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601183740.png" alt="效果图"></p><h2 id="更多排版类"><a href="#更多排版类" class="headerlink" title="更多排版类"></a>更多排版类</h2><table><thead><tr><th>类名</th><th>描述</th><th>效果</th></tr></thead><tbody><tr><td>lead</td><td>让段落更突出</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190116.png"></td></tr><tr><td>small</td><td>指定更小文本 (为父元素的 85% )</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190255.png"></td></tr><tr><td>text-start</td><td>左对齐</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190322.png"></td></tr><tr><td>text-center</td><td>居中</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190322.png"></td></tr><tr><td>text-end</td><td>右对齐</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190322.png"></td></tr><tr><td>text-justify</td><td>设定文本对齐,段落中超出屏幕部分文字自动换行</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190322.png"></td></tr><tr><td>text-nowrap</td><td>段落中超出屏幕部分不换行</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190322.png"></td></tr><tr><td>text-lowercase</td><td>设定文本小写</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190506.png"></td></tr><tr><td>text-uppercase</td><td>设定文本大写</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190506.png"></td></tr><tr><td>text-capitalize</td><td>设定单词首字母大写</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190506.png"></td></tr><tr><td>initialism</td><td>显示在 <code>&lt;abbr&gt;</code> 元素中的文本以小号字体展示，且可以将小写字母转换为大写字母</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190535.png"></td></tr><tr><td>list-unstyled</td><td>移除默认的列表样式，列表项中左对齐 ( <code>&lt;ul&gt;</code> 和 &#96;&#96;&#96;<ol>&#96;&#96; 中)。 这个类仅适用于直接子列表项 (如果需要移除嵌套的列表项，你需要在嵌套的列表中使用该样式)</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190623.png"></td></tr><tr><td>list-inline</td><td>将所有列表项放置同一行</td><td><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220601190639.png"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>css</tag>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap5的安装与使用</title>
    <link href="/2022/05/30/Bootstrap5%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/30/Bootstrap5%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 是全球最受欢迎的前端组件库，用于开发响应式布局、移动设备优先的 WEB 项目。</p><p>Bootstrap5 目前是 Bootstrap 的最新版本，是一套用于 HTML、CSS 和 JS 开发的开源工具集。它支持 Sass 变量和 mixins、响应式网格系统、大量的预建组件和强大的 JavaScript 插件，助你快速设计和自定义响应式、移动设备优先的站点。</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="CDN方式安装"><a href="#CDN方式安装" class="headerlink" title="CDN方式安装"></a>CDN方式安装</h2><p>国内推荐使用 Staticfile CDN 上的库：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 新 Bootstrap5 核心 CSS 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/5.1.1/css/bootstrap.min.css&quot;</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!--  popper.min.js 用于弹窗、提示、下拉菜单 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/popper.js/2.9.3/umd/popper.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 最新的 Bootstrap5 核心 JavaScript 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/5.1.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>popper.min.js 用于设置弹窗、提示、下拉菜单。</p></blockquote><p>bootstrap.bundle.js （未压缩版）或 bootstrap.bundle.min.js（压缩版） 包含了捆绑的插件如 popper.min.js 及其他依赖脚本，可以直接使用以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 新 Bootstrap5 核心 CSS 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/5.1.1/css/bootstrap.min.css&quot;</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 最新的 Bootstrap5 核心 JavaScript 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/5.1.1/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此外，还可以使用以下CDN服务：</p><ul><li>国内使用 : <a href="https://www.staticfile.org/">https://www.staticfile.org/</a></li><li>国际使用：<a href="https://cdnjs.com/">https://cdnjs.com/</a></li></ul><h2 id="下载Bootstrap-5"><a href="#下载Bootstrap-5" class="headerlink" title="下载Bootstrap 5"></a>下载Bootstrap 5</h2><ol><li><a href="https://getbootstrap.com/">点击此处打开官网</a></li><li>然后点击以下的Download</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530103134.png"><br>3. 再次点击Download，就会自动下载了</p><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530103356.png"></p><ol start="4"><li>下载好的文件如下图</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530103515.png"></p><h2 id="通过包管理模式安装"><a href="#通过包管理模式安装" class="headerlink" title="通过包管理模式安装"></a>通过包管理模式安装</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install bootstrap<br></code></pre></td></tr></table></figure><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yarn <span class="hljs-keyword">add </span><span class="hljs-keyword">bootstrap </span><br></code></pre></td></tr></table></figure><h3 id="gem"><a href="#gem" class="headerlink" title="gem"></a>gem</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gem</span> install bootstrap -v <span class="hljs-number">5</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">composer</span> require twbs/bootstrap:<span class="hljs-number">5</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><h3 id="新建一个页面"><a href="#新建一个页面" class="headerlink" title="新建一个页面"></a>新建一个页面</h3><p>Bootstrap 要求使用 HTML5 文件类型，所以需要添加 HTML5 doctype 声明。</p><p>HTML5 doctype 在文档头部声明，并设置对应编码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 新 Bootstrap5 核心 CSS 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/5.1.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  popper.min.js 用于弹窗、提示、下拉菜单 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/popper.js/2.9.3/umd/popper.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 最新的 Bootstrap5 核心 JavaScript 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/5.1.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了让 Bootstrap 开发的网站对移动设备友好，确保适当的绘制和触屏缩放，需要在网页的 head 之中添加 viewport meta 标签，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p><strong>width&#x3D;device-width</strong> 表示宽度是设备屏幕的宽度。</p></li><li><p><strong>initial-scale&#x3D;1</strong> 表示初始的缩放比例。</p></li></ol><h3 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h3><p>Bootstrap 5 需要一个容器元素来包裹网站的内容。</p><p>我们可以使用以下两个容器类：</p><ul><li>.container 类用于固定宽度并支持响应式布局的容器。</li><li>.container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2017/10/176B67B9-013C-429C-8FD0-BC2409011545.jpg" alt="container类"></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530125300.png" alt=".container"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530125359.png" alt=".container-fluid"></p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>css</tag>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap5网格系统</title>
    <link href="/2022/05/30/Bootstrap5%E7%BD%91%E6%A0%BC%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/05/30/Bootstrap5%E7%BD%91%E6%A0%BC%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 提供了一套响应式、移动设备优先的流式网格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多 12 列。Bootstrap 5 的网格系统是响应式的，列会根据屏幕大小自动重新排列。请确保每一行中列的总和等于或小于 12。</p><span id="more"></span><p>网格系统展示如图所示。<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530154442.png"></p><h1 id="网格类"><a href="#网格类" class="headerlink" title="网格类"></a>网格类</h1><p>Bootstrap 5 网格系统有以下 6 个类:</p><ul><li>.col- 针对所有设备。</li><li>.col-sm- 平板 - 屏幕宽度等于或大于 576px。</li><li>.col-md- 桌面显示器 - 屏幕宽度等于或大于 768px。</li><li>.col-lg- 大桌面显示器 - 屏幕宽度等于或大于 992px。</li><li>.col-xl- 特大桌面显示器 - 屏幕宽度等于或大于 1200px。</li><li>.col-xxl- 超大桌面显示器 - 屏幕宽度等于或大于 1400px。</li></ul><h1 id="网格系统规则"><a href="#网格系统规则" class="headerlink" title="网格系统规则"></a>网格系统规则</h1><p>Bootstrap5 网格系统规则:</p><ul><li>网格每一行需要放在设置了 .container (固定宽度) 或 .container-fluid (全屏宽度) 类的容器中，这样就可以自动设置一些外边距与内边距。</li><li>使用行来创建水平的列组。</li><li>内容需要放置在列中，并且只有列可以是行的直接子节点。</li><li>预定义的类如 .row 和 .col-sm-4 可用于快速制作网格布局。</li><li>列通过填充创建列内容之间的间隙。 这个间隙是通过 .rows 类上的负边距设置第一行和最后一列的偏移。</li><li>网格列是通过跨越指定的 12 个列来创建。 例如，设置三个相等的列，需要使用三个 .col-sm-4 来设置。</li><li>Bootstrap 5 和 Bootstrap 4 使用 flexbox（弹性盒子） 而不是浮动。 Flexbox 的一大优势是，没有指定宽度的网格列将自动设置为等宽与等高列 。</li></ul><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530155142.png"></p><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 第一个例子：控制列的宽度及在不同的设备上如何显示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-*-*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-*-*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-*-*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-*-*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 第二个例子：或让 Bootstrap 者自动处理布局 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><h2 id="创建相等宽度的列，Bootstrap-自动布局"><a href="#创建相等宽度的列，Bootstrap-自动布局" class="headerlink" title="创建相等宽度的列，Bootstrap 自动布局"></a>创建相等宽度的列，Bootstrap 自动布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="等宽响应式列"><a href="#等宽响应式列" class="headerlink" title="等宽响应式列"></a>等宽响应式列</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>.col-sm-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>.col-sm-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>.col-sm-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span>&gt;</span>.col-sm-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="不等宽响应式列"><a href="#不等宽响应式列" class="headerlink" title="不等宽响应式列"></a>不等宽响应式列</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>.col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-8&quot;</span>&gt;</span>.col-sm-8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="设置某一列宽度"><a href="#设置某一列宽度" class="headerlink" title="设置某一列宽度"></a>设置某一列宽度</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>col<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;</span>col-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>col<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="平板和桌面端"><a href="#平板和桌面端" class="headerlink" title="平板和桌面端"></a>平板和桌面端</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 col-md-6&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9 col-md-6&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>World<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="平板、桌面、大桌面显示器、超大桌面显示器"><a href="#平板、桌面、大桌面显示器、超大桌面显示器" class="headerlink" title="平板、桌面、大桌面显示器、超大桌面显示器"></a>平板、桌面、大桌面显示器、超大桌面显示器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 col-md-6 col-lg-4 col-xl-2 p-3 bg-primary text-white&quot;</span>&gt;</span>.col<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9 col-md-6 col-lg-8 col-xl-10 p-3 bg-dark text-white&quot;</span>&gt;</span>.col<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="嵌套列"><a href="#嵌套列" class="headerlink" title="嵌套列"></a>嵌套列</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-8&quot;</span>&gt;</span><br>    .col-8<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;</span>.col-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;</span>.col-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-4&quot;</span>&gt;</span>.col-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="偏移列"><a href="#偏移列" class="headerlink" title="偏移列"></a>偏移列</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 offset-md-4&quot;</span>&gt;</span>.col-md-4 .offset-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3 offset-md-3&quot;</span>&gt;</span>.col-md-3 .offset-md-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3 offset-md-3&quot;</span>&gt;</span>.col-md-3 .offset-md-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 offset-md-3&quot;</span>&gt;</span>.col-md-6 .offset-md-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>css</tag>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap5容器</title>
    <link href="/2022/05/30/Bootstrap5%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/05/30/Bootstrap5%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在上一节中，已经介绍到了Bootstrap5的容器中一部分内容，本节将详细介绍Bootstrap5的容器中的其他部分。</p><span id="more"></span><h1 id="两个容器类"><a href="#两个容器类" class="headerlink" title="两个容器类"></a>两个容器类</h1><ul><li>.container 类用于固定宽度并支持响应式布局的容器。</li><li>.container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2017/10/176B67B9-013C-429C-8FD0-BC2409011545.jpg" alt="container类"></p><h1 id="创建固定宽度的响应式页面"><a href="#创建固定宽度的响应式页面" class="headerlink" title="创建固定宽度的响应式页面"></a>创建固定宽度的响应式页面</h1><p><strong>.container</strong>用于创建固定宽度的响应式页面。响应式宽度规则如下所示。<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530153013.png"></p><blockquote><p><strong>注意：</strong>超级大屏幕 (≥1400px) 是 Bootstrap 5 新增加的， Bootstrap 4 最大的是特大屏幕 (≥1200px)。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="创建全屏幕尺寸的容器"><a href="#创建全屏幕尺寸的容器" class="headerlink" title="创建全屏幕尺寸的容器"></a>创建全屏幕尺寸的容器</h1><p><strong>.container-fluid</strong>类用于创建一个全屏幕尺寸的容器，容器始终跨越整个屏幕宽度（width 始终为 100%）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="设置容器内边距"><a href="#设置容器内边距" class="headerlink" title="设置容器内边距"></a>设置容器内边距</h1><p>默认情况下，容器都有填充左右内边距，顶部和底部没有填充内边距。 Bootstrap 提供了一些间距类用于填充边距。 比如 .pt-5 就是用于填充顶部内边距：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container pt-5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Bootstrap 也提供了一些边框（border）和颜色（bg-dark、bg-primary等）类用于设置容器的样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container p-5 my-5 border&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container p-5 my-5 bg-dark text-white&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container p-5 my-5 bg-primary text-white&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="创建响应式容器"><a href="#创建响应式容器" class="headerlink" title="创建响应式容器"></a>创建响应式容器</h1><p>使用 <strong>.container-sm|md|lg|xl</strong> 类来创建响应式容器。容器的 max-width 属性值会根据屏幕的大小来改变。<br>响应式容器变化规则为：<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220530153737.png" alt="响应式容器变化规则"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-sm&quot;</span>&gt;</span>.container-sm<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-md&quot;</span>&gt;</span>.container-md<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-lg&quot;</span>&gt;</span>.container-lg<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xl&quot;</span>&gt;</span>.container-xl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-xxl&quot;</span>&gt;</span>.container-xxl<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>css</tag>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用VSCode配置Java环境</title>
    <link href="/2022/05/27/%E4%BD%BF%E7%94%A8VSCode%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/05/27/%E4%BD%BF%E7%94%A8VSCode%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>众所周知，现在开发Java程序一般使用的是Jetbrains公司的宇宙级IDE——IntelliJ IDEA，他对Java的支持非常完美，简直是符合人体工程学的设计理念。<br>本次介绍最新版本的宇宙级代码编辑器VSCode（Visual Studio Code），以及如何配置Java环境。</p><span id="more"></span><h1 id="常见的Java开发工具对比"><a href="#常见的Java开发工具对比" class="headerlink" title="常见的Java开发工具对比"></a>常见的Java开发工具对比</h1><h2 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h2><p><img src="https://img2.baidu.com/it/u=91355798,3954706045&fm=253&fmt=auto&app=138&f=PNG?w=800&h=426" alt="eclipse"><br>Eclipse 是一个开放源代码的、基于Java的可扩展开发平台。就其本身而言，它只是一个框架和一组服务，用于通过插件组件构建开发环境。幸运的是，Eclipse 附带了一个标准的插件集，包括Java开发工具（Java Development Kit，JDK）。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>安装简单</li><li>文件小</li><li>可扩展性强 <h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>工具太老了，以至于现在的课程一般不会选择使用它</li><li>Bug比较多，资料也不好找</li></ul><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><p><img src="https://img0.baidu.com/it/u=3089044358,909437572&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=313" alt="IntelliJ IDEA"><br>IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、JavaEE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Java,Kotlin等少数语言。</p><p>总的来说，本软件用的人多，更符合开发人员的需求，如果我要做Java开发，我更愿意用它。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>可以自动提示</li><li>好用</li><li>可以适合于任何Java开发环境</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>太重量级</li><li>收费</li><li>只支持Java</li></ul><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p><img src="https://img2.baidu.com/it/u=1610309039,11415548&fm=253&fmt=auto&app=138&f=JPEG?w=890&h=500" alt="Visual Studio Code"><br>Visual Studio Code（简称“VS Code”  ）是Microsoft在2015年4月30日Build开发者大会上正式宣布一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代Web和云应用的跨平台源代码编辑器，可在桌面上运行，并且可用于Windows，macOS和Linux。它具有对JavaScript，TypeScript和Node.js的内置支持，并具有丰富的其他语言（例如C++，C＃，Java，Python，PHP，Go）和运行时（例如.NET和Unity）扩展的生态系统。</p><p>要我说的话，这玩意儿其实更适合作为前端开发的工具，但是微软野心很大，最新的新闻说，VSCode已经全面支持Java开发了，因此体验一下。</p><h1 id="VSCode安装"><a href="#VSCode安装" class="headerlink" title="VSCode安装"></a>VSCode安装</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>VS Code的官网： <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>在官网下载速度太慢，只有几十 Kb&#x2F;s,要下载几十分钟。</p><p>但是，只要将下载链接中的“az764295.vo.msecnd.net” 替换为国内镜像地址“vscode.cdn.azure.cn”，下载速度直接飙升至几十 Mb&#x2F;s。</p><p>如将官网下载链接：<a href="https://az764295.vo.msecnd.net/stable/dfd34e8260c270da74b5c2d86d61aee4b6d56977/VSCodeUserSetup-x64-1.66.2.exe">https://az764295.vo.msecnd.net/stable/dfd34e8260c270da74b5c2d86d61aee4b6d56977/VSCodeUserSetup-x64-1.66.2.exe</a></p><p>改成：</p><p><a href="https://vscode.cdn.azure.cn/stable/dfd34e8260c270da74b5c2d86d61aee4b6d56977/VSCodeUserSetup-x64-1.66.2.exe">https://vscode.cdn.azure.cn/stable/dfd34e8260c270da74b5c2d86d61aee4b6d56977/VSCodeUserSetup-x64-1.66.2.exe</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一路下一步，next，安装，即可，安装很简单，建议勾上Add to path。</p><h1 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h1><h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p>下载地址：<a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527134929.png" alt="下载JDK"></p><p>安装也是一路下一步即可，如果有需要请求改JDK的安装路径，前提是你能找得到。</p><h2 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h2><ol><li>打开“此电脑”。在右边的“此电脑”上右键，查看属性，然后点击高级设置，如下图所示</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527135209.png"><br>2. 打开环境变量，如下图所示</p><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527135320.png"><br>3. 在“系统变量”中找到变量名为 Path 的变量，点击“编辑”按钮（找不到则点击“新建”按钮）</p><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527135438.png"><br>4. 在“变量名”文本框中输入 Path ，在“变量值”文本框中输入 JDK 的 bin 目录的安装路径 E:\jdk\jdk1.8.0_152\bin ，然后点击确定按钮完成配置。<br>5. 新建环境变量，在“变量名”文本框中输入 JAVA_HOME ，在“变量值”文本框中输入 JDK 的安装路径 E:\jdk\jdk1.8.0_152 ，单击“确定”按钮完成配置。<br>6. 命令提示符输入java -veriosn，如下图所示，就算安装成功了，老套路。</p><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527135632.png"></p><h1 id="配置VSCode"><a href="#配置VSCode" class="headerlink" title="配置VSCode"></a>配置VSCode</h1><ol><li>首先安装Java相关的插件，下图的所有我安装的插件，都安装好。</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527135843.png"><br><strong>注意：</strong>你最好安装的是JDK11，而不是JDK8，JDK8虽然都在推荐使用，但是很多程序已经不推荐使用了，就比如说springboot 3，建议更新。</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><ol><li>点击加号</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527143353.png"><br>2. 选择构建工具，选Spring Boot</p><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527143446.png"><br>3. 选择Maven</p><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527143635.png"><br>4. 接下来是配置包名等步骤，这里不再赘述，给出要配置的选项</p><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527143805.png"><br>这里需要配置的就是图中的内容，可自行选择。</p><p><strong>注意：</strong>如果你选择spring boot版本是3的话，不要选Java8的版本，至少需要11才可以运行。</p><ol start="5"><li>打开项目文件夹</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527143958.png"><br>直接用vscode打开项目，就是图中的样子。</p><h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><h2 id="界面操作"><a href="#界面操作" class="headerlink" title="界面操作"></a>界面操作</h2><ol><li>源码视图，里面是以文件存放的。可以看出工程的结构</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527144108.png" alt="源码视图"></p><ol start="2"><li>项目视图，本视图就相当于idea中的文件</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527144326.png" alt="项目视图"><br>图中，1到4分别是创建java项目，导出jar包，配置Java版本和配置classpath，是不是比idea简单多了<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527144450.png" alt="项目视图"></p><ol start="3"><li>Maven操作视图</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527144722.png" alt="Maven操作视图"><br>可以看出这里和idea是一样的</p><ol start="4"><li>Spring boot操作视图</li></ol><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527144804.png" alt="Spring boot操作视图"><br>这里主要是管理Springboot的启动关闭等，如果要启动，点击三角箭头即可，运行则点小地球。</p><h2 id="修改application-yml文件"><a href="#修改application-yml文件" class="headerlink" title="修改application.yml文件"></a>修改application.yml文件</h2><p>打开yml文件，然后改成以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">devtools:</span><br>  <span class="hljs-attr">restart:</span><br>   <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># default: false 启用热部署</span><br><br><span class="hljs-attr">test:</span><br> <span class="hljs-attr">project_name:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><h2 id="新建TestController-java"><a href="#新建TestController-java" class="headerlink" title="新建TestController.java"></a>新建TestController.java</h2><p>按照图中提示来新建TestController.java<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527145053.png"></p><h2 id="修改Hello-World"><a href="#修改Hello-World" class="headerlink" title="修改Hello World"></a>修改Hello World</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.iotlearn.test.test.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;test.project_name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String projectName;<br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello &quot;</span> + <span class="hljs-built_in">this</span>.projectName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行项目，查看结果"><a href="#运行项目，查看结果" class="headerlink" title="运行项目，查看结果"></a>运行项目，查看结果</h2><p>点击Springboot视图里面的运行按钮以后，打开网页，访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/test/</span>test<br></code></pre></td></tr></table></figure><p>就可以看到结果如下图所示<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220527145328.png"></p><p>这样就大功告成了。</p>]]></content>
    
    
    <categories>
      
      <category>Java编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode编译单文件及多文件方法</title>
    <link href="/2022/05/21/VSCode%E7%BC%96%E8%AF%91%E5%8D%95%E6%96%87%E4%BB%B6%E5%8F%8A%E5%A4%9A%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/21/VSCode%E7%BC%96%E8%AF%91%E5%8D%95%E6%96%87%E4%BB%B6%E5%8F%8A%E5%A4%9A%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="单文件编译"><a href="#单文件编译" class="headerlink" title="单文件编译"></a>单文件编译</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220521170249.png"></p><h2 id="运行调试"><a href="#运行调试" class="headerlink" title="运行调试"></a>运行调试</h2><p>点击侧边栏运行与调试，创建launch.json，选择C++（GDB&#x2F;LLDB）然后选择g++.exe。<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220521163620.png"><br>打断点后按F5调试，可以看到已经可以调试了。同时VSCode自动生成了main.exe文件。<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220521170352.png"></p><h1 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h1><p>按照以下形式来创建多文件项目<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220521171040.png"><br>main.cpp的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;swap.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b = &quot;</span> &lt;&lt; b &lt;&lt; std::endl;<br>    <span class="hljs-built_in">swap</span>(a, b);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b = &quot;</span> &lt;&lt; b &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>swap.h的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SWAP_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAP_H</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>swap.cpp的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h2><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220521174451.png"></p><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220521174539.png"></p><p>依次选择对应的编译选项</p>]]></content>
    
    
    <categories>
      
      <category>C++编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之七大原则</title>
    <link href="/2022/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <url>/2022/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<p>讨论设计模式中一般所要遵循的七个设计原则，它们分别为开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则和合成复用原则，这也是设计模式的基础</p><span id="more"></span><p>这 7 种设计原则是软件设计模式必须尽量遵循的原则，是设计模式的基础。在实际开发过程中，并不是一定要求所有代码都遵循设计原则，而是要综合考虑人力、时间、成本、质量，不刻意追求完美，要在适当的场景遵循设计原则。这体现的是一种平衡取舍，可以帮助我们设计出更加优雅的代码结构。</p><h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><p>根据个各种设计原则的侧重点不同，使用以下表格来归纳总结软件设计模式的七大原则。</p><table><thead><tr><th>原则</th><th>一句话归纳</th><th>目的</th></tr></thead><tbody><tr><td>开闭原则</td><td>对扩展开放，对修改关闭</td><td>降低维护带来的新风险</td></tr><tr><td>里氏替换原则</td><td>不要破坏继承体系，子类重写方法功能发生改变，不应该影响父类方法的含义</td><td>防止继承泛滥</td></tr><tr><td>依赖倒置原则</td><td>高层不应该依赖低层，要面向接口编程</td><td>更利于代码结构的升级扩展</td></tr><tr><td>单一职责原则</td><td>一个类只干一件事，实现类要单一</td><td>便于理解，提高代码的可读性</td></tr><tr><td>接口隔离原则</td><td>一个接口只干一件事，接口要精简单一</td><td>功能解耦，高聚合、低耦合</td></tr><tr><td>迪米特法则</td><td>不该知道的不要知道，一个类应该保持对其它对象最少的了解，降低耦合度</td><td>只和朋友交流，不和陌生人说话，减少代码臃肿</td></tr><tr><td>合成复用原则</td><td>尽量使用组合或者聚合关系实现代码复用，少使用继承</td><td>降低代码耦合</td></tr></tbody></table><h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>开闭原则（Open Closed Principle，<strong>OCP</strong>）由勃兰特·梅耶（Bertrand Meyer）提出，他在 1988 年的著作<strong>《面向对象软件构造》</strong>（Object Oriented Software Construction）中提出：</p><div class="note note-success">            <p>软件实体应当对扩展开放，对修改关闭（Software entities should be open for extension，but closed for modification）</p>          </div><p>这就是开闭原则的经典定义。</p><p>软件实体包括：</p><ol><li>项目中划分出的模块</li><li>类与接口</li><li>方法</li></ol><blockquote><p>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。</p></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>软件测试时只需要对扩展的代码进行测试</li><li>可以提高代码的可复用性</li><li>可以提高软件的可维护性</li></ol><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><h3 id="【例】Windows-的桌面主题设计"><a href="#【例】Windows-的桌面主题设计" class="headerlink" title="【例】Windows 的桌面主题设计"></a>【例】Windows 的桌面主题设计</h3><p>分析：Windows 的主题是桌面背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的桌面主题，也可以从网上下载新的主题。这些主题有共同的特点，可以为其定义一个抽象类（Abstract Subject），而每个具体的主题（Specific Subject）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的，其类图如图 1 所示。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q113100151L5.gif" alt="Windows的桌面主题类图"></p><h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p><strong>里氏替换原则</strong>（Liskov Substitution Principle，<strong>LSP</strong>）由麻省理工学院计算机科学实验室的里斯科夫（Liskov）女士在 1987 年的“面向对象技术的高峰会议”（OOPSLA）上发表的一篇文章《数据抽象和层次》（Data Abstraction and Hierarchy）里提出来的，她提出：</p><div class="note note-success">            <p>继承必须确保超类所拥有的性质在子类中仍然成立（Inheritance should ensure that any property proved about supertype objects also holds for subtype objects）。</p>          </div><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><ol><li>里氏替换原则是实现开闭原则的重要方式之一。</li><li>它克服了继承中重写父类造成的可复用性变差的缺点。</li><li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</li><li>加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</li></ol><h2 id="实现方法-1"><a href="#实现方法-1" class="headerlink" title="实现方法"></a>实现方法</h2><p><strong>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。</strong>子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>里氏替换原则的定义可以总结为：</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>子类中可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li><li>当子类的方法实现父类的方法时（重写&#x2F;重载或实现抽象方法），方法的后置条件（即方法的的输出&#x2F;返回值）要比父类的方法更严格或相等</li></ul><p>通过重写父类的方法来完成新的功能写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其<strong>修正方法</strong>是：<strong>取消原来的继承关系，重新设计它们之间的关系</strong>。</p><p>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等。</p><h3 id="【例】里氏替换原则在“几维鸟不是鸟”实例中的应用。"><a href="#【例】里氏替换原则在“几维鸟不是鸟”实例中的应用。" class="headerlink" title="【例】里氏替换原则在“几维鸟不是鸟”实例中的应用。"></a>【例】里氏替换原则在“几维鸟不是鸟”实例中的应用。</h3><p>分析：鸟一般都会飞行，如燕子的飞行速度大概是每小时 120 千米。但是新西兰的几维鸟由于翅膀退化无法飞行。假如要设计一个实例，计算这两种鸟飞行 300 千米要花费的时间。显然，拿燕子来测试这段代码，结果正确，能计算出所需要的时间；但拿几维鸟来测试，结果会发生“除零异常”或是“无穷大”，明显不符合预期，其类图如图所示。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q11311094H32.gif" alt="几维鸟不是鸟”实例的类图"><br>代码以Java为例：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> principle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LSPtest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Bird</span> <span class="hljs-variable">bird1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swallow</span>();<br>        <span class="hljs-type">Bird</span> <span class="hljs-variable">bird2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrownKiwi</span>();<br>        bird1.setSpeed(<span class="hljs-number">120</span>);<br>        bird2.setSpeed(<span class="hljs-number">120</span>);<br>        System.out.println(<span class="hljs-string">&quot;如果飞行300公里：&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;燕子将飞行&quot;</span> + bird1.getFlyTime(<span class="hljs-number">300</span>) + <span class="hljs-string">&quot;小时.&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;几维鸟将飞行&quot;</span> + bird2.getFlyTime(<span class="hljs-number">300</span>) + <span class="hljs-string">&quot;小时。&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception err) &#123;<br>            System.out.println(<span class="hljs-string">&quot;发生错误了!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//鸟类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-type">double</span> flySpeed;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">double</span> speed)</span> &#123;<br>        flySpeed = speed;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getFlyTime</span><span class="hljs-params">(<span class="hljs-type">double</span> distance)</span> &#123;<br>        <span class="hljs-keyword">return</span> (distance / flySpeed);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//燕子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Swallow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Bird</span> &#123;<br>&#125;<br><br><span class="hljs-comment">//几维鸟类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BrownKiwi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSpeed</span><span class="hljs-params">(<span class="hljs-type">double</span> speed)</span> &#123;<br>        flySpeed = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序运行错误的原因是：几维鸟类重写了鸟类的 setSpeed(double speed) 方法，这违背了里氏替换原则。正确的做法是：取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，它们都有奔跑的能力。几维鸟的飞行速度虽然为 0，但奔跑速度不为 0，可以计算出其奔跑 300 千米所要花费的时间。其类图如图所示。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q11311101SN.gif" alt="“几维鸟是动物”实例的类图"></p><h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p><strong>依赖倒置原则</strong>（Dependence Inversion Principle，<strong>DIP</strong>）是 Object Mentor 公司总裁罗伯特·马丁（Robert C.Martin）于 1996 年在 C++ Report 上发表的文章。</p><p><strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</strong></p><p>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以<strong>抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多</strong>。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类。</p><p>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。</p><p>依赖倒置原则的原始定义为：</p><div class="note note-success">            <p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象（High level modules shouldnot depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions）。其核心思想是：<strong>要面向接口编程，不要面向实现编程</strong>。    </p>          </div><h2 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h2><ul><li>降低类间的耦合性。</li><li>提高系统的稳定性。</li><li>减少并行开发引起的风险。</li><li>提高代码的可读性和可维护性。</li></ul><h2 id="实现方法-2"><a href="#实现方法-2" class="headerlink" title="实现方法"></a>实现方法</h2><p>依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。</p><ol><li>每个类尽量提供接口或抽象类，或者两者都具备。</li><li>变量的声明类型尽量是接口或者是抽象类。</li><li>任何类都不应该从具体类派生。</li><li>使用继承时尽量遵循里氏替换原则。</li></ol><h3 id="【例】依赖倒置原则在“顾客购物程序”中的应用。"><a href="#【例】依赖倒置原则在“顾客购物程序”中的应用。" class="headerlink" title="【例】依赖倒置原则在“顾客购物程序”中的应用。"></a>【例】依赖倒置原则在“顾客购物程序”中的应用。</h3><p>分析：本程序反映了 “顾客类”与“商店类”的关系。商店类中有 sell() 方法，顾客类通过该方法购物以下代码定义了顾客类通过韶关网店 ShaoguanShop 购物：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shopping</span><span class="hljs-params">(ShaoguanShop shop)</span> &#123;<br>        <span class="hljs-comment">//购物</span><br>        System.out.println(shop.sell());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，这种设计存在缺点，如果该顾客想从另外一家商店（如婺源网店 WuyuanShop）购物，就要将该顾客的代码修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shopping</span><span class="hljs-params">(WuyuanShop shop)</span> &#123;<br>        <span class="hljs-comment">//购物</span><br>        System.out.println(shop.sell());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>顾客每更换一家商店，都要修改一次代码，这明显违背了开闭原则。存在以上缺点的原因是：顾客类设计时同具体的商店类绑定了，这违背了依赖倒置原则。解决方法是：定义“婺源网店”和“韶关网店”的共同接口 Shop，顾客类面向该接口编程，其代码修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shopping</span><span class="hljs-params">(Shop shop)</span> &#123;<br>        <span class="hljs-comment">//购物</span><br>        System.out.println(shop.sell());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，不管顾客类 Customer 访问什么商店，或者增加新的商店，都不需要修改原有代码了，其类图如图所示。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q113131610L7.gif" alt="顾客购物程序的类图"><br>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> principle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DIPtest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">wang</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>        System.out.println(<span class="hljs-string">&quot;顾客购买以下商品：&quot;</span>);<br>        wang.shopping(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ShaoguanShop</span>());<br>        wang.shopping(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WuyuanShop</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//商店</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shop</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>; <span class="hljs-comment">//卖</span><br>&#125;<br><br><span class="hljs-comment">//韶关网店</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShaoguanShop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shop</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;韶关土特产：香菇、木耳……&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//婺源网店</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WuyuanShop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shop</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;婺源土特产：绿茶、酒糟鱼……&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//顾客</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shopping</span><span class="hljs-params">(Shop shop)</span> &#123;<br>        <span class="hljs-comment">//购物</span><br>        System.out.println(shop.sell());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p><strong>单一职责原则</strong>（Single Responsibility Principle，<strong>SRP</strong>）又称单一功能原则，由罗伯特·C.马丁（Robert C. Martin）于《敏捷软件开发：原则、模式和实践》一书中提出的。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。</p><p>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</p><ul><li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</li><li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。</p><ul><li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li><li>提高类的可读性。复杂性降低，自然其可读性会提高。</li><li>提高系统的可维护性。可读性提高，那自然更容易维护了。</li><li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。<h2 id="实现方法-3"><a href="#实现方法-3" class="headerlink" title="实现方法"></a>实现方法</h2>单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。下面以大学学生工作管理程序为例介绍单一职责原则的应用。</li></ul><h3 id="【例】大学学生工作管理程序。"><a href="#【例】大学学生工作管理程序。" class="headerlink" title="【例】大学学生工作管理程序。"></a>【例】大学学生工作管理程序。</h3><p>分析：大学学生工作主要包括学生生活辅导和学生学业指导两个方面的工作，其中生活辅导主要包括班委建设、出勤统计、心理辅导、费用催缴、班级管理等工作，学业指导主要包括专业引导、学习辅导、科研指导、学习总结等工作。如果将这些工作交给一位老师负责显然不合理，正确的做 法是生活辅导由辅导员负责，学业指导由学业导师负责，其类图如图所示。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q113133F4161.gif" alt="大学学生工作管理程序的类图"><br><strong>注意：单一职责同样也适用于方法。一个方法应该尽可能做好一件事情。如果一个方法处理的事情太多，其颗粒度会变得很粗，不利于重用。</strong></p><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><h2 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h2><p><strong>接口隔离原则</strong>（Interface Segregation Principle，<strong>ISP</strong>）要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。</p><p>2002 年罗伯特·C.马丁给“接口隔离原则”的定义是：</p><div class="note note-success">            <p>客户端不应该被迫依赖于它不使用的方法（Clients should not be forced to depend on methods they do not use）。该原则还有另外一个定义：一个类对另一个类的依赖应该建立在最小的接口上（The dependency of one class to another one should depend on the smallest possible interface）。 </p>          </div><p>以上两个定义的含义是：<strong>要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用</strong>。</p><p>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</p><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li></ul><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><p>接口隔离原则是为了约束接口、降低类对接口的依赖性。</p><ol><li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</li><li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</li><li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</li><li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</li><li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</li></ol><h2 id="实现方法-4"><a href="#实现方法-4" class="headerlink" title="实现方法"></a>实现方法</h2><p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p><ol><li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li><li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li><li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li></ol><h3 id="【例】学生成绩管理程序"><a href="#【例】学生成绩管理程序" class="headerlink" title="【例】学生成绩管理程序"></a>【例】学生成绩管理程序</h3><p>分析：学生成绩管理程序一般包含插入成绩、删除成绩、修改成绩、计算总分、计算均分、打印成绩信息、査询成绩信息等功能，如果将这些功能全部放到一个接口中显然不太合理，正确的做法是将它们分别放在输入模块、统计模块和打印模块等 3 个模块中，其类图如图所示。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q113141Q0X3.gif" alt="学生成绩管理程序的类图"><br>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> principle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ISPtest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">InputModule</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> StuScoreList.getInputModule();<br>        <span class="hljs-type">CountModule</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> StuScoreList.getCountModule();<br>        <span class="hljs-type">PrintModule</span> <span class="hljs-variable">print</span> <span class="hljs-operator">=</span> StuScoreList.getPrintModule();<br>        input.insert();<br>        count.countTotalScore();<br>        print.printStuInfo();<br>        <span class="hljs-comment">//print.delete();</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输入模块接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InputModule</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">modify</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//统计模块接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CountModule</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">countTotalScore</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">countAverage</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//打印模块接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PrintModule</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStuInfo</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryStuInfo</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StuScoreList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InputModule</span>, CountModule, PrintModule &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">StuScoreList</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputModule <span class="hljs-title function_">getInputModule</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (InputModule) <span class="hljs-keyword">new</span> <span class="hljs-title class_">StuScoreList</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CountModule <span class="hljs-title function_">getCountModule</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (CountModule) <span class="hljs-keyword">new</span> <span class="hljs-title class_">StuScoreList</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PrintModule <span class="hljs-title function_">getPrintModule</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (PrintModule) <span class="hljs-keyword">new</span> <span class="hljs-title class_">StuScoreList</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;输入模块的insert()方法被调用！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;输入模块的delete()方法被调用！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modify</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;输入模块的modify()方法被调用！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countTotalScore</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;统计模块的countTotalScore()方法被调用！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countAverage</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;统计模块的countAverage()方法被调用！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStuInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;打印模块的printStuInfo()方法被调用！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryStuInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;打印模块的queryStuInfo()方法被调用！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h1><h2 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h2><p><strong>迪米特法则</strong>（Law of Demeter，<strong>LoD</strong>）又叫作<strong>最少知识原则</strong>（Least Knowledge Principle，<strong>LKP</strong>)，产生于 1987 年美国东北大学（Northeastern University）的一个名为迪米特（Demeter）的研究项目，由伊恩·荷兰（Ian Holland）提出，被 UML 创始者之一的布奇（Booch）普及，后来又因为在经典著作《程序员修炼之道》（The Pragmatic Programmer）提及而广为人知。</p><p>迪米特法则的定义是：</p><div class="note note-success">            <p>只与你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。其含义是：<strong>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用</strong>。其目的是<strong>降低类之间的耦合度，提高模块的相对独立性</strong>。</p>          </div><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><p>迪米特法则要求限制软件实体之间通信的宽度和深度。</p><ol><li>降低了类之间的耦合度，提高了模块的相对独立性。</li><li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</li></ol><p><strong>但是</strong>，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要<strong>反复权衡</strong>，确保高内聚和低耦合的同时，保证系统的结构清晰。</p><h2 id="实现方法-5"><a href="#实现方法-5" class="headerlink" title="实现方法"></a>实现方法</h2><p>从迪米特法则的定义和特点可知，它强调以下两点：</p><ol><li>从依赖者的角度来说，只依赖应该依赖的对象。</li><li>从被依赖者的角度说，只暴露应该暴露的方法。</li></ol><p>所以，在运用迪米特法则时要注意以下 6 点。</p><ol><li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li><li>在类的结构设计上，尽量降低类成员的访问权限。</li><li>在类的设计上，优先考虑将一个类设置成不变类。</li><li>在对其他类的引用上，将引用其他对象的次数降到最低。</li><li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</li><li>谨慎使用序列化（Serializable）功能。</li></ol><h3 id="【例】明星与经纪人的关系实例"><a href="#【例】明星与经纪人的关系实例" class="headerlink" title="【例】明星与经纪人的关系实例"></a>【例】明星与经纪人的关系实例</h3><p>分析：明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如与粉丝的见面会，与媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则，其类图如图所示。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q113152Q5W1.gif" alt="明星与经纪人的关系图"><br>完整代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> principle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoDtest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Agent</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>();<br>        agent.setStar(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&quot;林心如&quot;</span>));<br>        agent.setFans(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fans</span>(<span class="hljs-string">&quot;粉丝韩丞&quot;</span>));<br>        agent.setCompany(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>(<span class="hljs-string">&quot;中国传媒有限公司&quot;</span>));<br>        agent.meeting();<br>        agent.business();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//经纪人</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Agent</span> &#123;<br>    <span class="hljs-keyword">private</span> Star myStar;<br>    <span class="hljs-keyword">private</span> Fans myFans;<br>    <span class="hljs-keyword">private</span> Company myCompany;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStar</span><span class="hljs-params">(Star myStar)</span> &#123;<br>        <span class="hljs-built_in">this</span>.myStar = myStar;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFans</span><span class="hljs-params">(Fans myFans)</span> &#123;<br>        <span class="hljs-built_in">this</span>.myFans = myFans;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCompany</span><span class="hljs-params">(Company myCompany)</span> &#123;<br>        <span class="hljs-built_in">this</span>.myCompany = myCompany;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">meeting</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(myFans.getName() + <span class="hljs-string">&quot;与明星&quot;</span> + myStar.getName() + <span class="hljs-string">&quot;见面了。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(myCompany.getName() + <span class="hljs-string">&quot;与明星&quot;</span> + myStar.getName() + <span class="hljs-string">&quot;洽淡业务。&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//明星</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    Star(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//粉丝</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fans</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    Fans(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//媒体公司</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Company</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    Company(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h1><h2 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h2><p><strong>合成复用原则</strong>（Composite Reuse Principle，<strong>CRP</strong>）又叫组合&#x2F;<strong>聚合复用原则</strong>（Composition&#x2F;Aggregate Reuse Principle，<strong>CARP</strong>）。它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p><p><strong>如果要使用继承关系，则必须严格遵循里氏替换原则</strong>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p><h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h2><p>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。</p><ol><li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li><li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li><li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li></ol><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点。</p><ol><li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li><li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。</li><li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。<h2 id="实现方法-6"><a href="#实现方法-6" class="headerlink" title="实现方法"></a>实现方法</h2>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。</li></ol><p>下面以汽车分类管理程序为例来介绍合成复用原则的应用。</p><h3 id="【例】汽车分类管理程序。"><a href="#【例】汽车分类管理程序。" class="headerlink" title="【例】汽车分类管理程序。"></a>【例】汽车分类管理程序。</h3><p>分析：汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。图所示是用继承关系实现的汽车分类的类图。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q113160133151.gif" alt="用继承关系实现的汽车分类的类图"><br>从图可以看出用继承关系实现会产生很多子类，而且增加新的“动力源”或者增加新的“颜色”都要修改源代码，这违背了开闭原则，显然不可取。但如果改用组合关系实现就能很好地解决以上问题，其类图如图所示。<br><img src="http://c.biancheng.net/uploads/allimg/181113/3-1Q11316034X57.gif" alt="用组合关系实现的汽车分类的类图"></p><p><a href="http://c.biancheng.net/view/8508.html">查看原文</a></p>]]></content>
    
    
    <categories>
      
      <category>开发经验</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之优秀设计的特征</title>
    <link href="/2022/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BC%98%E7%A7%80%E8%AE%BE%E8%AE%A1%E7%9A%84%E7%89%B9%E5%BE%81/"/>
    <url>/2022/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BC%98%E7%A7%80%E8%AE%BE%E8%AE%A1%E7%9A%84%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<p>讨论设计模式的优秀设计的特征，主要是代码复用和拓展性。</p><span id="more"></span><h1 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h1><p>一般情况下，复用可以分为三个层次。在最底层，可以复用类、类库、容器，也许还有一些类的“团体（例如容器和迭代器）”。</p><p>框架位于最高层。它们能帮助你精简自己的设计，可以明确解决问题所需的抽象概念，然后用类来表示这些概念并定义其关系。例如，JUnit 是一个小型框架，也是框架的“Hello, world”，其中定义了 Test、TestCase 和 TestSuite 这几个类及其关系。框架通常比单个类的颗粒度要大。你可以通过在某处构建子类来与框架建立联系。这些子类信奉“别给我们打电话，我们会给你打电话的。”</p><p>还有一个中间层次。这是我觉得设计模式所处的位置。设计模式比框架更小且更抽象。它们实际上是对一组类的关系及其互动方式的描述。当你从类转向模式，并最终到达框架的过程中，复用程度会不断增加。</p><p>中间层次的优点在于模式提供的复用方式要比框架的风险小。创建框架是一项投入重大且风险很高的工作，模式则能让你独立于具体代码来复用设计思想和理念。</p><h1 id="拓展性"><a href="#拓展性" class="headerlink" title="拓展性"></a>拓展性</h1><p>首先，在完成了第一版的程序后，我们就应该做好了从头开始优化重写代码的准备，因为现在你已经能在很多方面更好的理解问题了，同时在专业水平上也有所提高，所以之前的代码现在看上去可能会显得很糟糕。</p><p>其次，可能是在你掌控之外的某些事情发生了变化，这也是导致许多开发团队转变最初想法的原因。比如，每位在网络应用中使用 Flash 的开发者都必须重新开发或移植代码，因为不断地有浏览器停止对 Flash 格式地支持。</p><p>最后，可能是需求的改变，之前你的客户对当前版本的程序感到满意，但是现在希望对程序进行 11 个“小小”的改动，使其可完成原始计划阶段中完全没有提到的功能，新增或改变功能。</p><h1 id="正确使用设计模式"><a href="#正确使用设计模式" class="headerlink" title="正确使用设计模式"></a>正确使用设计模式</h1><p>要想正确的使用设计模式，要遵循如下规则：</p><ul><li>需求驱动</li><li>分析成功的模式应用项目</li><li>充分了解所使用的开发平台</li><li>在编程中领悟模式</li><li>避免设计过度</li></ul><div class="note note-success">            <h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>设计模式要活学活用，不要生搬硬套。学习设计模式，死记硬背是没用的，还要从实践中理解</p>          </div>]]></content>
    
    
    <categories>
      
      <category>开发经验</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化大屏的应用及设计原则</title>
    <link href="/2022/04/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E7%9A%84%E5%BA%94%E7%94%A8%E5%8F%8A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <url>/2022/04/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F%E7%9A%84%E5%BA%94%E7%94%A8%E5%8F%8A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<p>数据大屏就是一种非常有效的数据可视化工具，它可以将业务的<strong>关键指标</strong>以可视化的方式展示到一块或多块LED大屏上，不仅可以让业务人员快速、直接地从繁杂的业务数据中找到<strong>重要数据</strong>，还可以对决策人员起到辅助作用。</p><span id="more"></span><h1 id="1-数据可视化大屏"><a href="#1-数据可视化大屏" class="headerlink" title="1.数据可视化大屏"></a>1.数据可视化大屏</h1><p><strong>数据可视化是借助于图形化手段，清晰有效地传达与沟通信息。</strong>简而言之就是把枯燥无味的数据，通过图形化设计表现，达到一种更加精准和高效的数据分析和表达。</p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol><li>数据的呈现效果更加直观，便于用户查看</li><li>让用户挖掘到数据中的隐藏价值</li></ol><p><strong>数据可视化大屏</strong>是将一些业务的<strong>关键指标</strong>通过<strong>数据可视化</strong>的方式展示到一块或多块LED大屏上，以大屏为主要展示<strong>载体</strong>的数据可视化设计。也就是通过整个超大尺寸的屏幕来展示关键数据内容。大屏易在观感上<strong>给人留下震撼印象</strong>，便于营造某些<strong>独特氛围</strong>、<strong>打造仪式感</strong>。利用其面积大、可展示信息多的特点，通过关键信息大屏共享的方式可方便团队讨论和决策，所以大屏也常用来做<strong>数据分析监测</strong>使用。</p><h1 id="2-应用"><a href="#2-应用" class="headerlink" title="2. 应用"></a>2. 应用</h1><p>随着大数据的发展，可视化大屏在各行各业得到越来越广泛的应用。可视化大屏不再只是电影里奇幻的画面，而是被实实在在地应用在政府、商业、金融、制造等各个行业的业务场景中，切切实实地实现着大数据的价值。</p><p>比如，数据大屏作为一种有效传递信息的手段，正在城市智能运营中心、应急指挥中心、公安监控中心、电力调度中心、金融交易大厅等部门和机构中承担起重要的角色，</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>日常监测</li><li>分析研判</li><li>应急指挥</li><li>展示汇报等</li></ul><p>在提高科学管理工作等方面发挥了重要的作用，比如</p><ol><li>智慧应急</li></ol><p>应急指挥大厅通过“大应急”数据中台，建立信息互联、互通机制，对大数据信息进行分析与应用，支撑多部门异地会商、业务协同、联动指挥，从而实现自应急响应启动、到结束、再到灾后重建整个过程的业务协同支持。</p><ol start="2"><li>生态环境</li></ol><p>通过建立生态环境数据智能平台，建立大数据全景数据库，围绕数据采集整合加工、数据交互与共享、数据挖掘与应用、安全与运维服务四大体系，结合人工智能新一代信息技术，沉淀生态环境数据资产，支撑生态环境统筹规划、发展及防治等工作。</p><ol start="3"><li>公共安全</li></ol><p>凭借丰富的大数据和人工智能技术实践，向海外国家和政府提供多域融合协同智慧系统解决方案、网络安全解决方案、音视频治安防控解决方案、社会舆论管理解决方案、国家大数据中心解决方案等，帮助海外国家实现国家治理现代化和智慧化。大屏展示端可建立数据源专题、目标管控、重点人员、网络舆情、情报服务等模块并且提供7*24小时的数据更新，同时该系统能够自动从海量数据中快速识别出有用线索，通过一系列专业软件对情报线索进行分析、整编、研判，输出战略、战役、战术级情报产品，为公共安全相关部门提供强大的事前预警、事中辅助以及事后追溯能力。</p><h1 id="3-大屏数据可视化设计的原则"><a href="#3-大屏数据可视化设计的原则" class="headerlink" title="3. 大屏数据可视化设计的原则"></a>3. 大屏数据可视化设计的原则</h1><p>数据大屏不只是效果酷炫，数据大屏主旨在于借助于<strong>图形化</strong>手段，<strong>清晰有效</strong>地传达与沟通信息。那么，“清晰有效”才是数据大屏的<strong>重点</strong>。</p><p>在大屏展示中有多种资源类型及数据展示。需要通过构图突出重点，在主要信息和次要信息的布局和所占面积上进行调整，明确层级关系和流向，使观者获取信息时也能获得视觉平衡感。</p><h2 id="企业开发大屏流程"><a href="#企业开发大屏流程" class="headerlink" title="企业开发大屏流程"></a>企业开发大屏流程</h2><ol><li><strong>需求沟通</strong></li><li><strong>大屏UI设计</strong></li><li><strong>大数据开发</strong></li><li><strong>大屏前端开发</strong></li></ol><p>数据大屏设计的原则总的来说遵循以下规则</p><div class="note note-success">            <p>总览优先，细节辅助。</p>          </div><h2 id="是要服务于业务，让业务指标和数据合理的展现"><a href="#是要服务于业务，让业务指标和数据合理的展现" class="headerlink" title="是要服务于业务，让业务指标和数据合理的展现"></a>是要服务于业务，让业务指标和数据合理的展现</h2><p>由于往往展现的是一个企业全局的业务，一般分为主要指标和次要指标两个层次，主要指标反映核心业务，次要指标用于进一步阐述分析，所以在制作时给予不一样的侧重。</p><h2 id="合理的布局能让业务内容更富有层次，合理的配色能让观看者更舒适"><a href="#合理的布局能让业务内容更富有层次，合理的配色能让观看者更舒适" class="headerlink" title="合理的布局能让业务内容更富有层次，合理的配色能让观看者更舒适"></a>合理的布局能让业务内容更富有层次，合理的配色能让观看者更舒适</h2><p>配色的学问主要是背景色，背景色又分为整体背景以及单个元素的背景，无论是哪一个，都遵从两点基本原则：<strong>深色调</strong>和<strong>一致性</strong>。深色调是为了避免视觉刺激。</p><h2 id="在大屏展现上，细节也会极大的影响整体效果"><a href="#在大屏展现上，细节也会极大的影响整体效果" class="headerlink" title="在大屏展现上，细节也会极大的影响整体效果"></a>在大屏展现上，细节也会极大的影响整体效果</h2><p>通过适当给元素、标题、数字等添加一些诸如边框、图画等在内的点缀效果，能帮助提升整体美观度。</p><h2 id="动效的增加能让大屏看上去是活的，增加观感体验"><a href="#动效的增加能让大屏看上去是活的，增加观感体验" class="headerlink" title="动效的增加能让大屏看上去是活的，增加观感体验"></a>动效的增加能让大屏看上去是活的，增加观感体验</h2><p>但过分的动效极其容易喧宾夺主，反而丧失了业务展现价值，我们需要把握一个度，既要平衡酷炫效果，又要突出内容。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>数据可视化</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>数据可视化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-代理服务器跨域</title>
    <link href="/2022/04/13/Vue-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B7%A8%E5%9F%9F/"/>
    <url>/2022/04/13/Vue-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>在Vue的前端开发中，跨域是一个比较难以理解的问题，尽管配置很简单，但是遇到些问题是真不好解决，还不能调试。<br>在查阅众多帖子后，还是一知半解，都说的比较模糊，这里我把我的想法写一下。</p><span id="more"></span><h1 id="网络中的解决方案"><a href="#网络中的解决方案" class="headerlink" title="网络中的解决方案"></a>网络中的解决方案</h1><p>网络中，通常是在vue.config.js文件中，做如下操作，</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8081</span>, <span class="hljs-comment">// 端口号</span><br>    <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// https:&#123;type:Boolean&#125;</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//配置自动启动浏览器</span><br>    <span class="hljs-comment">// proxy: &#x27;http://localhost:4000&#x27; // 配置跨域处理,只有一个代理</span><br>    <span class="hljs-comment">// 配置多个代理</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>        <span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>            <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://localhost:8088/&quot;</span>,<span class="hljs-comment">// 要访问的接口域名</span><br>            <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 是否启用websockets</span><br>            <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span><br>            <span class="hljs-attr">pathRewrite</span>: &#123;<br>                <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//这里理解成用&#x27;/api&#x27;代替target里面的地址,比如我要调用&#x27;http://localhost:8088/user/list&#x27;，直接写&#x27;/api/user/list&#x27;即可</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的代理说的就比较暧昧，或者说不太明确</p><h1 id="代理的逻辑"><a href="#代理的逻辑" class="headerlink" title="代理的逻辑"></a>代理的逻辑</h1><p>在我一顿思索后，把大概逻辑摸索了一下<br>假如你后台服务器的地址是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.abc.com<span class="hljs-regexp">/path/u</span>ser/getInfo<br></code></pre></td></tr></table></figure><p>如果我们想在使用axios请求操作的时候是</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">axios.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;/api/user/getInfo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>所以在配置文件里面应该这么写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>    <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://www.abc.com/path&quot;</span>,<br>    <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <br>    <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当使用axios请求的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/user/getInfo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里的接口替换规则可能是这样的<br>首先请求本地的接口</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8088</span><span class="hljs-regexp">/api/u</span>ser/getInfo<br></code></pre></td></tr></table></figure><p>接下来替换域名</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.abc.com<span class="hljs-regexp">/path/</span>api<span class="hljs-regexp">/user/g</span>etInfo<br></code></pre></td></tr></table></figure><p>然后匹配路径&#x2F;api，匹配到就替换为空，所以结果为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.abc.com<span class="hljs-regexp">/path/u</span>ser/getInfo<br></code></pre></td></tr></table></figure><p>跨域配置的逻辑更像是在另一个服务器的接口地址中从中间插入了一个flag，flag左边的是代理服务器（可以是带路径的url），flag的右边是我们请求的url</p><h1 id="代理转发的bug"><a href="#代理转发的bug" class="headerlink" title="代理转发的bug"></a>代理转发的bug</h1><ul><li>每次修改代理配置的时候只能重启</li><li>浏览器有缓存</li><li>长时间修改同一个配置会导致缓存存在，造成代理不成功的假象，实际上已经成功了</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
      <category>devserver</category>
      
      <category>跨域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>跨域</tag>
      
      <tag>devserver</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js前端开发-响应式画廊Gallery插件-Justified-Gallery</title>
    <link href="/2022/04/07/js%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%94%BB%E5%BB%8AGallery%E6%8F%92%E4%BB%B6-Justified-Gallery/"/>
    <url>/2022/04/07/js%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%94%BB%E5%BB%8AGallery%E6%8F%92%E4%BB%B6-Justified-Gallery/</url>
    
    <content type="html"><![CDATA[<p>这个jQuery插件允许你在一个合理的空间内创建响应式、无限滚动、高品质的画廊，并填充满所有的空间。</p><p>对于制作网站的人来说，一个常见的问题就是使用各种尺寸和宽高比的图像来创建一个优雅的画廊，Flickr 和 Google+对于这方面的处理非常的棒，这个插件的目的就是使用一种新的快速的算法来帮你解决这个问题。</p><span id="more"></span><p><img src="http://static.open-open.com/lib/uploadImg/20160111/20160111195024_837.jpg"></p><h1 id="插件主要特性"><a href="#插件主要特性" class="headerlink" title="插件主要特性"></a>插件主要特性</h1><ul><li>无需在意像素：使用一种先进的算法无需剪裁图像进行自动调整</li><li>无限滚动：已经为图片无限加载做好准备，只需添加图片并告诉Justified Gallery</li><li>高质量：支持任何设备和屏幕尺寸</li><li>动态画廊：过滤、排序、随机、添加、删除图像，你可以对画廊进行任何操作</li><li>灯箱效果一体化：你可以使用现有的灯箱效果，如Colorbox 或 Swipebox</li><li>高度可定制化：提供很多选择供你打造你想要的画廊效果</li><li>Captions：可以给你的图片添加说明文字</li><li>响应式：可根据屏幕尺寸自动调整大小</li><li>快速设计：带有智能的缩略图加载，生而很快</li><li>错误处理：管理服务器的错误，自动跳过不可用图像，并在控制台给出提示<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1>Justified Gallery接受固定格式的画廊：每一个a链接中包含一个缩略图，而链接指向原始图片：<figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mygallery&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;path/to/myimage1_original.jpg&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Title 1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path/to/myimage1_thumbnail.jpg&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;path/to/myimage2_original.jpg&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Title 2&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path/to/myimage2_thumbnail.jpg&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- other images... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>插件需要jQuery支持，之后还需引入插件的文件：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/justifiedGallery.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.justifiedGallery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>现在你只需调用即可，它会使用默认参数调整你的图像：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#mygallery&quot;</span>).<span class="hljs-title function_">justifiedGallery</span>();<br></code></pre></td></tr></table></figure>项目 Github 地址： <a href="https://github.com/miromannino/Justified-Gallery">https://github.com/miromannino/Justified-Gallery</a><br>更多使用请参考其 <a href="http://miromannino.github.io/Justified-Gallery/options-and-events/">使用文档</a> 。<br>源码国内源：<a href="https://gitee.com/Guang_Long_Yu/justified-gallery">https://gitee.com/Guang_Long_Yu/justified-gallery</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>插件</category>
      
      <category>图片展示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>经验</tag>
      
      <tag>图片展示</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js前端开发-判断是否是手机端</title>
    <link href="/2022/04/07/js%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E6%89%8B%E6%9C%BA%E7%AB%AF/"/>
    <url>/2022/04/07/js%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E6%89%8B%E6%9C%BA%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>每个客户端都带有自身的UA标识，通过JavaScript，可以获取客户端标识，我们可以获取浏览器的userAgent，用正则来判断手机是ios（苹果）还是Android（安卓）客户端。</p><span id="more"></span><h1 id="常用跳转代码"><a href="#常用跳转代码" class="headerlink" title="常用跳转代码"></a>常用跳转代码</h1><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br> <span class="hljs-comment">// borwserRedirect</span><br> (<span class="hljs-keyword">function</span> <span class="hljs-title function_">browserRedirect</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> sUserAgent = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>();<br>  <span class="hljs-keyword">var</span> bIsIpad = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ipad/i</span>) == <span class="hljs-string">&#x27;ipad&#x27;</span>;<br>  <span class="hljs-keyword">var</span> bIsIphone = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/iphone os/i</span>) == <span class="hljs-string">&#x27;iphone os&#x27;</span>;<br>  <span class="hljs-keyword">var</span> bIsMidp = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/midp/i</span>) == <span class="hljs-string">&#x27;midp&#x27;</span>;<br>  <span class="hljs-keyword">var</span> bIsUc7 = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/rv:1.2.3.4/i</span>) == <span class="hljs-string">&#x27;rv:1.2.3.4&#x27;</span>;<br>  <span class="hljs-keyword">var</span> bIsUc = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ucweb/i</span>) == <span class="hljs-string">&#x27;web&#x27;</span>;<br>  <span class="hljs-keyword">var</span> bIsCE = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/windows ce/i</span>) == <span class="hljs-string">&#x27;windows ce&#x27;</span>;<br>  <span class="hljs-keyword">var</span> bIsWM = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/windows mobile/i</span>) == <span class="hljs-string">&#x27;windows mobile&#x27;</span>;<br>  <span class="hljs-keyword">var</span> bIsAndroid = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/android/i</span>) == <span class="hljs-string">&#x27;android&#x27;</span>;<br>  <span class="hljs-keyword">if</span>(bIsIpad || bIsIphone || bIsMidp || bIsUc7 || bIsUc || bIsCE || bIsWM || bIsAndroid )&#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;跳转的移动端网址&#x27;</span>;<br>  &#125;<br> &#125;)();<br> &lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="language-javascript"><span class="language-xml">&lt;!-- </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//平台、设备和操作系统 </span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> system = &#123; </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">win</span>: <span class="hljs-literal">false</span>, </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">mac</span>: <span class="hljs-literal">false</span>, </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">xll</span>: <span class="hljs-literal">false</span>, </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">ipad</span>:<span class="hljs-literal">false</span> </span></span><br><span class="language-javascript"><span class="language-xml">  &#125;; </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//检测平台 </span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> p = navigator.<span class="hljs-property">platform</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  system.<span class="hljs-property">win</span> = p.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Win&quot;</span>) == <span class="hljs-number">0</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  system.<span class="hljs-property">mac</span> = p.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Mac&quot;</span>) == <span class="hljs-number">0</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  system.<span class="hljs-property">x11</span> = (p == <span class="hljs-string">&quot;X11&quot;</span>) || (p.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Linux&quot;</span>) == <span class="hljs-number">0</span>); </span></span><br><span class="language-javascript"><span class="language-xml">  system.<span class="hljs-property">ipad</span> = (navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/iPad/i</span>) != <span class="hljs-literal">null</span>)?<span class="hljs-attr">true</span>:<span class="hljs-literal">false</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//跳转语句，如果是手机访问就自动跳转到wap.baidu.com页面 </span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (system.<span class="hljs-property">win</span> || system.<span class="hljs-property">mac</span> || system.<span class="hljs-property">xll</span>||system.<span class="hljs-property">ipad</span>) &#123; </span></span><br><span class="language-javascript"><span class="language-xml">  &#125; <span class="hljs-keyword">else</span> &#123; </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://www.jdpatro.com/3g/&quot;</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  &#125; </span></span><br><span class="language-javascript"><span class="language-xml">--&gt; </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="腾讯跳转"><a href="#腾讯跳转" class="headerlink" title="腾讯跳转"></a>腾讯跳转</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;pref=padindex&#x27;</span>) != -<span class="hljs-number">1</span>)&#123;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/AppleWebKit.*Mobile/i</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>) || (<span class="hljs-regexp">/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>)))&#123; <br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;?mobile&quot;</span>)&lt;<span class="hljs-number">0</span>)&#123;<br>  <span class="hljs-keyword">try</span>&#123;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/Android|Windows Phone|webOS|iPhone|iPod|BlackBerry/i</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>))&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://xw.qq.com/index.htm&quot;</span>;<br>   &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/iPad/i</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>))&#123;<br>    <span class="hljs-comment">//window.location.href=&quot;http://www.qq.com/pad/&quot;</span><br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://xw.qq.com/simple/s/index/&quot;</span><br>   &#125;<br>  &#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;<br> &#125;<br> &#125;<br>&#125;<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="language-javascript"><span class="language-xml">&lt;!-- </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//平台、设备和操作系统 </span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> system = &#123; </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">win</span>: <span class="hljs-literal">false</span>, </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">mac</span>: <span class="hljs-literal">false</span>, </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">xll</span>: <span class="hljs-literal">false</span>, </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">ipad</span>:<span class="hljs-literal">false</span> </span></span><br><span class="language-javascript"><span class="language-xml">  &#125;; </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//检测平台 </span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> p = navigator.<span class="hljs-property">platform</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  system.<span class="hljs-property">win</span> = p.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Win&quot;</span>) == <span class="hljs-number">0</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  system.<span class="hljs-property">mac</span> = p.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Mac&quot;</span>) == <span class="hljs-number">0</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  system.<span class="hljs-property">x11</span> = (p == <span class="hljs-string">&quot;X11&quot;</span>) || (p.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Linux&quot;</span>) == <span class="hljs-number">0</span>); </span></span><br><span class="language-javascript"><span class="language-xml">  system.<span class="hljs-property">ipad</span> = (navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/iPad/i</span>) != <span class="hljs-literal">null</span>)?<span class="hljs-attr">true</span>:<span class="hljs-literal">false</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//跳转语句，如果是手机访问就自动跳转到wap.baidu.com页面 </span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (system.<span class="hljs-property">win</span> || system.<span class="hljs-property">mac</span> || system.<span class="hljs-property">xll</span>||system.<span class="hljs-property">ipad</span>) &#123; </span></span><br><span class="language-javascript"><span class="language-xml">  &#125; <span class="hljs-keyword">else</span> &#123; </span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://www.jdpatro.com/3g/&quot;</span>; </span></span><br><span class="language-javascript"><span class="language-xml">  &#125; </span></span><br><span class="language-javascript"><span class="language-xml">--&gt; </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="JS-判断浏览器客户端类型-ipad-iphone-android"><a href="#JS-判断浏览器客户端类型-ipad-iphone-android" class="headerlink" title="JS 判断浏览器客户端类型(ipad,iphone,android)"></a>JS 判断浏览器客户端类型(ipad,iphone,android)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt; <br> <span class="hljs-keyword">var</span> bForcepc = <span class="hljs-title function_">fGetQuery</span>(<span class="hljs-string">&quot;dv&quot;</span>) == <span class="hljs-string">&quot;pc&quot;</span>; <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fBrowserRedirect</span>(<span class="hljs-params"></span>)&#123; <br>  <span class="hljs-keyword">var</span> sUserAgent = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>(); <br>  <span class="hljs-keyword">var</span> bIsIpad = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ipad/i</span>) == <span class="hljs-string">&quot;ipad&quot;</span>; <br>  <span class="hljs-keyword">var</span> bIsIphoneOs = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/iphone os/i</span>) == <span class="hljs-string">&quot;iphone os&quot;</span>; <br>  <span class="hljs-keyword">var</span> bIsMidp = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/midp/i</span>) == <span class="hljs-string">&quot;midp&quot;</span>; <br>  <span class="hljs-keyword">var</span> bIsUc7 = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/rv:1.2.3.4/i</span>) == <span class="hljs-string">&quot;rv:1.2.3.4&quot;</span>; <br>  <span class="hljs-keyword">var</span> bIsUc = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ucweb/i</span>) == <span class="hljs-string">&quot;ucweb&quot;</span>; <br>  <span class="hljs-keyword">var</span> bIsAndroid = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/android/i</span>) == <span class="hljs-string">&quot;android&quot;</span>; <br>  <span class="hljs-keyword">var</span> bIsCE = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/windows ce/i</span>) == <span class="hljs-string">&quot;windows ce&quot;</span>; <br>  <span class="hljs-keyword">var</span> bIsWM = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/windows mobile/i</span>) == <span class="hljs-string">&quot;windows mobile&quot;</span>; <br>  <span class="hljs-keyword">if</span>(bIsIpad)&#123; <br>   <span class="hljs-keyword">var</span> sUrl = location.<span class="hljs-property">href</span>;  <br>   <span class="hljs-keyword">if</span>(!bForcepc)&#123; <br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://ipad.mail.163.com/&quot;</span>; <br>   &#125; <br>  &#125; <br>  <span class="hljs-keyword">if</span>(bIsIphoneOs || bIsAndroid)&#123; <br>   <span class="hljs-keyword">var</span> sUrl = location.<span class="hljs-property">href</span>;  <br>   <span class="hljs-keyword">if</span>(!bForcepc)&#123; <br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://smart.mail.163.com/&quot;</span>; <br>   &#125; <br>  &#125; <br>  <span class="hljs-keyword">if</span>(bIsMidp||bIsUc7||bIsUc||bIsCE||bIsWM)&#123; <br>   <span class="hljs-keyword">var</span> sUrl = location.<span class="hljs-property">href</span>;  <br>   <span class="hljs-keyword">if</span>(!bForcepc)&#123; <br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://m.mail.163.com/&quot;</span>; <br>   &#125; <br>  &#125; <br> &#125; <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fGetQuery</span>(<span class="hljs-params">name</span>)&#123;<span class="hljs-comment">//获取参数值 </span><br>  <span class="hljs-keyword">var</span> sUrl = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>); <br>  <span class="hljs-keyword">var</span> r = sUrl.<span class="hljs-title function_">match</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(^|&amp;)&quot;</span> + name + <span class="hljs-string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>)); <br>  <span class="hljs-keyword">return</span> (r == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : (r[<span class="hljs-number">2</span>])); <br> &#125; <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fShowVerBlock</span>(<span class="hljs-params"></span>)&#123;  <br>  <span class="hljs-keyword">if</span>(bForcepc)&#123; <br>   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByIdx_x</span>(<span class="hljs-string">&quot;dv_block&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>; <br>  &#125; <br>  <span class="hljs-keyword">else</span>&#123; <br>   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByIdx_x</span>(<span class="hljs-string">&quot;ad_block&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>; <br>  &#125; <br> &#125; <br> <span class="hljs-title function_">fBrowserRedirect</span>(); <br> &lt;/script&gt; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>移动端适配</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>经验</tag>
      
      <tag>移动端适配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scoop的安装及基本使用</title>
    <link href="/2022/04/05/scoop%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/05/scoop%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>windows下的安装源搜索工具，有点类似centos下的yum和Ubuntu下的apt。用这个拉下来安装的软件没有广告。</p><span id="more"></span><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220405231312.png" alt="scoop"></p><h1 id="安装条件"><a href="#安装条件" class="headerlink" title="安装条件"></a>安装条件</h1><ul><li>Windows 7 以上</li><li>64位系统</li><li>powershell 3 以上</li></ul><h2 id="查看powershell版本"><a href="#查看powershell版本" class="headerlink" title="查看powershell版本"></a>查看powershell版本</h2><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$PSVersionTable</span>.PSVersion<br></code></pre></td></tr></table></figure><h2 id="更改脚本执行策略（必须）"><a href="#更改脚本执行策略（必须）" class="headerlink" title="更改脚本执行策略（必须）"></a>更改脚本执行策略（必须）</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-executionpolicy</span> remotesigned <span class="hljs-literal">-s</span> cu<br></code></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:SCOOP</span>=<span class="hljs-string">&#x27;D:\Scoop&#x27;</span><br><br>[<span class="hljs-type">Environment</span>]::SetEnvironmentVariable(<span class="hljs-string">&#x27;SCOOP&#x27;</span>,<span class="hljs-variable">$env:SCOOP</span>,<span class="hljs-string">&#x27;User&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里设置环境变量第三个参数User表示用户级别，Machine表示系统级别。Machine没权限的话，可以手动去环境变量设置。</p><h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">iex</span> (<span class="hljs-built_in">new-object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://get.scoop.sh&#x27;</span>)<br><br><span class="hljs-comment">## 或者</span><br><br><span class="hljs-built_in">iwr</span><span class="hljs-literal">-useb</span> get.scoop.sh|<span class="hljs-built_in">iex</span><br></code></pre></td></tr></table></figure><p>事实上，上面两个目前都是不可用的。</p><p>这里需要点小技巧才能安装，你得有魔法，没有的话自己解决，改hosts没有生效</p><h1 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop uninstall scoop<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：这个卸载，会删除你配置的scoop下面的所有软件，非常危险。</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>这里以安装curl为例</p><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>先换源，换个新的较多的源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add extras<br></code></pre></td></tr></table></figure><p>运行成功以后会有下面的提示</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Checking repo... ok<br>The extras bucket was added successfully.<br></code></pre></td></tr></table></figure><h2 id="安装curl"><a href="#安装curl" class="headerlink" title="安装curl"></a>安装curl</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 安装软件</span><br>scoop install <span class="hljs-literal">-g</span> [<span class="hljs-type">app</span>的名称]<br><span class="hljs-comment">## 我这里-g 需要admin权限，取消-g可安装</span><br>scoop install <span class="hljs-built_in">curl</span><br></code></pre></td></tr></table></figure><h2 id="使用curl访问百度"><a href="#使用curl访问百度" class="headerlink" title="使用curl访问百度"></a>使用curl访问百度</h2><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220405193313.png"></p><h1 id="检测潜在的隐患"><a href="#检测潜在的隐患" class="headerlink" title="检测潜在的隐患"></a>检测潜在的隐患</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop checkup<br></code></pre></td></tr></table></figure><h1 id="初次安装建议安装"><a href="#初次安装建议安装" class="headerlink" title="初次安装建议安装"></a>初次安装建议安装</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 但 scoop 进行全局安装时需要使用到 sudo 命令</span><br>scoop install sudo<br><br><span class="hljs-comment"># scoop下载程序时支持使用 aria2 来加速下载</span><br>scoop install aria2<br></code></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop help <span class="hljs-comment">#查看帮助</span><br>scoop help &lt;某个命令&gt; <span class="hljs-comment"># 具体查看某个命令的帮助</span><br><br>scoop install [<span class="hljs-type">appname</span>]   <span class="hljs-comment"># 安装 APP</span><br>scoop uinstall [<span class="hljs-type">appname</span>]  <span class="hljs-comment"># 卸载 APP</span><br><br>scoop list  <span class="hljs-comment"># 列出已安装的 APP</span><br>scoop search <span class="hljs-comment"># 搜索 APP</span><br>scoop status <span class="hljs-comment"># 检查哪些软件有更新</span><br><br>scoop update <span class="hljs-comment"># 更新 Scoop 自身</span><br>scoop update appName1 appName2 <span class="hljs-comment"># 更新某些app</span><br>scoop update *  <span class="hljs-comment"># 更新所有 app （前提是需要在apps目录下操作）</span><br><br>scoop bucket known <span class="hljs-comment">#通过此命令列出已知所有 bucket（软件源）</span><br>scoop bucket add bucketName <span class="hljs-comment">#添加某个 bucket</span><br><br>scoop cache <span class="hljs-built_in">rm</span> [<span class="hljs-type">appname</span>] <span class="hljs-comment"># 移除某个app的缓存</span><br></code></pre></td></tr></table></figure><h1 id="安装卸载软件"><a href="#安装卸载软件" class="headerlink" title="安装卸载软件"></a>安装卸载软件</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 安装之前，通过 search 搜索 APP, 确定软件名称</span><br>scoop search  xxx<br><br><span class="hljs-comment"># 安装 APP</span><br>scoop install AppName<br><br><span class="hljs-comment"># 安装特定版本的 APP；语法 AppName@[version]，示例</span><br>scoop install git@<span class="hljs-number">2.23</span>.<span class="hljs-number">0</span>.windows.<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 卸载 APP </span><br>scoop uninstall <span class="hljs-comment">#卸载 APP</span><br></code></pre></td></tr></table></figure><h1 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop update <span class="hljs-comment"># 更新 Scoop 自身</span><br><br>scoop update appName1 appName2 <span class="hljs-comment"># 更新某些app</span><br><br><span class="hljs-comment"># 更新所有 app （可能需要在apps目录下操作）</span><br>scoop update *<br><br><span class="hljs-comment"># 禁止某程序更新</span><br>scoop hold &lt;app&gt;<br><span class="hljs-comment"># 允许某程序更新</span><br>scoop unhold &lt;app&gt;<br></code></pre></td></tr></table></figure><h1 id="清除缓存与旧版本"><a href="#清除缓存与旧版本" class="headerlink" title="清除缓存与旧版本"></a>清除缓存与旧版本</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看所有以下载的缓存信息</span><br>scoop cache show<br><br><span class="hljs-comment"># 清除指定程序的下载缓存</span><br>scoop cache <span class="hljs-built_in">rm</span> &lt;app&gt;<br><br><span class="hljs-comment"># 清除所有缓存</span><br>scoop cache <span class="hljs-built_in">rm</span> *<br><br><span class="hljs-comment"># 删除某软件的旧版本</span><br>scoop cleanup &lt;app&gt;<br><br><span class="hljs-comment"># 删除全局安装的某软件的旧版本</span><br>scoop cleanup &lt;app&gt; <span class="hljs-literal">-g</span><br><br><span class="hljs-comment"># 删除过期的下载缓存</span><br>scoop cleanup &lt;app&gt; <span class="hljs-literal">-k</span><br></code></pre></td></tr></table></figure><h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 可用操作</span><br>scoop alias add|list|<span class="hljs-built_in">rm</span> [&lt;<span class="hljs-type">args</span>&gt;]<br><br><span class="hljs-comment">## 添加别名，格式：</span><br>scoop alias add &lt;name&gt; &lt;command&gt; &lt;description&gt;<br><br><span class="hljs-comment"># 示例：（注意：必须在 Powershell中运行）</span><br>scoop alias add st <span class="hljs-string">&#x27;scoop status&#x27;</span> <span class="hljs-string">&#x27;检查更新&#x27;</span><br><span class="hljs-comment"># 检查已添加的别名</span><br>scoop alias list <span class="hljs-literal">-v</span><br><br>Name Command      Summary<br><span class="hljs-literal">----</span> <span class="hljs-literal">-------</span>      <span class="hljs-literal">-------</span><br>st   scoop status 检查更新<br><br><span class="hljs-comment"># 测试已添加的别名 st</span><br>scoop st<br><br><br><span class="hljs-comment"># 另一个示例：</span><br>scoop alias add <span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;scoop uninstall $args[0]&#x27;</span> <span class="hljs-string">&#x27;卸载某 app&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="在同一程序的不同版本之间切换"><a href="#在同一程序的不同版本之间切换" class="headerlink" title="在同一程序的不同版本之间切换"></a>在同一程序的不同版本之间切换</h1><p>使用命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop reset [<span class="hljs-type">app</span>]<span class="hljs-selector-tag">@</span>[<span class="hljs-type">version</span>]<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop reset idea<span class="hljs-literal">-ultimate-eap</span>@<span class="hljs-number">201.6668</span>.<span class="hljs-number">13</span><br><br>scoop reset idea<span class="hljs-literal">-ultimate-eap</span>@<span class="hljs-number">201.6073</span>.<span class="hljs-number">9</span><br><br><span class="hljs-comment"># 切换到最新版本</span><br>scoop reset idea<span class="hljs-literal">-ultimate-eap</span><br></code></pre></td></tr></table></figure><p>对应版本的程序需要已经安装于本地系统中；所以在你清除某个软件的旧版本时考虑一下自己是否还会再次使用到此旧版本。</p><p>另外 idea-ultimate-eap 切换过程可能需要更长时间。</p><h1 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 显示某个app的信息</span><br>scoop info &lt;app&gt;<br><br><span class="hljs-comment"># 在浏览器中打开某app的主页</span><br>scoop home &lt;app&gt;<br><br><span class="hljs-comment"># 比如</span><br>scoop home git<br></code></pre></td></tr></table></figure><h1 id="添加软件源-Bucket"><a href="#添加软件源-Bucket" class="headerlink" title="添加软件源 Bucket"></a>添加软件源 Bucket</h1><p>Scoop 可安装的软件信息存储在 Bucket（翻译为：桶）中，也可以称其为软件源。Scoop 默认的 Bucket 为 main ；官方维护的另一个 Bucket 为 extras，我们需要手动添加。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># bucket的用法</span><br>scoop bucket add|list|known|<span class="hljs-built_in">rm</span> [&lt;<span class="hljs-type">args</span>&gt;]<br>```powerShell<br>添加 extras :<br>```powershell<br>scoop bucket add extras<br></code></pre></td></tr></table></figure><p>我们也可以添加第三方 bucket ，示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add dorado https://github.com/h404bi/dorado<br></code></pre></td></tr></table></figure><p>并且明确指定安装此 bucket （软件源）中的的程序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop install dorado/&lt;app_name&gt;<br><span class="hljs-comment"># 下面是dorado中特有的软件，测试其是否添加成功</span><br>scoop search trash<br></code></pre></td></tr></table></figure><h1 id="推荐的-Bucket（软件源）："><a href="#推荐的-Bucket（软件源）：" class="headerlink" title="推荐的 Bucket（软件源）："></a>推荐的 Bucket（软件源）：</h1><ul><li><p>extras：Scoop 官方维护的一个仓库，涵盖了大部分因为种种原因不能被收录进主仓库的常用软件（在我看来是必须要添加的）。地址:<a href="https://github.com/lukesampson/scoop-extras/tree/master/bucket">lukesampson&#x2F;scoop-extras</a></p></li><li><p>nirsoft：是一个 NirSoft 开发的小工具的安装合集。NirSoft 制作了大量的小工具，包括系统工具、网络工具、密码恢复等等，孜孜不倦、持续更新。</p><ul><li>Bucket 地址：<a href="https://github.com/kodybrown/scoop-nirsoft">kodybrown&#x2F;scoop-nirsoft</a></li><li>NirSoft 官网地址：<a href="http://www.nirsoft.net/">NirSoft</a></li></ul></li><li><p>dorado（添加了一些国内的app，比如 qqplayer ️）h404bi&#x2F;dorado</p></li><li><p>ash258：Ash258&#x2F;scoop-Ash258</p></li><li><p>java：添加后可以通过它安装各种 jdk 、 jre</p></li><li><p>nerd-fonts ：包含各种字体</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 先添加bucket</span><br>scoop bucket add extras<br>scoop bucket add nirsoft<br>scoop bucket add dorado https://github.com/h404bi/dorado<br>scoop bucket add Ash258 <span class="hljs-string">&#x27;https://github.com/Ash258/Scoop-Ash258.git&#x27;</span><br>scoop bucket add nerd<span class="hljs-literal">-fonts</span><br><span class="hljs-comment"># 对于开发人员，可添加下面的两个</span><br>scoop bucket add java<br>scoop bucket add versions<br></code></pre></td></tr></table></figure><h2 id="官方给出的源"><a href="#官方给出的源" class="headerlink" title="官方给出的源"></a>官方给出的源</h2></li><li><p><a href="https://github.com/ScoopInstaller/Main">main</a> - Default bucket for the most common (mostly CLI) apps</p></li><li><p><a href="https://github.com/ScoopInstaller/Extras">extras</a> - Apps that don’t fit the main bucket’s criteria</p></li><li><p><a href="https://github.com/Calinou/scoop-games">games</a> - Open source&#x2F;freeware games and game-related tools</p></li><li><p><a href="https://github.com/matthewjberger/scoop-nerd-fonts">nerd-fonts</a> - Nerd Fonts</p></li><li><p><a href="https://github.com/kodybrown/scoop-nirsoft">nirsoft</a> - Almost all of the 250+ apps from Nirsoft</p></li><li><p><a href="https://github.com/ScoopInstaller/Java">java</a> - A collection of Java development kits (JDKs), Java runtime engines (JREs), Java’s virtual machine debugging tools and Java based runtime engines.</p></li><li><p><a href="https://github.com/TheRandomLabs/scoop-nonportable">nonportable</a> - Non-portable apps (may require UAC)</p></li><li><p><a href="https://github.com/ScoopInstaller/PHP">php</a> - Installers for most versions of PHP</p></li><li><p><a href="https://github.com/ScoopInstaller/Versions">versions</a> - Alternative versions of apps found in other buckets</p><h1 id="bucket-更新时遇到问题"><a href="#bucket-更新时遇到问题" class="headerlink" title="bucket 更新时遇到问题"></a>bucket 更新时遇到问题</h1><p>情况是这样：当我运行 scoop update 进行更新时提示： extras bucket 更新失败。于是我将其删除后再添加，提示成功，但是它却把 main<br>bucket (默认的 bucket) 给删除了。通过”scoop status”检查状态时出现 “These app<br>manifests have been removed”并且下面列出了已被移除的软件名单。 那么如何解决此问题？</p></li></ul><p>我们需要重新添加 main bucket ：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add main <span class="hljs-comment">#添加 main bucket</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>安装教程</category>
      
      <category>scoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装教程</tag>
      
      <tag>windows</tag>
      
      <tag>scoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+ts项目利用app.use特性全局注册组件</title>
    <link href="/2022/04/05/Vue-ts%E9%A1%B9%E7%9B%AE%E5%88%A9%E7%94%A8app-use%E7%89%B9%E6%80%A7%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/04/05/Vue-ts%E9%A1%B9%E7%9B%AE%E5%88%A9%E7%94%A8app-use%E7%89%B9%E6%80%A7%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>Vue的组件开发，为我们提供了代码重用提供了便捷。在开发中，很多页面会共用一部分或者全部代码，重复使用已写的代码将会大大的提高开发效率。</p><span id="more"></span><p>在学习vue+ts封装组件库过程中，封装了多个组件，为了方便使用，在项目中需要使用全局注册。<br>分享一种全局注册的方法，本节以vite创建的vue+ts项目的 <strong>chooseArea</strong>（省市区三级联动组件） 为例。</p><h1 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h1><p>建议按照下图的样子创建目录，以便于管理文件<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220405184715.png"></p><p>创建对应的文件<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220405185014.png"></p><p>其中，lib目录用来放需要用到的假数据</p><p>src放置组件源码</p><p>index.ts放组件注册的入口，用来导出组件</p><h1 id="编写index-ts导出组件"><a href="#编写index-ts导出组件" class="headerlink" title="编写index.ts导出组件"></a>编写index.ts导出组件</h1><p>下面贴出代码</p><figure class="highlight ts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">App</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> chooseArea <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./src/index.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">install</span>: <span class="hljs-function">(<span class="hljs-params">app: App</span>) =&gt;</span> &#123;<br>        app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;gly-choose-area&#x27;</span>, chooseArea)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>app.use传入的对象中，需要调用一个 <strong>install</strong> 的方法，并且传入当前的 <strong>Vue</strong> 实例，此时调用app.component方法，将组件注册到当前的Vue实例中。<br>这样就将组件导出成功了，当你做到这里，就意味着你可以在页面中这样引用该组件了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">gly-choose-area</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">gly-choose-area</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;ts&#x27;</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// @path 表示的是你存档组件文件的位置</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; chooseArea &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@path&#x27;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="导出所有的components"><a href="#导出所有的components" class="headerlink" title="导出所有的components"></a>导出所有的components</h1><p>在components目录创建一个 <strong>index.ts</strong> 文件，里面这么写</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">App</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> chooseIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chooseIcon&#x27;</span><br><span class="hljs-keyword">import</span> chooseArea <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./chooseArea&#x27;</span><br><br><span class="hljs-keyword">const</span> components = [<br>    chooseIcon,<br>    chooseArea<br>];<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">install</span>: <span class="hljs-function">(<span class="hljs-params">app: App</span>) =&gt;</span> &#123;<br>        components.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">component</span> =&gt;</span> &#123;<br>            app.<span class="hljs-title function_">use</span>(component);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要的思路就是创建一个 <strong>components</strong> 数组，将导入的组件都放到这个数组里面</p><p><strong>注意</strong>：在这个文件中，我们不需要导出组件，因为在 <strong>index.ts</strong> 中已经导出了，所以这里只需要导入即可。</p><p>然后在这个文件里面导出 <strong>app.use</strong> 所需要的对象，即对象里面写一个 <strong>install</strong> 方法，方法同上面的组件中的 <strong>index.ts</strong> 文件</p><p>然后使用 <strong>map</strong> 方法遍历数组，将每一个组件都注册到当前的Vue实例中</p><h1 id="在main-ts中导入组件"><a href="#在main-ts中导入组件" class="headerlink" title="在main.ts中导入组件"></a>在main.ts中导入组件</h1><p>这里主要是将 <strong>components</strong> 目录下的 <strong>index.ts</strong> 文件导入到main.ts中</p><p>然后 <strong>app</strong> 直接调用 <strong>use</strong> 方法，下面贴出关键代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> glyUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components&#x27;</span><br><span class="hljs-comment">// ... you code here</span><br>app.<span class="hljs-title function_">use</span>(glyUI)<br></code></pre></td></tr></table></figure><p>到了这里，就算是完工了，在你的页面中使用组件的时候就可以直接使用标签，而不需要总是引用了。当然，这里也是可以按需引入，如果你愿意的话。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">gly-choose-area</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">gly-choose-area</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
      <category>typepeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>typepeScript</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微前端初步</title>
    <link href="/2022/04/05/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%88%9D%E6%AD%A5/"/>
    <url>/2022/04/05/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%88%9D%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>微前端架构是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。</p><span id="more"></span><p>由此带来的变化是，这些前端应用可以独立运行、独立开发、独立部署。以及，它们应该可以在共享组件的同时进行并行开发——这些组件可以通过 NPM 或者 Git Tag、Git Submodule 来管理。<br><strong>注意</strong>：这里的前端应用指的是前后端分离的单应用页面，在这基础才谈论微前端才有意义。<br>微前端架构一般可以由以下几种方式进行：</p><ol><li>使用 HTTP 服务器的路由来重定向多个应用</li><li>在不同的框架之上设计通讯、加载机制，诸如 Mooa 和 Single-SPA</li><li>通过组合多个独立应用、组件来构建一个单体应用</li><li>iFrame。使用 iFrame 及自定义消息传递机制</li><li>使用纯 Web Components 构建应用，Web Components详见：<a href="http://www.ruanyifeng.com/blog/2019/08/web_components.html">http://www.ruanyifeng.com/blog/2019/08/web_components.html</a></li><li>结合 Web Components 构建</li></ol><p>总的来说就是，拆分前端应用，各个应用独立开发，独立部署，不同模块可以使用不同技术栈。</p><hr><p><em>摘自<a href="https://www.cnblogs.com/vickylinj/p/14457797.html">vickylinj</a></em></p><h1 id="什么是微前端"><a href="#什么是微前端" class="headerlink" title="什么是微前端"></a>什么是微前端</h1><p>官网上是这么描述的：</p><blockquote><p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently.</p></blockquote><p>从官网我们可以了解到：微前端最早是出现在2016年的<strong>ThoughtWorks Technology Radar</strong>。它将微服务的概念推广到了前端。当前的趋势是构建一个功能丰富且强大的单页面应用程序，它位于微服务架构之上。但是随着我们不断的迭代产品，前端层的业务变得繁重复杂且越来越难维护。这就是我们说的前端单体( <strong>Frontend Monolith</strong> )。</p><p>微前端背后的想法是将整个的网站或者Web应用程序看作是独立团队所拥有的功能组合，每个团队负责各自的功能模块，每个团队是跨职能的，从数据库到用户界面，端到端的开发其功能。</p><blockquote><p>通过下面这个图，我们可以更好的了解到：底部垂直排列的团队是这个架构的核心。它们各自以页面或片段的形式产生特征。您可以使用 SSI 或 Web Components 之类的技术将它们集成到到达客户的组合页面中。</p></blockquote><p><strong>前端集成</strong>描述了一组用于将团队的用户界面（页面和片段）组装到集成应用程序中的技术。您可以将这些技术分为三类：路由、组合和通信。根据您的架构选择，您有不同的选择来解决这些类别。<br><img src="https://drek4537l1klr.cloudfront.net/geers/Figures/CH01_F01_Geers.png"></p><h2 id="微前端解决什么问题"><a href="#微前端解决什么问题" class="headerlink" title="微前端解决什么问题"></a>微前端解决什么问题</h2><p>公司选择使用微前端的第一个路线是提高开发效率。在分层架构中，多个团队参与构建新的功能。减少团队之间的等待时间是微前端的主要目标<br>现在的架构都没有扩展到前端开发的概念，依然是单体、前端&#x2F;后端拆分和微服务。他们都带有一个整体式的前端。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>可独立部署</li><li>将故障风险隔离到更小的区域</li><li>范围更窄，因此更容易理解</li><li>具有较小的代码库，可以在您想要重构或替换它时提供帮助；并且可以减少意外耦合的情况出现</li><li>更可预测，因为它不与其他系统共享状态</li></ul><h2 id="微前端解决了的问题"><a href="#微前端解决了的问题" class="headerlink" title="微前端解决了的问题"></a>微前端解决了的问题</h2><ol><li><p><strong>拆分和细化</strong>（低耦合）<br>当下前端领域中，单页面应用（SPA）是非常流行的前端趋势。但是随着项目的迭代，功能和代码会越来越繁杂。耦合度也会越来也高。微前端的意义之一就在于将这些繁杂的代码和功能模块进行拆分和细化</p></li><li><p><strong>整合历史系统</strong>（新旧系统关系）<br>在不少的业务中，老系统和新系统是共存的，作为开发人员没办法浪费时间和经历将老系统进行改写。微前端可以将新旧系统进行整合。在一套系统中同时兼顾两个子系统</p></li></ol><h2 id="微前端的好处"><a href="#微前端的好处" class="headerlink" title="微前端的好处"></a>微前端的好处</h2><ul><li>增量升级</li><li>简单、解耦的代码库</li><li>独立部署</li><li>自治团队</li></ul><h2 id="目前国内的微前端的种类"><a href="#目前国内的微前端的种类" class="headerlink" title="目前国内的微前端的种类"></a>目前国内的微前端的种类</h2><ul><li><strong>基座模式</strong><br>通过搭建基座、配置中心来管理子应用。如目前大部分的单页面应用基本都会选择<strong>qiankun框架</strong>，也存在基于业务的自制方案</li><li><strong>自组织模式</strong><br>通过约定进行互相调用</li><li><strong>去中心模式</strong><br>脱离基座模式，每个应用之间可以彼此分享资源。如基于 <em>webpack 5 moudle Federation</em> 实现的 EMP微前端方案,可以实现多个应用彼此共享资源的分享</li></ul><hr><p>如果你感兴趣，拥有英文基础，可以看看原文，这里给出原文地址，用来考古</p><ul><li><a href="https://martinfowler.com/articles/microservices.html#CharacteristicsOfAMicroserviceArchitecture">微服务架构</a></li><li><a href="https://github.com/efoxTeam/emp/wiki/%E3%80%8A%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E5%89%8D%E7%AB%AF%E3%80%8B">什么是微前端</a></li><li><a href="https://martinfowler.com/articles/micro-frontends.html#IncrementalUpgrades">微前端基础</a></li></ul><hr><p><em>摘自<a href="https://www.cnblogs.com/bllx/p/15927898.html">前端李墩墩</a></em></p><h1 id="基础铺垫"><a href="#基础铺垫" class="headerlink" title="基础铺垫"></a>基础铺垫</h1><h2 id="应用分发路由-gt-路由分发应用"><a href="#应用分发路由-gt-路由分发应用" class="headerlink" title="应用分发路由 -&gt; 路由分发应用"></a>应用分发路由 -&gt; 路由分发应用</h2><blockquote><p>在一个单体前端、单体后端应用中，有一个典型的特征，即路由是由框架来分发的，框架将路由指定到对应的组件或者内部服务中。微服务在这个过程中做的事情是，将调用由函数调用变成了远程调用，诸如远程 HTTP 调用。而微前端呢，也是类似的，它是将应用内的组件调用变成了更细粒度的应用间组件调用，即原先我们只是将路由分发到应用的组件执行，现在则需要根据路由来找到对应的应用，再由应用分发到对应的组件上。</p></blockquote><p>也就是说，微前端的思想实际上是启发与微服务的思想，微前端的应用分发路由是由应用自己来定义的，而不是由框架来定义的。分发的路由也从应用内组件调用变成了应用间组件调用。</p><h2 id="后端微服务【函数调用-gt-远程调用】"><a href="#后端微服务【函数调用-gt-远程调用】" class="headerlink" title="后端微服务【函数调用 -&gt; 远程调用】"></a>后端微服务【函数调用 -&gt; 远程调用】</h2><p>在大多数CRUD应用中，都是做的一些类似的事情——首页，列表，详情<br>在spring中，你可能是这么写的</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/detail/&#123;detailId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">detail</span><span class="hljs-params">(HttpServletRequest request, ModelMap model)</span>&#123;<br>   ....<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;/WEB-INF/jsp/detail.jsp&quot;</span>, <span class="hljs-string">&quot;detail&quot;</span>, detail);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么在微服务的情况下，他会这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/name&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://account/name&quot;</span>, String.class);<br>    <span class="hljs-keyword">return</span> Name<span class="hljs-string">&quot; + name;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>此外，后端在微服务化的过程中，还多了个发现服务的服务，就比如Euraka</p><h2 id="前端微前端【组件调用-gt-应用调用】"><a href="#前端微前端【组件调用-gt-应用调用】" class="headerlink" title="前端微前端【组件调用 -&gt; 应用调用】"></a>前端微前端【组件调用 -&gt; 应用调用】</h2><p>在形式上来说，单体应用的前端和单体后端应用是没什么大的区别的，都是根据不同的路由返回不同的模板。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">appRoutes</span>: <span class="hljs-title class_">Routes</span> = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">IndexComponent</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;detail/:id&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">DetailComponent</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><p>但是在微前端化后，我们将会拆解成两个应用的路由，即应用A的路由和应用B的路由<br><strong>应用A的路由</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">appRoutes</span>: <span class="hljs-title class_">Routes</span> = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">IndexComponent</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><p><strong>应用B的路由</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">appRoutes</span>: <span class="hljs-title class_">Routes</span> = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;detail/:id&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">DetailComponent</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><p>问题的关键就在于：怎么将路由分发到这些不同的应用中去。与此同时，还要负责管理不同的前端应用。</p><h1 id="微前端的六种方式"><a href="#微前端的六种方式" class="headerlink" title="微前端的六种方式"></a><a href="https://www.cnblogs.com/vickylinj/p/14457797.html">微前端的六种方式</a></h1><h2 id="路由分发式微前端"><a href="#路由分发式微前端" class="headerlink" title="路由分发式微前端"></a>路由分发式微前端</h2><p>路由分发式微前端，即通过路由将不同的业务分发到不同的、独立前端应用上。其通常可以通过 HTTP 服务器的反向代理来实现，又或者是应用框架自带的路由来解决。</p><p>就当前而言，通过路由分发式的微前端架构应该是采用最多、最易采用的 “微前端” 方案。但是这种方式看上去更像是多个前端应用的聚合，即我们只是将这些不同的前端应用拼凑到一起，使他们看起来像是一个完整的整体。但是它们并不是，每次用户从 A 应用到 B 应用的时候，往往需要刷新一下页面。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>不同技术栈之间差异比较大，难以兼容、迁移、改造</li><li>项目不想花费大量的时间在这个系统的改造上</li><li>现有的系统在未来将会被取代</li><li>系统功能已经很完善，基本不会有新需求</li></ul><p>而在满足上面场景的情况下，如果为了更好的用户体验，还可以采用 iframe 的方式来解决。</p><h2 id="使用-iFrame-创建容器"><a href="#使用-iFrame-创建容器" class="headerlink" title="使用 iFrame 创建容器"></a>使用 iFrame 创建容器</h2><p>iFrame 作为一个非常古老的，人人都觉得普通的技术，却一直很管用。</p><blockquote><p>HTML 内联框架元素 <strong>iframe</strong> 表示嵌套的正在浏览的上下文，能有效地将另一个 HTML 页面嵌入到当前页面中。</p></blockquote><p>iframe 可以创建一个全新的独立的宿主环境，这意味着我们的前端应用之间可以相互独立运行。采用 iframe 有几个重要的前提：</p><ul><li>网站不需要 SEO 支持</li><li>拥有相应的应用管理机制。<br>如果我们做的是一个应用平台，会在我们的系统中集成第三方系统，或者多个不同部门团队下的系统，显然这是一个不错的方案。一些典型的场景，如传统的 Desktop 应用迁移到 Web 应用</li></ul><p>如果这一类应用过于复杂，那么它必然是要进行微服务化的拆分。因此，在采用 iframe 的时候，我们需要做这么两件事：</p><ul><li>设计管理应用机制</li><li>设计应用通讯机制</li></ul><p><strong>加载机制</strong>：在什么情况下，我们会去加载、卸载这些应用；在这个过程中，采用怎样的动画过渡，让用户看起来更加自然。<br><strong>通讯机制</strong>：直接在每个应用中创建 <strong>postMessage</strong> 事件并监听，并不是一个友好的事情。其本身对于应用的侵入性太强，因此通过 <strong>iframeEl.contentWindow</strong> 去获取 <strong>iFrame</strong> 元素的 <strong>Window</strong> 对象是一个更简化的做法。随后，就需要定义一套通讯规范：事件名采用什么格式、什么时候开始监听事件等等。<br>有兴趣的读者，可以看看笔者之前写的微前端框架：<a href="https://github.com/phodal/mooa">Mooa</a>。<br>不管怎样，<strong>iframe</strong> 对于我们今年的 <strong>KPI</strong> 怕是带不来一丝的好处，那么我们就去造个轮子吧。</p><h2 id="自制框架兼容应用"><a href="#自制框架兼容应用" class="headerlink" title="自制框架兼容应用"></a>自制框架兼容应用</h2><p>不论是基于 Web Components 的 Angular，或者是 VirtualDOM 的 React 等，现有的前端框架都离不开基本的 HTML 元素 DOM。</p><p>那么，我们只需要：</p><ol><li>在页面合适的地方引入或者创建 DOM</li><li>用户操作时，加载对应的应用（触发应用的启动），并能卸载应用。<br>第一个问题，创建 DOM 是一个容易解决的问题。而第二个问题，则一点儿不容易，特别是移除 DOM 和相应应用的监听。当我们拥有一个不同的技术栈时，我们就需要有针对性设计出一套这样的逻辑。</li></ol><p>尽管 <a href="https://github.com/CanopyTax/single-spa"><strong>Single-SPA</strong></a> 已经拥有了大部分框架（如 React、Angular、Vue 等框架）的启动和卸载处理，但是它仍然不是适合于生产用途。当我基于 Single-SPA 为 Angular 框架设计一个微前端架构的应用时，我最后选择重写一个自己的框架，即 Mooa。</p><p>虽然，这种方式的上手难度相对比较高，但是后期订制及可维护性比较方便。在不考虑每次加载应用带来的用户体验问题，其唯一存在的风险可能是：第三方库不兼容。</p><p>但是，不论怎样，与 iFrame 相比，其在技术上更具有可吹牛逼性，更有看点。同样的，与 iframe 类似，我们仍然面对着一系列的不大不小的问题：</p><p>需要设计一套管理应用的机制。<br>对于流量大的 toC 应用来说，会在首次加载的时候，会多出大量的请求<br>而我们即又要拆分应用，又想 blabla……，我们还能怎么做？</p><h2 id="组合式集成：将应用微件化"><a href="#组合式集成：将应用微件化" class="headerlink" title="组合式集成：将应用微件化"></a>组合式集成：将应用微件化</h2><p>组合式集成，即通过软件工程的方式在构建前、构建时、构建后等步骤中，对应用进行一步的拆分，并重新组合。</p><p>从这种定义上来看，它可能算不上并不是一种微前端——它可以满足了微前端的三个要素，即：独立运行、独立开发、独立部署。但是，配合上前端框架的组件 Lazyload 功能——即在需要的时候，才加载对应的业务组件或应用，它看上去就是一个微前端应用。</p><p>与此同时，由于所有的依赖、Pollyfill 已经尽可能地在首次加载了，CSS 样式也不需要重复加载。</p><p>常见的方式有：</p><p>独立构建组件和应用，生成 chunk 文件，构建后再归类生成的 chunk 文件。（这种方式更类似于微服务，但是成本更高）<br>开发时独立开发组件或应用，集成时合并组件和应用，最后生成单体的应用。<br>在运行时，加载应用的 <strong>Runtime</strong>，随后加载对应的应用代码和模板。<br>应用间的关系如下图所示（其忽略图中的 “前端微服务化”）：<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220405171604.png"></p><p>这种方式看上去相当的理想，即能满足多个团队并行开发，又能构建出适合的交付物。</p><p>但是，首先它有一个严重的限制：必须使用同一个框架。对于多数团队来说，这并不是问题。采用微服务的团队里，也不会因为微服务这一个前端，来使用不同的语言和技术来开发。当然了，如果要使用别的框架，也不是问题，我们只需要结合上一步中的自制框架兼容应用就可以满足我们的需求。</p><p>其次，采用这种方式还有一个限制，那就是：规范！规范！规范！。在采用这种方案时，我们需要：</p><ul><li>统一依赖。统一这些依赖的版本，引入新的依赖时都需要一一加入。</li><li>规范应用的组件及路由。避免不同的应用之间，因为这些组件名称发生冲突。</li><li>构建复杂。在有些方案里，我们需要修改构建系统，有些方案里则需要复杂的* 架构脚本。</li><li>共享通用代码。这显然是一个要经常面对的问题。</li><li>制定代码规范。<br>因此，这种方式看起来更像是一个软件工程问题。</li></ul><p>现在，我们已经有了四种方案，每个方案都有自己的利弊。显然，结合起来会是一种更理想的做法。</p><p>考虑到现有及常用的技术的局限性问题，让我们再次将目光放得长远一些。 </p><h2 id="纯-Web-Components-技术构建"><a href="#纯-Web-Components-技术构建" class="headerlink" title="纯 Web Components 技术构建"></a>纯 Web Components 技术构建</h2><p>在学习 Web Components 开发微前端架构的过程中，我尝试去写了我自己的 Web Components 框架：<a href="https://github.com/phodal/oan">oan</a>。在添加了一些基本的 Web 前端框架的功能之后，我发现这项技术特别适合于作为微前端的基石。</p><blockquote><p>Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的 Web 应用中使用它们。</p></blockquote><p>它主要由四项技术组件：</p><ul><li>Custom elements，允许开发者创建自定义的元素，诸如 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">today-news</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">today-news</span>&gt;</span>。<br></code></pre></td></tr></table></figure></li><li>Shadow DOM，即影子 DOM，通常是将 Shadow DOM 附加到主文档 DOM 中，并可以控制其关联的功能。而这个 Shadow DOM 则是不能直接用其它主文档 DOM 来控制的。</li><li>HTML templates，即 <strong>template</strong> 和 <strong>slot</strong> 元素，用于编写不在页面中显示的标记模板。</li><li>HTML Imports，用于引入自定义组件。</li></ul><p>每个组件由 link 标签引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;import&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;components/di-li.html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;import&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;components/d-header.html&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>随后，在各自的 <em>HTML</em> 文件里，创建相应的组件元素，编写相应的组件逻辑。一个典型的 <strong>Web Components</strong> 应用架构如下图所示：<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/1228394-20210227231324174-1506727900.png"><br>可以看到这边方式与我们上面使用 iframe 的方式很相似，组件拥有自己独立的 Scripts 和 Styles，以及对应的用于单独部署组件的域名。然而它并没有想象中的那么美好，要直接使用纯 Web Components 来构建前端应用的难度有：</p><ul><li>重写现有的前端应用。是的，现在我们需要完成使用 Web Components 来完成整个系统的功能。</li><li>上下游生态系统不完善。缺乏相应的一些第三方控件支持，这也是为什么 jQuery 相当流行的原因。</li><li>系统架构复杂。当应用被拆分为一个又一个的组件时，组件间的通讯就成了一个特别大的麻烦。</li></ul><p>Web Components 中的 ShadowDOM 更像是新一代的前端 DOM 容器。而遗憾的是并不是所有的浏览器，都可以完全支持 Web Components。 </p><h2 id="结合-Web-Components-构建"><a href="#结合-Web-Components-构建" class="headerlink" title="结合 Web Components 构建"></a>结合 Web Components 构建</h2><p>Web Components 离现在的我们太远，可是结合 Web Components 来构建前端应用，则更是一种面向未来演进的架构。或者说在未来的时候，我们可以开始采用这种方式来构建我们的应用。好在，已经有框架在打造这种可能性。</p><p>就当前而言，有两种方式可以结合 Web Components 来构建微前端应用：</p><ul><li>使用 Web Components 构建独立于框架的组件，随后在对应的框架中引入这些组件</li><li>在 Web Components 中引入现有的框架，类似于 iframe 的形式</li></ul><p>前者是一种组件式的方式，后者则像是在迁移未来的 “遗留系统” 到未来的架构上。</p><h3 id="在-Web-Components-中集成现有框架"><a href="#在-Web-Components-中集成现有框架" class="headerlink" title="在 Web Components 中集成现有框架"></a>在 Web Components 中集成现有框架</h3><p>现有的 Web 框架已经有一些可以支持 Web Components 的形式，诸如 Angular 支持的 createCustomElement，就可以实现一个 Web Components 形式的组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">platformBrowser</span>()<br>    .<span class="hljs-title function_">bootstrapModuleFactory</span>(<span class="hljs-title class_">MyPopupModuleNgFactory</span>)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123;injector&#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> <span class="hljs-title class_">MyPopupElement</span> = <span class="hljs-title function_">createCustomElement</span>(<span class="hljs-title class_">MyPopup</span>, &#123;injector&#125;);<br>            customElements.<span class="hljs-title function_">define</span>(‘my-popup’, <span class="hljs-title class_">MyPopupElement</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在未来，将有更多的框架可以使用类似这样的形式，集成到 Web Components 应用中。</p><h3 id="集成在现有框架中的-Web-Components"><a href="#集成在现有框架中的-Web-Components" class="headerlink" title="集成在现有框架中的 Web Components"></a>集成在现有框架中的 Web Components</h3><p>另外一种方式，则是类似于 <a href="https://github.com/ionic-team/stencil"><strong>Stencil</strong></a> 的形式，将组件直接构建成 <strong>Web Components</strong> 形式的组件，随后在对应的诸如，如 React 或者 Angular 中直接引用。</p><p>如下是一个在 React 中引用 Stencil 生成的 Web Components 的例子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><span class="hljs-keyword">import</span> registerServiceWorker <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./registerServiceWorker&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;test-components/testcomponents&#x27;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br><span class="hljs-title function_">registerServiceWorker</span>();<br></code></pre></td></tr></table></figure><p>在这种情况之下，我们就可以构建出独立于框架的组件。</p><p>同样的 <strong>Stencil</strong> 仍然也只是支持最近的一些浏览器，比如：Chrome、Safari、Firefox、Edge 和 IE11</p><h2 id="复合型"><a href="#复合型" class="headerlink" title="复合型"></a>复合型</h2><p>对上面几种方式挑选几个组合在一起</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>微前端</category>
      
      <category>前端工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 2021安装教程</title>
    <link href="/2022/04/04/AndroidStudio2021%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2022/04/04/AndroidStudio2021%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Android Studio 是谷歌推出的一个Android集成开发工具，基于IntelliJ IDEA. 类似 Eclipse ADT，Android Studio 提供了集成的 Android 开发工具用于开发和调试。</p><span id="more"></span><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p>下载链接：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>bq2ILID1mue0VfCYlgRXDQ<br></code></pre></td></tr></table></figure><p>提取码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.鼠标右击【Android Studio2021】压缩包（win11系统的需先点击“显示更多选项”）选择【解压到 Android Studio2021】<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163230.png" alt="解压"><br>2.打开解压后的文件夹，鼠标右击【android-studio……】选择【以管理员身份运行】。<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163301.png" alt="运行"><br>3.一路【Next】。<br>4.点击【Install】。<br>5.点击【Finish】。<br>6.配置首次启动as<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163341.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163355.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163406.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163444.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163504.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163516.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163536.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163559.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163619.png"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163639.png"><br>7.【安装完成】<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220404163709.png" alt="安装完成"></p>]]></content>
    
    
    <categories>
      
      <category>安卓开发</category>
      
      <category>AndroidStudio</category>
      
      <category>安装教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓开发</tag>
      
      <tag>AndroidStudio</tag>
      
      <tag>安装教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element-plus全局注册图标小技巧</title>
    <link href="/2022/04/03/element-plus%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E5%9B%BE%E6%A0%87%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/04/03/element-plus%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E5%9B%BE%E6%A0%87%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>Element Plus 提供了一套常用的图标集合。在使用element-plus时，需要先在全局注册图标，这样才能在组件中使用。<br>如是使用按需引入的话每次都需要引入一次图标，就导致使用的时候非常难受，因此这里考虑牺牲一点点性能，再程序开始之前就全局注册所有的图标。</p><span id="more"></span><h1 id="安装element-plus的图标库"><a href="#安装element-plus的图标库" class="headerlink" title="安装element-plus的图标库"></a>安装element-plus的图标库</h1><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">选择一个你喜欢的包管理器</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">NPM</span><br>npm install @element-plus/icons-vue<br><span class="hljs-meta"># </span><span class="language-bash">Yarn</span><br>yarn add @element-plus/icons-vue<br><span class="hljs-meta"># </span><span class="language-bash">pnpm</span><br>pnpm install @element-plus/icons-vue<br></code></pre></td></tr></table></figure><h1 id="再main-ts中引用"><a href="#再main-ts中引用" class="headerlink" title="再main.ts中引用"></a>再main.ts中引用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">Icons</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="使用for循环将所有的Icon名字输出"><a href="#使用for循环将所有的Icon名字输出" class="headerlink" title="使用for循环将所有的Icon名字输出"></a>使用for循环将所有的Icon名字输出</h1><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220403222245.png" alt="输出所有Icon组件的名字-代码"><br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220403222337.png" alt="输出所有Icon组件的名字-结果"><br>可以看到全部都是用的驼峰命名法，为了是我们用的方便，符合自己的命名规则，就需要将其转化为分隔符的样子，所以就写了一个工具函数</p><h1 id="使用个将驼峰命名转化为分隔符的工具函数"><a href="#使用个将驼峰命名转化为分隔符的工具函数" class="headerlink" title="使用个将驼峰命名转化为分隔符的工具函数"></a>使用个将驼峰命名转化为分隔符的工具函数</h1><h2 id="1-src-x2F-utils-ts"><a href="#1-src-x2F-utils-ts" class="headerlink" title="1. src&#x2F;utils.ts"></a>1. src&#x2F;utils.ts</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将驼峰命名法转化成下划线命名法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">camelToLine</span> = (<span class="hljs-params">str: string</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(A-Z)/g</span>, <span class="hljs-string">&#x27;-$1&#x27;</span>).<span class="hljs-title function_">toLocaleLowerCase</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用正则匹配，就很好用。</p><h1 id="全局注册图标"><a href="#全局注册图标" class="headerlink" title="全局注册图标"></a>全局注册图标</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全局注册图标</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> <span class="hljs-title class_">Icons</span>) &#123;<br>    app.<span class="hljs-title function_">component</span>(<span class="hljs-string">`el-icon-<span class="hljs-subst">$&#123; camelToLine(i) &#125;</span>`</span>, (<span class="hljs-title class_">Icons</span> <span class="hljs-keyword">as</span> any)[i]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经验</tag>
      
      <tag>vue</tag>
      
      <tag>element-plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目中scss不生效的问题</title>
    <link href="/2022/04/03/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADscss%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/03/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADscss%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>今天学习Vue封装组件库的时候，将scss文件拆解，然后在组件中引用就不生效了，在检查了许多地方以后才解决了问题。<br>因此在这里总结一些引用scss不生效的解决方案。</p><span id="more"></span><h1 id="拆解App-vue中的scss"><a href="#拆解App-vue中的scss" class="headerlink" title="拆解App.vue中的scss"></a>拆解App.vue中的scss</h1><ol><li>在src目录下新建styles目录</li><li>新建ui.scss<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220403220528.png" alt="拆解后的目录"></li><li>将对应的样式复制到ui.scss<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220403220636.png" alt="ui.scss"><br>这里主要是做scss的命名空间，所以这么写</li><li>抽离base.scss文件<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220403220729.png" alt="抽离base.scss文件"></li><li>然后再App.vue中导入scss文件<figure class="highlight scss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./styles/base.scss&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./styles/ui.scss&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="scss文件虽然导入，但是却没有对应的效果"><a href="#scss文件虽然导入，但是却没有对应的效果" class="headerlink" title="scss文件虽然导入，但是却没有对应的效果"></a>scss文件虽然导入，但是却没有对应的效果</h1><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因 1"></a>原因 1</h2>App.vue中的style中设置了scoped，所以scss文件中的样式会被添加到App.vue中的style中，但是这个样式并没有被导入到App.vue中，所以这个样式并没有生效。<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3>App.vue中的style标签的scoped属性去掉，允许样式穿透，这样就可以解决问题了</li></ol><h2 id="原因-2"><a href="#原因-2" class="headerlink" title="原因 2"></a>原因 2</h2><p>App.vue中的style标签没有设置语言</p><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>将App.vue中的style标签添加属性 <strong>lang&#x3D;”scss”</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;style lang=<span class="hljs-string">&quot;scss&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="原因-3"><a href="#原因-3" class="headerlink" title="原因 3"></a>原因 3</h2><p>vue中scss使用deep不起作用<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220403220829.png" alt="scss中deep不起作用"></p><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>在style加入scoped即可生效</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经验</tag>
      
      <tag>vue</tag>
      
      <tag>scss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端脚手架神器—x-build</title>
    <link href="/2022/04/02/%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E7%A5%9E%E5%99%A8%E2%80%94x-build/"/>
    <url>/2022/04/02/%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E7%A5%9E%E5%99%A8%E2%80%94x-build/</url>
    
    <content type="html"><![CDATA[<p>x-build是一款协助你快速从”零”搭建大型应用的前端脚手架。X-BUILD 基于 vue3 + typescript，使用 vite 构建项目，支持众多的开箱即用的功能和针对项目进行了不同程度的优化，初始模板打包后体积仅为 150kb &#x2F; 50kb(gzip)。它的宗旨是快速创建一套纯净却具备强大基础功能的模板，协助开发者自由发挥快速搭建任何类型的项目。</p><span id="more"></span><div class="note note-success">            <h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>在使用此脚手架前，请确保你对以下的技术有足够的知识储备：</p><ul><li><a href="https://cn.vuejs.org/">Vue3</a></li><li><a href="https://router.vuejs.org/">VueRouter</a></li><li><a href="https://pinia.esm.dev/">Pinia</a></li><li><a href="https://www.typescriptlang.org/">TypeScript</a></li><li><a href="https://cn.vitejs.dev/">Vite</a></li><li><a href="https://tailwindcss.com/">Tailwind.css</a></li></ul>          </div><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><h3 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a><a href="https://code-device.github.io/x-build/">文档地址</a></h3><h1 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h1><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>你可以通过全局安装 X-BUILD，它本质上是一款 CLI (command-line interface，中文：命令行界面) ，提供了一系列的选项，为你生成一套适合于你的前端开发模板，这套模板已经提供了许多通用的基础功能，为你的项目打下坚实的基础。</p><h2 id="基于-X-BUILD-打造自己的脚手架"><a href="#基于-X-BUILD-打造自己的脚手架" class="headerlink" title="基于 X-BUILD 打造自己的脚手架"></a>基于 X-BUILD 打造自己的脚手架</h2><p>通常情况下，每个团队的习惯不同，尽管 X-BUILD 提供了可选项辅助生成个性化模板，但不能满足所有人的需求，所以基于 X-BUILD 打造一套自己的脚手架是一个更好的选择，你可以通过 Fork 本仓库，修改成你的团队的开发习惯。</p><p>并且你可以私人订制拓展功能，为你的团队创建更多通用的业务组件或工具。</p><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><p>脚手架可以快速帮你创建一份空白模板，提供了许多通用的功能：</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ul><li>基于文件的路由</li><li>提供环境变量：开发环境、预生产环境、生产环境</li><li>基于 Pinia 实现的全局状态管理，更好的支持 TS</li><li>提供一个基于 mitt 的组件联动交互的解决方案</li><li>提供实用 Hooks，更多情况下推荐使用 vueuse</li><li>基于 axios 异步请求封装</li><li>基于环境变量的静态资源组件</li><li>自动加载 SVG 的图标组件，雪碧图打包</li><li>页面登录访问权限、指令权限</li><li>页面缓存（基于 keep-alive 实现）</li><li>支持 gzip</li><li>支持 PWA<h1 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h1></li><li>布局系统</li><li>可选 Less 或 Sass&#x2F;Scss 预处理器</li><li>根据路由与环境变量自动变化标签栏 Title</li><li>静态资源加载页面</li><li>页面载入进度条<h1 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h1></li><li>ESLint Airbnb 规范</li><li>Stylelint</li><li>husky &amp; Commitlint<h1 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h1>推荐使用<strong>Chrome</strong>浏览器，不支持 Chrome 80 以下版本，不支持IE。<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1>本节将介绍如何在全局环境安装 X-BUILD 和通过命令行快速的生成项目。<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2></li><li>需要在本地安装 <strong>Node.js</strong> 和 <strong>Git</strong>。</li><li>推荐使用 <strong>vscode</strong> 作为代码编辑器，安装以下插件可以更好的体验脚手架：<ul><li>Vue Language Features (<a href="https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar">Volar</a>)（Vue3 开发必备）</li><li>ESLint（Javascript 代码检查）</li><li>Stylelint（CSS 代码检查）</li><li>Prettier - Code formatter（代码格式化）</li><li><a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss">Tailwind CSS IntelliSense</a>（Tailwind 提示插件）</li></ul></li></ul><h2 id="安装-cli"><a href="#安装-cli" class="headerlink" title="安装 cli"></a>安装 cli</h2><p>推荐全局安装</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm install -g x-build<br></code></pre></td></tr></table></figure><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn global add x-build<br></code></pre></td></tr></table></figure><p>mac、linux 用户需要权限增加 sudo。<br>使用方式类似于 @vue&#x2F;cli，提供了终端里的 x-build 或 x（简写）命令。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x-build create &lt;project-name&gt;<br></code></pre></td></tr></table></figure><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x create &lt;project-name&gt;<br></code></pre></td></tr></table></figure><h3 id="选择特性"><a href="#选择特性" class="headerlink" title="选择特性"></a>选择特性</h3><p>使用创建命令会提示一系列问题，需要你根据实际需求做出选择：</p><h3 id="选择默认-CSS-预处理器"><a href="#选择默认-CSS-预处理器" class="headerlink" title="选择默认 CSS 预处理器"></a>选择默认 CSS 预处理器</h3><ul><li>如果你使用的是 Less，可以选择 <code>less</code>；</li><li>如果你使用的是 Sass，可以选择 <code>sass</code>；<h3 id="选择默认组件库"><a href="#选择默认组件库" class="headerlink" title="选择默认组件库"></a>选择默认组件库</h3></li><li>Element Plus</li><li>Ant Design Vue</li><li>Naive UI</li><li>Vant<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3></li><li>输入命令后，模板文件会自动创建名字为[name] 的文件夹，并将模板文件复制到此文件夹内。</li><li>自动初始化 Git。</li><li>依赖会自动安装，会跟你你所安装的包管理工具按优先级选择：</li></ul><p><strong>优先级：yarn &gt; npm</strong></p><div class="note note-warning">            <h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>强烈建议不要用直接使用 cnpm 安装，会有各种诡异的 bug，可以通过重新指定 registry 来解决 npm 安装速度慢的问题。若还是不行，可使用 yarn 替代 npm。</p>          </div><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>根据安装后的相关提示，输入相关命令以继续：</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure><h3 id="包分析工具"><a href="#包分析工具" class="headerlink" title="包分析工具"></a>包分析工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run analyze<br></code></pre></td></tr></table></figure><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run lint<br></code></pre></td></tr></table></figure><h3 id="StyleLint"><a href="#StyleLint" class="headerlink" title="StyleLint"></a>StyleLint</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run stylelint<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>脚手架</category>
      
      <category>x-build</category>
      
    </categories>
    
    
    <tags>
      
      <tag>x-build</tag>
      
      <tag>脚手架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码研究之渲染模型</title>
    <link href="/2022/04/01/Vue%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/04/01/Vue%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>Vue 本质上是使用 HTML 的字符串作为模板的, 将字符串的 模板 转换为 AST(抽象语法树), 再转换为 VNode（虚拟dom）<br>主要流程如下：</p><ol><li>将模板字符串转换为 AST</li><li>将 AST 转换为 VNode</li><li>将 VNode 转换为 DOM<span id="more"></span></li></ol><p>本节流程如下图所示<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220401104119.png" alt="Vue渲染模型"><br>开始以前，需要将我们之前的代码拿过来直接使用<br><em>VNode</em> 虚拟DOM类，用他来作为我们的虚拟DOM</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VNode</span>&#123;<br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tag  标签名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> children 子节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text 文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">tag, data, children, text, type</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span> = tag &amp;&amp; tag.<span class="hljs-title function_">toLowerCase</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span> = [];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span> = text;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = type;<br>    &#125;<br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 将子节点添加到虚拟DOM中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">vnode</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">appendChild</span>(<span class="hljs-params">vnode</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(vnode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是上次虚拟DOM的根据docment节点生成虚拟DOM的createVNode</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 使用递归遍历DOM元素，生成虚拟DOM，</span><br><span class="hljs-comment"> * Vue使用的栈结构，后面学习到的时候写</span><br><span class="hljs-comment"> * */</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createVNode</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-keyword">let</span> nodeType = node.<span class="hljs-property">nodeType</span>;<br>    <span class="hljs-keyword">let</span> _vnode = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">// node.attributes是个伪数组，因此需要将其转为数组</span><br>        <span class="hljs-keyword">let</span> _attrObj = &#123;&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; node.<span class="hljs-property">attributes</span>.<span class="hljs-property">length</span>; i++)&#123;<br>            _attrObj[node.<span class="hljs-property">attributes</span>[i].<span class="hljs-property">name</span>] = node.<span class="hljs-property">attributes</span>[i].<span class="hljs-property">value</span>;<br>        &#125;<br>        _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(node.<span class="hljs-property">tagName</span>, _attrObj, [], <span class="hljs-literal">undefined</span>, nodeType);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; node.<span class="hljs-property">childNodes</span>.<span class="hljs-property">length</span>; i++)&#123;<br>            _vnode.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createVNode</span>(node.<span class="hljs-property">childNodes</span>[i]));<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">3</span>)&#123;<br>        _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, node.<span class="hljs-property">textContent</span>, nodeType);<br>    &#125;<br>    <span class="hljs-keyword">return</span> _vnode;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="在LikeVue的构造方法中调用mount方法"><a href="#在LikeVue的构造方法中调用mount方法" class="headerlink" title="在LikeVue的构造方法中调用mount方法"></a>在LikeVue的构造方法中调用mount方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">LikeVue</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-comment">// 内部数据用_开头，只读数据用$开头</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span> = options.<span class="hljs-property">data</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(options.<span class="hljs-property">el</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_template</span> = options.<span class="hljs-property">el</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_parent</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">parentNode</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">mount</span>();<br>&#125;<br><span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mount</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 需要提供一个render方法，用来生成虚拟DOM，内部会进行解析</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">render</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createRenderFn</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">mountComponent</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>mount方法调用一个createRenderFn函数来创建一个渲染函数，这里用到了<a href="http://localhost:4000/2022/03/25/Vue%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%EF%BC%88%E4%BA%8C%EF%BC%89/#%E5%88%A9%E7%94%A8%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%AE%9E%E7%8E%B0">函数柯里化</a>，主要的目的就是为了保存ast抽象语法树，这也是函数柯里化的作用。<br>然后调用的是 <em>mountComponent</em> 方法，这个方法负责调用 <em>update</em> 方法，将渲染好的虚拟DOM替换到真实DOM中。</p><h1 id="创建渲染函数"><a href="#创建渲染函数" class="headerlink" title="创建渲染函数"></a>创建渲染函数</h1><p>我这里的createRenderFn是这么写的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 在真正的Vue中用到的是类似与数据库事务的模式——二次提交</span><br><span class="hljs-comment"> * 1. 在页面中的DOM和虚拟DOM建立一一对应关系</span><br><span class="hljs-comment"> * 2. 先由AST和数据生成VNode</span><br><span class="hljs-comment"> * 3. 将旧的VNode和新的VNode进行diff，更新（update）</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * */</span><br><span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">createRenderFn</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 创建render方法，目的是缓存 抽象语法树AST （这里使用虚拟DOM来模拟）</span><br>    <span class="hljs-comment">// 创建render方法</span><br>    <span class="hljs-comment">// Vue : AST + data =&gt; VNode</span><br>    <span class="hljs-comment">// 这里我们用带有占位符的VNode + data =&gt; 带有数据的VNode</span><br>    <span class="hljs-keyword">let</span> _ast = <span class="hljs-title function_">createVNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">combine</span>(_ast, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>createRenderFn主要的作用是保存 <em>AST</em> ，也就是缓存 <em>AST</em> ，在这里还调用 <em>combine</em> 方法将模板与数据结合，生成虚拟DOM，返回了。<br>也就是说，如果调用的是 <em>this.render()</em> ，那么返回的就是已经渲染好的虚拟DOM。<br><strong>注意</strong>：在 Vue 中，采用的方法是 <em>AST + data &#x3D;&gt; VNode</em> ，这里的 <em>AST</em> 就是抽象语法树，而 <em>data</em> 就是数据。我们这里还只是模拟，因此就做了个简化，就成了 <em>带有占位符的VNode + data &#x3D;&gt; 带有数据的VNode</em> 同样可以起到类似的效果，这里并不打算考虑性能优化。<br><strong>注意</strong>：在Vue中正是这里调用的diff算法<br><strong>注意</strong>：在Vue中用到的是数据库中的事务模式，即二次提交，在内存中运行没问题以后在提交，这样可以保证可靠性，也不会读脏数据，就像<strong>数据库原理</strong>中的<em>银行取钱</em>例子是一样的，</p><h1 id="将模板与数据结合（combine方法）"><a href="#将模板与数据结合（combine方法）" class="headerlink" title="将模板与数据结合（combine方法）"></a>将模板与数据结合（combine方法）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将模板与数据结合，生成虚拟的DOM</span><br><span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">combine</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">tmpNode, data</span>) &#123;<br><span class="hljs-keyword">let</span> rPattern = <span class="hljs-regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>;<br>    <span class="hljs-keyword">let</span> _type = tmpNode.<span class="hljs-property">type</span>;<br>    <span class="hljs-keyword">let</span> _tag = tmpNode.<span class="hljs-property">tag</span>;<br>    <span class="hljs-keyword">let</span> _data = tmpNode.<span class="hljs-property">data</span>;<br>    <span class="hljs-keyword">let</span> _text = tmpNode.<span class="hljs-property">text</span>;<br>    <span class="hljs-keyword">let</span> _children = tmpNode.<span class="hljs-property">children</span>;<br>    <span class="hljs-keyword">let</span> _vnode = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span>(_type === <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">// 元素节点</span><br>        _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(_tag, _data, [], _text, _type);<br>        _children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> _vnode.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">combine</span>(element, data)));<br>        <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(_type === <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">// 文本节点</span><br>        _text = _text.<span class="hljs-title function_">replace</span>(rPattern, <span class="hljs-function">(<span class="hljs-params">match, key</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getPropByPath</span>(data, key.<span class="hljs-title function_">trim</span>());<br>        &#125;);<br>        _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(_tag, _data, _children, _text, _type);<br>    &#125;<br>    <span class="hljs-keyword">return</span> _vnode;<br>&#125;<br></code></pre></td></tr></table></figure><p>combine方法其实就是createVNode改的，这里用来返回一个填充完毕数据的虚拟DOM，这里我将这个方法挂载到了LikeVue的原型上，这样就可以在实例中调用了。<em>getPropByPath</em> 方法就是用来获取数据的，在前面的小节中就已经提到过了。</p><h1 id="mountComponent方法"><a href="#mountComponent方法" class="headerlink" title="mountComponent方法"></a>mountComponent方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mountComponent</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 执行mountCompoent方法</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">mount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this.render()&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>())<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>());<br>    &#125;<br>    <span class="hljs-comment">// 本来应该交给watcher去触发，但是这里没有watcher，所以直接调用</span><br>    mount.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>因为本节没有考虑使用设计模式，因此这里做了个简化。</strong></p><h2 id="update方法"><a href="#update方法" class="headerlink" title="update方法"></a>update方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">newAST</span>)&#123;<br>    <span class="hljs-comment">// diff算法就在这里使用，将虚拟DOM渲染到页面中</span><br>    <span class="hljs-comment">// 简化，直接生成HTML DOM 替换到页面中去</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_parent</span>.<span class="hljs-title function_">replaceChild</span>(<span class="hljs-title function_">parseVNode</span>(newAST), <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>从mountComponent方法中传过来的参数是个虚拟DOM，因此必须将虚拟DOM转成真实的DOM才可以利用replaceChild替换到真实的DOM中去。<br>到此位置，就是将虚拟DOM渲染到页面中去了。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>这里给出测试的代码，以验证代码是否真的能起到预期的效果。</p><h2 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LikeVue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220401111154.png" alt="测试成功结果图"><br>可以看到确实将渲染的数据渲染到了页面中去了。<br>在过程中我输出了一下AST以及渲染后的虚拟DOM<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220401111354.png" alt="AST抽象语法树"><br>可以看到，抽象语法树其实是没有被渲染之前的template，这就是被缓存的抽象语法树。<br><img src="https://iotpics.oss-accelerate.aliyuncs.com/img/20220401111525.png" alt="渲染完成的虚拟DOM"><br>从这张图就可以看到 <em>this.render()</em> 返回的填充了的虚拟DOM是的的确确填充了数据的。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>LikeVue<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">VNode</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">/***</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 构造函数</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> tag  标签名</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> children 子节点</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> text 文本</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> type 类型</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> data 数据</span></span><br><span class="hljs-comment"><span class="language-javascript">         */</span></span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">tag, data, children, text, type</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span> = tag &amp;&amp; tag.<span class="hljs-title function_">toLowerCase</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span> = [];</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span> = text;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = type;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">/***</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 将子节点添加到虚拟DOM中</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> <span class="hljs-variable">vnode</span></span></span><br><span class="hljs-comment"><span class="language-javascript">         */</span></span><br><span class="language-javascript">        <span class="hljs-title function_">appendChild</span>(<span class="hljs-params">vnode</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(vnode);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">/***</span></span><br><span class="hljs-comment"><span class="language-javascript">     * 使用递归遍历DOM元素，生成虚拟DOM，</span></span><br><span class="hljs-comment"><span class="language-javascript">     * Vue使用的栈结构，后面学习到的时候写</span></span><br><span class="hljs-comment"><span class="language-javascript">     * */</span></span><br><span class="language-javascript">     <span class="hljs-keyword">function</span> <span class="hljs-title function_">createVNode</span>(<span class="hljs-params">node</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> nodeType = node.<span class="hljs-property">nodeType</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> _vnode = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// node.attributes是个伪数组，因此需要将其转为数组</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> _attrObj = &#123;&#125;;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; node.<span class="hljs-property">attributes</span>.<span class="hljs-property">length</span>; i++)&#123;</span><br><span class="language-javascript">                _attrObj[node.<span class="hljs-property">attributes</span>[i].<span class="hljs-property">name</span>] = node.<span class="hljs-property">attributes</span>[i].<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(node.<span class="hljs-property">tagName</span>, _attrObj, [], <span class="hljs-literal">undefined</span>, nodeType);</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; node.<span class="hljs-property">childNodes</span>.<span class="hljs-property">length</span>; i++)&#123;</span><br><span class="language-javascript">                _vnode.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createVNode</span>(node.<span class="hljs-property">childNodes</span>[i]));</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">3</span>)&#123;</span><br><span class="language-javascript">            _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, node.<span class="hljs-property">textContent</span>, nodeType);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> _vnode;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseVNode</span>(<span class="hljs-params">vnode</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> nodeType = vnode.<span class="hljs-property">type</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> _node = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">                _node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(vnode.<span class="hljs-property">tag</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> vnode.<span class="hljs-property">data</span>)&#123;</span><br><span class="language-javascript">                    _node.<span class="hljs-title function_">setAttribute</span>(key, vnode.<span class="hljs-property">data</span>[key]);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; vnode.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>; i++)&#123;</span><br><span class="language-javascript">                    _node.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">parseVNode</span>(vnode.<span class="hljs-property">children</span>[i]));</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">3</span>)&#123;</span><br><span class="language-javascript">                _node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(vnode.<span class="hljs-property">text</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> _node;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">LikeVue</span>(<span class="hljs-params">options</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 内部数据用_开头，只读数据用$开头</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span> = options.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(options.<span class="hljs-property">el</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_template</span> = options.<span class="hljs-property">el</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_parent</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">parentNode</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">mount</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getPropByPath</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, path</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc[cur], obj);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 将模板与数据结合，生成虚拟的DOM</span></span><br><span class="language-javascript">    <span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">combine</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">tmpNode, data</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> rPattern = <span class="hljs-regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> _type = tmpNode.<span class="hljs-property">type</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> _tag = tmpNode.<span class="hljs-property">tag</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> _data = tmpNode.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> _text = tmpNode.<span class="hljs-property">text</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> _children = tmpNode.<span class="hljs-property">children</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> _vnode = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(_type === <span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 元素节点</span></span><br><span class="language-javascript">            _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(_tag, _data, [], _text, _type);</span><br><span class="language-javascript">            _children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> _vnode.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">combine</span>(element, data)));</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(_type === <span class="hljs-number">3</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 文本节点</span></span><br><span class="language-javascript">            _text = _text.<span class="hljs-title function_">replace</span>(rPattern, <span class="hljs-function">(<span class="hljs-params">match, key</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getPropByPath</span>(data, key.<span class="hljs-title function_">trim</span>());</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(_tag, _data, _children, _text, _type);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> _vnode;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mount</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 需要提供一个render方法，用来生成虚拟DOM，内部会进行解析</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">render</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createRenderFn</span>();</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">mountComponent</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mountComponent</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 执行mountCompoent方法</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> <span class="hljs-title function_">mount</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this.render()&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>())</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>());</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        mount.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">createRenderFn</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> _ast = <span class="hljs-title function_">createVNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ast&#x27;</span>, _ast)</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">combine</span>(_ast, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">newAST</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_parent</span>.<span class="hljs-title function_">replaceChild</span>(<span class="hljs-title function_">parseVNode</span>(newAST), <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LikeVue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">age</span>: <span class="hljs-number">18</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>源码</tag>
      
      <tag>渲染模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matter.js之Bodies刚体工厂模块</title>
    <link href="/2022/03/27/Matter-js%E4%B9%8BBodies%E5%88%9A%E4%BD%93%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/03/27/Matter-js%E4%B9%8BBodies%E5%88%9A%E4%BD%93%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p><strong>Matter.Bodies</strong>模块包含创建常见配置的刚体模型的工厂方法。（例如，矩形，圆形和其他多边形）。</p><span id="more"></span><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="circle"><a href="#circle" class="headerlink" title="circle"></a>circle</h2><div class="note note-info">            <p>Matter.Bodies.<strong>circle</strong>(x, y, radius, [options], [maxSides]) → <em>Body</em></p>          </div><p>创建一个新的圆刚体模型，其中包含一个圆形质体。通过给定的选项参数对象<em>options</em>，您可以覆盖默认值。有关详细信息，请参阅<strong>Matter.Body</strong>模块的属性部分。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>number</td><td></td><td>圆心的x坐标</td></tr><tr><td>y</td><td>number</td><td></td><td>圆心的y坐标</td></tr><tr><td>radius</td><td>number</td><td></td><td>圆的半径</td></tr><tr><td>options</td><td>object</td><td></td><td>刚体选项</td></tr><tr><td>maxSides</td><td>number</td><td></td><td>最大边数</td></tr></tbody></table><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个点数组，其中每个点是一个向量。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Body</td><td>Body</td><td></td></tr></tbody></table><h2 id="fromVertices"><a href="#fromVertices" class="headerlink" title="fromVertices"></a>fromVertices</h2><div class="note note-info">            <p>Matter.Bodies.<strong>fromVertices</strong>(x, y, vertexSets, [options], [flagInternal&#x3D;false], [removeCollinear&#x3D;0.01], [minimumArea&#x3D;10], [removeDuplicatePoints&#x3D;0.01]) → <em>Body</em></p>          </div><p>基于顶点集创建一个复合体的实用工具。<br><em>注意</em>：要选择自动解决凹面积的复合体，必须先安装poly-decomp包，并且查看提供的Common.setDecomp方法，否则将使用每个顶点集的凸包。<br>生成的顶点将重新定位关于质心，并且偏移，以便<strong>body.position</strong>对应于此点。<br>如果需要的话，可以通过从原始输入边界中减去<strong>body.bounds</strong>来找到偏移。要移动质心，请参阅Body.setCentre。<br>请注意，自动解决凹面积的复合体结果不是总是最佳的。为了获得最佳结果，请首先尽可能简化输入顶点。默认情况下，此方法将应用一些额外简化来帮助。<br>一些输出也可能需要在最后处理以保持其容错性。特别是，一些部分可能需要重叠以避免碰撞间隙。薄的部分和锐利的点应该避免或删除，如果可能的话。<br>选项参数对象指定要覆盖默认值的任何<strong>Matter.Body</strong>属性。<br>请参见<strong>Matter.Body</strong>模块的属性部分以获取更多信息。</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>number</td><td></td><td>x坐标</td></tr><tr><td>y</td><td>number</td><td></td><td>y坐标</td></tr><tr><td>vertexSets</td><td>array</td><td></td><td>顶点集</td></tr><tr><td>options</td><td>object</td><td></td><td>刚体选项</td></tr><tr><td>flagInternal</td><td>boolean</td><td>false</td><td>是否为内部顶点</td></tr><tr><td>removeCollinear</td><td>number</td><td>0.01</td><td>删除具有相同值的顶点</td></tr><tr><td>minimumArea</td><td>number</td><td>10</td><td>删除小于此面积的复合体</td></tr><tr><td>removeDuplicatePoints</td><td>number</td><td>0.01</td><td>删除重复点</td></tr></tbody></table><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个点数组，其中每个点是一个向量。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Body</td><td>Body</td><td></td></tr></tbody></table><h2 id="polygon"><a href="#polygon" class="headerlink" title="polygon"></a>polygon</h2><div class="note note-info">            <p>Matter.Bodies.<strong>polygon</strong>(x, y, sides, radius, [options]) → <em>Body</em></p>          </div><p>创建一个新的刚体模型，其中包含给定边数的常规多边形舱体。选项参数是一个对象，它指定任何要覆盖默认值的任何属性。请参阅<strong>Matter.Body</strong>模块的属性部分以获取更多信息。</p><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>number</td><td></td><td>x坐标</td></tr><tr><td>y</td><td>number</td><td></td><td>y坐标</td></tr><tr><td>sides</td><td>number</td><td></td><td>边数</td></tr><tr><td>radius</td><td>number</td><td></td><td>半径</td></tr><tr><td>options</td><td>object</td><td></td><td>刚体选项</td></tr></tbody></table><h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个点数组，其中每个点是一个向量。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Body</td><td>Body</td><td></td></tr></tbody></table><h2 id="rectangle"><a href="#rectangle" class="headerlink" title="rectangle"></a>rectangle</h2><div class="note note-info">            <p>Matter.Bodies.<strong>rectangle</strong>(x, y, width, height, [options]) → <em>Body</em></p>          </div><p>创建一个新的矩形刚体模型，其中包含给定宽度和高度的矩形舱体。选项参数是一个对象，它指定任何要覆盖默认值的任何属性。请参阅<strong>Matter.Body</strong>模块的属性部分以获取更多信息。</p><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>number</td><td></td><td>x坐标</td></tr><tr><td>y</td><td>number</td><td></td><td>y坐标</td></tr><tr><td>width</td><td>number</td><td></td><td>宽度</td></tr><tr><td>height</td><td>number</td><td></td><td>高度</td></tr><tr><td>options</td><td>object</td><td></td><td>刚体选项</td></tr></tbody></table><h3 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个点数组，其中每个点是一个向量。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Body</td><td>Body</td><td></td></tr></tbody></table><h2 id="trapezoid"><a href="#trapezoid" class="headerlink" title="trapezoid"></a>trapezoid</h2><div class="note note-info">            <p>Matter.Bodies.<strong>trapezoid</strong>(x, y, width, height, slope, [options]) → <em>Body</em></p>          </div><p>创建一个新的梯形刚体模型，其中包含给定宽度和高度的梯形舱体。选项参数是一个对象，它指定任何要覆盖默认值的任何属性。请参阅<strong>Matter.Body</strong>模块的属性部分以获取更多信息。</p><h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>number</td><td></td><td>x坐标</td></tr><tr><td>y</td><td>number</td><td></td><td>y坐标</td></tr><tr><td>width</td><td>number</td><td></td><td>宽度</td></tr><tr><td>height</td><td>number</td><td></td><td>高度</td></tr><tr><td>slope</td><td>number</td><td></td><td>坡度</td></tr><tr><td>options</td><td>object</td><td></td><td>刚体选项</td></tr></tbody></table><h3 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个点数组，其中每个点是一个向量。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Body</td><td>Body</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>matter.js</category>
      
      <category>Bodies</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matter.js</tag>
      
      <tag>Bodies</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matter.js之Axes坐标轴模块</title>
    <link href="/2022/03/27/Matter-js%E4%B9%8BAxes%E5%9D%90%E6%A0%87%E8%BD%B4%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/03/27/Matter-js%E4%B9%8BAxes%E5%9D%90%E6%A0%87%E8%BD%B4%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>Matter.js提供了一个操作坐标轴的一个模块——<strong>Matter.Axes</strong>，包含了创建和操作坐标轴的设置的一系列方法。</p><span id="more"></span><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="fromVertices"><a href="#fromVertices" class="headerlink" title="fromVertices"></a>fromVertices</h2><div class="note note-info">            <p>Matter.Axes.<strong>fromVertices</strong>(vertices) → <em>Axes</em></p>          </div><p>创建一个新的坐标轴集合，从给定的顶点。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>vertices</td><td>Vertices</td><td></td><td>顶点</td></tr></tbody></table><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个点数组，其中每个点是一个向量。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Axes</td><td>Axes</td><td></td></tr></tbody></table><h2 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h2><div class="note note-info">            <p>Matter.Axes.<strong>rotate</strong>(axes, angle)</p>          </div><p>旋转一组坐标轴，通过给定的角度。</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>axes</td><td>Axes</td><td></td><td>坐标轴</td></tr><tr><td>angle</td><td>number</td><td></td><td>旋转角度，以弧度为单位</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>matter.js</category>
      
      <category>Axes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matter.js</tag>
      
      <tag>Axes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码研究之数据驱动（二）</title>
    <link href="/2022/03/25/Vue%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/03/25/Vue%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>对虚拟dom有一种猜想，那就是将节点用json表示，然后再写一个render函数进行渲染，感觉vue的源码就是这样的。<br>我研究vue源码主要的目的就是想要制作一个符合我自己想法的低代码的设计器，可以使我的项目变得更加适合更多人玩，让他们也体验到前端开发的乐趣。<br>本次将实现把之前的内容使用构造函数来实现，使用的时候就和vue一样只要创建一个对象，调用构造函数就可以实现数据模板替换的功能。</p><span id="more"></span><h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><p>写个名字叫LikeVue的函数，接收一个options，用来传入接收的参数，这里应当知道一个原则</p><ul><li>内部数据用_开头，只读数据用$开头<figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">LikeVue</span>(<span class="hljs-params">options</span>) &#123;<br><span class="hljs-comment">// 内部数据用_开头，只读数据用$开头</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span> = options.<span class="hljs-property">data</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(options.<span class="hljs-property">el</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_el</span> = options.<span class="hljs-property">el</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_parent</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">parentNode</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_methods</span> = options.<span class="hljs-property">methods</span>;<br><span class="hljs-comment">// this.compiler(this.$el, this._data);</span><br><span class="hljs-comment">// this.update()</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>();<br>&#125;<br></code></pre></td></tr></table></figure>这样就把options取到了，并且放到了_data里面。其中使用_parent主要是用来保存父节点的，这样在更新<strong>替换</strong>节点的时候就可以直接用<em>this._parent</em>来操作了。这里还使用_methods来保存写的method，用来保存写的方法，当然现在是用不到的，在后面才会用到。<br>接下来就是写三个函数，分别是compiler，update，render，其中compiler是用来把模板替换成真实的dom，update是用来更新dom，render是用来渲染dom。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 编译</span><br><span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">compiler</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">tmpNode, data</span>) &#123;<br><span class="hljs-keyword">let</span> rPattern = <span class="hljs-regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>;<br><span class="hljs-keyword">let</span> childNodes = tmpNode.<span class="hljs-property">childNodes</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; childNodes.<span class="hljs-property">length</span>; index++) &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * nodeType 1:元素节点 3:文本节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (childNodes[index].<span class="hljs-property">nodeType</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compiler</span>(childNodes[index], data);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (childNodes[index].<span class="hljs-property">nodeType</span> == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">let</span> txt = childNodes[index].<span class="hljs-property">nodeValue</span>;<br>txt = txt.<span class="hljs-title function_">replace</span>(rPattern, <span class="hljs-keyword">function</span>(<span class="hljs-params">match, key</span>) &#123;<br>key = key.<span class="hljs-title function_">trim</span>();<br><span class="hljs-keyword">let</span> value = <span class="hljs-title function_">getPropByPath</span>(data, key);<br><span class="hljs-keyword">return</span> value;<br>&#125;);<br>childNodes[index].<span class="hljs-property">nodeValue</span> = txt;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 渲染</span><br><span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> realDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_el</span>).<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compiler</span>(realDom, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">update</span>(realDom);<br>&#125;<br><span class="hljs-comment">// 更新</span><br><span class="hljs-title class_">LikeVue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">realDom</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_parent</span>.<span class="hljs-title function_">replaceChild</span>(realDom, <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>);<br>&#125;<br></code></pre></td></tr></table></figure>这样就把整个流程分为了三个阶段，编译，渲染，更新。</li></ul><h1 id="读取多级属性"><a href="#读取多级属性" class="headerlink" title="读取多级属性"></a>读取多级属性</h1><p>现在来解决一个上次尚未解决的问题，就是在读取prop的时候，就简单的用了*data[key]*的方式，这个方式其实是个简单的方式，太简单了，以至于无法读取多级属性，比如这么一个对象，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">address</span>: &#123;<br>        <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,<br>        <span class="hljs-attr">street</span>: <span class="hljs-string">&#x27;朝阳&#x27;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我如果要读取<em>obj.address.street</em>就不能读取到对应的数据了，因此我们需要一个能够读取多级属性的方法。<br>要想做到这件事，最基本的想法应该是将这个字符串拆分成数组，然后逐级读取，这样就可以读取到多级属性了。这应该就是一般能够想到的办法，不过还有其他想法，就比如用栈来实现读取多级属性。我这里的话给出三种实现，用栈实现的方法后面再给出，这三种是用js的方法做的，也有用到函数<em>柯里化</em>的方法做的。因此很有学习的必要。</p><h2 id="利用es6的reduce实现"><a href="#利用es6的reduce实现" class="headerlink" title="利用es6的reduce实现"></a>利用es6的reduce实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPropByPath</span>(<span class="hljs-params">obj, path</span>) &#123;<br>    <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc[cur], obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">prev,cur,index,arr</span>)&#123;<br>...<br>&#125;, init);<br></code></pre></td></tr></table></figure><p><em>arr</em> 表示原数组；<br><em>prev</em> 表示上一次调用回调时的返回值，或者初始值 init;<br><em>cur</em> 表示当前正在处理的数组元素；<br><em>index</em> 表示当前正在处理的数组元素的索引，若提供 init 值，则索引为0，否则索引为1；<br><em>init</em> 表示初始值。<br>方法很快，很容易就能解决这个问题，推荐使用。</p><h2 id="利用函数柯里化实现"><a href="#利用函数柯里化实现" class="headerlink" title="利用函数柯里化实现"></a>利用函数柯里化实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createGetValueByPath</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-keyword">let</span> paths = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getPropByPath</span> (obj) &#123;<br>        <span class="hljs-keyword">let</span> res = obj;<br>        <span class="hljs-keyword">let</span> prop;<br>        <span class="hljs-keyword">while</span>(prop = paths.<span class="hljs-title function_">shift</span>()) &#123;<br>            res = res[prop];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一种从视频里面学到的方法，减少了函数调用次数，提高了性能。主要用在做优化的地方，vue的源码中有多处使用该方法来优化，也正是因为这样，所以vue的性能从来不拉跨，因此也是要学会的一种方法。<br>这种方法调用的时候与上面的方法是稍微有点区别的，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> getPropByPath = <span class="hljs-title function_">createGetValueByPath</span>(<span class="hljs-string">&#x27;address.city&#x27;</span>);<br><span class="hljs-keyword">let</span> prop = <span class="hljs-title function_">getPropByPath</span>(obj);<br></code></pre></td></tr></table></figure><h2 id="函数柯里化的简化版"><a href="#函数柯里化的简化版" class="headerlink" title="函数柯里化的简化版"></a>函数柯里化的简化版</h2><p>最后是函数柯里化的简化版，省去了创建函数的过程，因此可以直接调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPropByPath</span> (obj) &#123;<br>    <span class="hljs-keyword">let</span> paths = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    <span class="hljs-keyword">let</span> res = obj;<br>    <span class="hljs-keyword">let</span> prop;<br>    <span class="hljs-keyword">while</span>(prop = paths.<span class="hljs-title function_">shift</span>()) &#123;<br>        res = res[prop];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的话纯纯属于一种笨办法了，如果我不知道*reduce()<em>的话我第一个想到的就会是这个办法，相比之下，还是</em>reduce()*更加简洁明了。</p><h1 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h1><p>虚拟DOM主要是考虑到两个问题</p><ol><li>如何把一个虚拟DOM转换成真实DOM</li><li>如何把一个真实DOM转换成虚拟DOM<br>对于一个学过后端技术的人来说，理解这些会比较方便，在Java中，如果你想把一个对象转成json或者把json转成对象，如果你有经验的话，一定知道有一种技术叫序列化，在这里的话我觉得应该叫这种技术“序列化”会很贴切。一个对象，很容易抽象成json数据，再转成字符串，这样就非常有利于存储和操作了。<br>当然，这种直接转成json的效果是不存在的，因此只能是我们自己写，不然也不会有Vue的发明了。<br><img src="/../images/20220325/3.jpg" alt="对象能转json 但是dom节点却不可以"><h2 id="虚拟DOM的实现"><a href="#虚拟DOM的实现" class="headerlink" title="虚拟DOM的实现"></a>虚拟DOM的实现</h2>首先是将DOM节点转化成json<br>例如，<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Hello&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>将该节点转化成json以后就成了<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 1 元素 ， 3 文本节点 对应nodeType</span><br>    tag<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;div&quot;</span><span class="hljs-punctuation">,</span><br>    title<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>如果是文本节点的话<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is a paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>将这个标签转化为json<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 1 元素 ， 3 文本节点 对应nodeType</span><br>    tag<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;p&quot;</span><span class="hljs-punctuation">,</span><br>    content<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;this is a paragraph&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>当然，这目前来说只是我的一个想法，如果有多级节点，例如<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>将其转为json<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>    tag<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;div&quot;</span><span class="hljs-punctuation">,</span><br>    children<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>            content<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hello 1&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>这样基本上就可以实现虚拟DOM了，如果是虚拟DOM要转成真实DOM的话，那就将这个过程反过来就好了。<h2 id="虚拟DOM的实现-1"><a href="#虚拟DOM的实现-1" class="headerlink" title="虚拟DOM的实现"></a>虚拟DOM的实现</h2>为了实现这个虚拟DOM，我先是抽象了一个节点类——VNode<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VNode</span>&#123;<br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> tag  标签名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> children 子节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text 文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">tag, data, children, text, type</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span> = tag &amp;&amp; tag.<span class="hljs-title function_">toLowerCase</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span> = [];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span> = text;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = type;<br>    &#125;<br>    <span class="hljs-title function_">appendChild</span>(<span class="hljs-params">vnode</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(vnode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>该类的type就是元素的nodeType，根据他判断节点类型，children是子节点的数组，text是文本节点的内容，tag是标签名，data是保存元素属性的一个数组。<br>然后写了个根据节点来生成VNode的函数——createVNode，用递归来实现将真实DOM转换成虚拟的VNode，也就是虚拟DOM。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 使用递归遍历DOM元素，生成虚拟DOM，</span><br><span class="hljs-comment"> * Vue使用的栈结构，后面学习到的时候写</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createVNode</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-keyword">let</span> nodeType = node.<span class="hljs-property">nodeType</span>;<br>    <span class="hljs-keyword">let</span> _vnode = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">// node.attributes是个伪数组，因此需要将其转为数组</span><br>        <span class="hljs-keyword">let</span> _attrObj = &#123;&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; node.<span class="hljs-property">attributes</span>.<span class="hljs-property">length</span>; i++)&#123;<br>            _attrObj[node.<span class="hljs-property">attributes</span>[i].<span class="hljs-property">name</span>] = node.<span class="hljs-property">attributes</span>[i].<span class="hljs-property">value</span>;<br>        &#125;<br>        _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(node.<span class="hljs-property">tagName</span>, _attrObj, [], <span class="hljs-literal">undefined</span>, nodeType);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; node.<span class="hljs-property">childNodes</span>.<span class="hljs-property">length</span>; i++)&#123;<br>            _vnode.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createVNode</span>(node.<span class="hljs-property">childNodes</span>[i]));<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">3</span>)&#123;<br>        _vnode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VNode</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, node.<span class="hljs-property">textContent</span>, nodeType);<br>    &#125;<br>    <span class="hljs-keyword">return</span> _vnode;<br>&#125;<br></code></pre></td></tr></table></figure>然后写了个demo来测试一下效果。</li></ol><p><strong>html部分</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ul li&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>hello 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>js部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> root = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>);<br><span class="hljs-keyword">let</span> vroot = <span class="hljs-title function_">createVNode</span>(root);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vroot);<br></code></pre></td></tr></table></figure><p><strong>结果</strong><br><img src="/../images/20220325/4.jpg" alt="输出id为root的节点的虚拟DOM"><br>可以看到确实是成功了，但是有个小问题，有的节点中间夹杂着<em>\n</em>节点，这个问题后面在解决他，暂时先不管。<br>然后写了个将虚拟DOM转成真实DOM的函数——parseVNode，用递归来实现将虚拟DOM转换成真实DOM，也就是真实DOM。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseVNode</span>(<span class="hljs-params">vnode</span>) &#123;<br>    <span class="hljs-keyword">let</span> nodeType = vnode.<span class="hljs-property">type</span>;<br>    <span class="hljs-keyword">let</span> _node = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">1</span>)&#123;<br>        _node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(vnode.<span class="hljs-property">tag</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> vnode.<span class="hljs-property">data</span>)&#123;<br>            _node.<span class="hljs-title function_">setAttribute</span>(key, vnode.<span class="hljs-property">data</span>[key]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; vnode.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>; i++)&#123;<br>            _node.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">parseVNode</span>(vnode.<span class="hljs-property">children</span>[i]));<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nodeType === <span class="hljs-number">3</span>)&#123;<br>        _node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(vnode.<span class="hljs-property">text</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> _node;<br>&#125;<br></code></pre></td></tr></table></figure><p>传入一个VNode类型的对象，通过遍历虚拟DOM来创建元素，并返回一个真实DOM元素。<br>同样，也是写个demo测试一下效果，就用上面的例子。<br><strong>html部分</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ul li&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>hello 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>js部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> root = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#root&quot;</span>);<br><span class="hljs-keyword">let</span> vroot = <span class="hljs-title function_">createVNode</span>(root);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vroot);<br></code></pre></td></tr></table></figure><p><strong>结果</strong><br><img src="/../images/20220325/5.jpg" alt="将获取到的root的虚拟DOM转化成真实的DOM，并输出到控制台"><br>可以看出，输出的节点与root节点一模一样，这个parseVNode就算完成了。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>源码</tag>
      
      <tag>数据驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码研究之数据驱动（一）</title>
    <link href="/2022/03/25/Vue%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/03/25/Vue%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>研究vue源码，造轮子，最终模仿vue做出一个自动替换节点内容的效果，主要目的是实现一个简单的模仿vue的数据驱动。<br>这部分我之前想过用dom的方式来实现，写过类似的demo，但是没有保存，现在好好写一写，内容尽可能全面，把握每一个细节。</p><span id="more"></span><h1 id="Vue的数据驱动流程"><a href="#Vue的数据驱动流程" class="headerlink" title="Vue的数据驱动流程"></a>Vue的数据驱动流程</h1><ol><li>获得模板（模板中有数据的占位）</li><li>利用Vue构造函数中所提供的数据来替换占位符，得到渲染后的模板</li><li>将渲染后的模板<strong>替换</strong>到页面中<h1 id="节点渲染"><a href="#节点渲染" class="headerlink" title="节点渲染"></a>节点渲染</h1>vue构造函数前后用console.log来输出root节点，来检查root节点是否是原来的节点<figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#root&#x27;</span>));<br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#root&#x27;</span>));<br></code></pre></td></tr></table></figure><img src="/../images/20220325/1.jpg" alt="鼠标放到第一个输出的节点上"><br><img src="/../images/20220325/2.jpg" alt="鼠标放到第二个输出的节点上"><br>当鼠标放到第二个输出的节点上的时候，网页节点会高亮，而开发者工具的效果是如果这个节点在界面上的话，鼠标放在代码上会高亮，此时第一个节点的时候并没有高亮，因此，发现输出的节点是不同的（不是同一个节点），这是因为Vue在渲染的时候，会把原来的节点替换掉，所以第二个输出的节点是不同的。</li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>获取到根节点以后，使用object的深拷贝来复制一份根节点，然后用compiler函数来替换掉模板中的数据，最后把替换后的节点替换掉原来的节点。<br>compiler函数是个利用递归实现的替换节点内容的函数，用for循环获取到节点内容以后，利用正则表达式匹配花括号内容，然后替换掉内容<br>compiler实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compiler</span>(<span class="hljs-params">template, data</span>) &#123;<br><span class="hljs-keyword">let</span> childNodes = template.<span class="hljs-property">childNodes</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; childNodes.<span class="hljs-property">length</span>; index++) &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * nodeType 1:元素节点 3:文本节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (childNodes[index].<span class="hljs-property">nodeType</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-title function_">compiler</span>(childNodes[index], data);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (childNodes[index].<span class="hljs-property">nodeType</span> == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">let</span> txt = childNodes[index].<span class="hljs-property">nodeValue</span>;<br>txt = txt.<span class="hljs-title function_">replace</span>(rPattern, <span class="hljs-keyword">function</span>(<span class="hljs-params">match, key</span>) &#123;<br>key = key.<span class="hljs-title function_">trim</span>();<br><span class="hljs-keyword">let</span> value = data[key];<br><span class="hljs-keyword">return</span> value;<br>&#125;);<br>childNodes[index].<span class="hljs-property">nodeValue</span> = txt;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我用data对象来表示vue中的data，然后使用compiler来编译模板，把数据填充进去，这样就实现和vue差不多的模板功能了。<br>下面是我的代码实现<br><strong>js部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#root&#x27;</span>));<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 步骤拆解</span><br><span class="hljs-comment"> * 1.拿到模板</span><br><span class="hljs-comment"> * 2.拿到数据</span><br><span class="hljs-comment"> * 3.结合数据，得到dom元素</span><br><span class="hljs-comment"> * 4.替换root节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> rPattern = <span class="hljs-regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>;<br><span class="hljs-keyword">let</span> tmpNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#root&#x27;</span>);<br><span class="hljs-keyword">let</span> generateNode = tmpNode.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">let</span> data = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;;<br><span class="hljs-comment">// 一般用递归实现</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compiler</span>(<span class="hljs-params">template, data</span>) &#123;<br><span class="hljs-keyword">let</span> childNodes = template.<span class="hljs-property">childNodes</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; childNodes.<span class="hljs-property">length</span>; index++) &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * nodeType 1:元素节点 3:文本节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (childNodes[index].<span class="hljs-property">nodeType</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-title function_">compiler</span>(childNodes[index], data);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (childNodes[index].<span class="hljs-property">nodeType</span> == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">let</span> txt = childNodes[index].<span class="hljs-property">nodeValue</span>;<br>txt = txt.<span class="hljs-title function_">replace</span>(rPattern, <span class="hljs-keyword">function</span>(<span class="hljs-params">match, key</span>) &#123;<br>key = key.<span class="hljs-title function_">trim</span>();<br><span class="hljs-keyword">let</span> value = data[key];<br><span class="hljs-keyword">return</span> value;<br>&#125;);<br>childNodes[index].<span class="hljs-property">nodeValue</span> = txt;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-title function_">compiler</span>(generateNode, data);<br>tmpNode.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">replaceChild</span>(generateNode, tmpNode);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#root&#x27;</span>));<br></code></pre></td></tr></table></figure><p><strong>html部分</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/20220325/1.jpg" alt="鼠标放到第一个输出的节点上"><br><img src="/../images/20220325/2.jpg" alt="鼠标放到第二个输出的节点上"><br>可以看到效果和vue是一模一样的。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>源码</tag>
      
      <tag>数据驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matter.js之给box添加键盘控制</title>
    <link href="/2022/03/22/Matter-js%E4%B9%8B%E7%BB%99box%E6%B7%BB%E5%8A%A0%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/03/22/Matter-js%E4%B9%8B%E7%BB%99box%E6%B7%BB%E5%8A%A0%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>Matter.js是个开源的2D物理引擎，它提供了一个简单的API，可以让我们以更简单的方式来操作物理引擎。但是却没有提供一个简单的控制器，我们需要自己写一个控制器，来控制画布中的物体运动。本文章基于上次制作的demo，给box添加键盘控制。</p><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>代码写的默认变量都是暴露在外面的，因此打算直接用js的按键检测的方式实现键盘控制，这样就可以让我们的box自由移动了。<br>首先需要认识一下matter.js提供的操作对象的方法</p><ul><li>力<br>每个body都有一个force属性，用来赋予该对象一个力，由于本引擎是个2D引擎，所以用的是vector2，也就是二维向量。<br><img src="/../images/20220322/force%E5%B1%9E%E6%80%A7.png" alt="force属性"><br>force属性本身的值就是一个vector2类型的，该类型表示一个二维向量，向量有两个属性，x和y，可以表示力的方向，这里如果有什么不懂的建议补一下高中数学平面几何，内容很简单。<br>举个例子，我们可以把一个body的force属性设置为：<figure class="highlight ini"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">body.force</span> = &#123;x: <span class="hljs-number">1</span>, y: <span class="hljs-number">0</span>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>表示的就是一个平行与x轴且方向为正方向（右侧）的向量，其中y值为1，表示力的大小.</li></ul><p><em>关于平面坐标系，后面会详细解析，在这里只为实现功能</em><br>这样的话只要判断按键的代码，然后赋值不同的向量给对象的force属性就可以实现鼠标控制对象运动的功能了。<br>加下来就是我的代码了，代码比较简单，一目了然</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 简单的按键响应</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>event.<span class="hljs-title function_">preventDefault</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;event&quot;</span>,event);<br><span class="hljs-keyword">switch</span>(event.<span class="hljs-property">key</span>)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ArrowUp&quot;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot; &quot;</span>:<br>boxB.<span class="hljs-property">force</span> = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">y</span>:-<span class="hljs-number">0.2</span>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ArrowDown&quot;</span>:<br>boxB.<span class="hljs-property">force</span> = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ArrowLeft&quot;</span>:<br>boxB.<span class="hljs-property">force</span> = &#123;<span class="hljs-attr">x</span>:-<span class="hljs-number">0.1</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;ArrowRight&quot;</span>:<br>boxB.<span class="hljs-property">force</span> = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">0.1</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/../images/20220322/%E6%95%88%E6%9E%9C.png" alt="运行效果"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>matter.js</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matter.js</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matter.js之获取鼠标选中的对象</title>
    <link href="/2022/03/22/Matter-js%E4%B9%8B%E8%8E%B7%E5%8F%96%E9%BC%A0%E6%A0%87%E9%80%89%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/03/22/Matter-js%E4%B9%8B%E8%8E%B7%E5%8F%96%E9%BC%A0%E6%A0%87%E9%80%89%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>由于Matter.js本身未提供鼠标单击获取到所单击的对象的方法，所以需要自己写一个，在翻阅了大量的官方demo和源码以后，我发现当拖拽的时候会获取到当前所点击的对象，由此我仿照他的方式写出了一个获取鼠标选中的对象的方法，这样就可以在拖拽的时候获取到当前所点击的对象了。</p><span id="more"></span><div class="note note-success">            <p>talk is cheap, show me the code.</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取world里面的所有bodies</span><br><span class="hljs-keyword">let</span> world = engine.<span class="hljs-property">world</span>;<br><span class="hljs-keyword">let</span> bodies = world.<span class="hljs-property">bodies</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bodies&#x27;</span>,bodies);<br><span class="hljs-comment">// 查看当前点击的点是否在对象里面</span><br><span class="hljs-keyword">let</span> current_node = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;bodies.<span class="hljs-property">length</span>;i++)&#123;<br>body = bodies[i];<br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Bounds</span>.<span class="hljs-title function_">contains</span>(body.<span class="hljs-property">bounds</span>, mouse.<span class="hljs-property">position</span>))&#123;<br>current_node = body;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;body&quot;</span>,body);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><ol><li>获取world里面的所有bodies</li><li>遍历所有的body，检测当前点击的点是否在对象里面</li><li>如果在，则获取当前对象</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>matter.js</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matter.js</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matter.js之Svg模块</title>
    <link href="/2022/03/20/Matter-js%E4%B9%8BSvg%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/03/20/Matter-js%E4%B9%8BSvg%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>Matter.Svg模块包含了将SVG图像转换为点数组的方法。<br>要使用此模块，还需要<a href="https://github.com/progers/pathseg">SVGPathSeg polyfill</a></p><span id="more"></span><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="pathToVertices"><a href="#pathToVertices" class="headerlink" title="pathToVertices"></a>pathToVertices</h2><div class="note note-info">            <p>Matter.Svg.<strong>pathToVertices</strong>(path, [sampleLength&#x3D;15]) → <em>Vector[]</em></p>          </div><p>将一个SVG路径转化为一个点数组。如果输入路径形成了凹凸形状，使用前必须将结果分解为凸部分。请参阅<strong>Bodies.fromVertices</strong>，它提供了支持凹凸形状的支持。注意，这个函数不能保证支持复杂路径（例如，具有孔的）。您必须在新版本的浏览器上加载<strong>pathseg.js</strong>。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>SVGPathElement</td><td></td><td>SVG路径</td></tr><tr><td>sampleLength</td><td>number</td><td>15</td><td>每个点的采样长度，以像素为单位</td></tr></tbody></table><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个点数组，其中每个点是一个向量。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>vertices</td><td><em>Vector[]</em></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>matter.js</category>
      
      <category>Svg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matter.js</tag>
      
      <tag>Svg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matter.js之Engine</title>
    <link href="/2022/03/20/Matter-js%E4%B9%8BEngine/"/>
    <url>/2022/03/20/Matter-js%E4%B9%8BEngine/</url>
    
    <content type="html"><![CDATA[<p><strong>Matter.Engine</strong>模块包含了创建和操作引擎的方法。引擎是管理更新模拟世界的一个控制器。</p><span id="more"></span><p>请参阅Matter.Runner以获得可选的游戏循环工具。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><div class="note note-info">            <p>Matter.Engine.<strong>create</strong>([options]) → <em>Engine</em></p>          </div><p>创建一个新的引擎。选项参数是一个对象，它指定任何你想覆盖默认值的属性。所有属性都有默认值，并且大多数都是根据其他属性自动计算的。请参阅下面的属性部分以了解您可以通过选项对象传递的所有属性。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>Object</td><td>{}</td><td>可选的选项对象</td></tr></tbody></table><p>以下是options的默认值</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> options = &#123;<br>    <span class="hljs-attr">positionIterations</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">velocityIterations</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">constraintIterations</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">enableSleeping</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">events</span>: [],<br>    <span class="hljs-attr">plugin</span>: &#123;&#125;,<br>    <span class="hljs-attr">gravity</span>: &#123;<br>        <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">y</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">scale</span>: <span class="hljs-number">0.001</span><br>    &#125;,<br>    <span class="hljs-attr">timing</span>: &#123;<br>        <span class="hljs-attr">timestamp</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">timeScale</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">lastDelta</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">lastElapsed</span>: <span class="hljs-number">0</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>返回一个新的引擎对象。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><em>engine</em></td><td><strong>Engine</strong></td><td>引擎对象</td></tr></tbody></table><hr><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><div class="note note-info">            <p>Matter.Engine.<strong>clear</strong>(engine)</p>          </div><p>清除引擎的pairs和detector。</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>engine</td><td><strong>Engine</strong></td></tr></tbody></table><hr><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><div class="note note-info">            <p>Matter.Engine.<strong>merge</strong>(engineA, engineB)</p>          </div><p>合并两个引擎，保留engineA的配置，但是替换engineB的world。</p><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>engineA</td><td><strong>Engine</strong></td></tr><tr><td>engineB</td><td><strong>Engine</strong></td></tr></tbody></table><hr><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><div class="note note-info">            <p>Matter.Engine.<strong>update</strong>(engine, [delta&#x3D;16.666], [correction&#x3D;1])</p>          </div><p>模拟时间前进delta毫秒。correction参数是一个可选的数字，它指定要应用于更新的时间纠正因子。这可以帮助改善模拟在delta在更新中变化的情况下的精确性。correction的值定义为delta &#x2F; lastDelta，即delta &#x2F; lastDelta的百分比改变。因此值总是1（无纠正），当delta常数（或者当不需要纠正时，这是默认值）。请参阅<strong>Time Corrected Verlet</strong>文献以了解更多信息。（这个文献正在找）<br>触发<strong>beforeUpdate</strong>和<strong>afterUpdate</strong>事件。触发<strong>collisionStart</strong>，<strong>collisionActive</strong>和<strong>collisionEnd</strong>事件。</p><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>engine</td><td><strong>Engine</strong></td><td></td></tr><tr><td>delta</td><td>Number</td><td>16.666</td></tr><tr><td>correction</td><td>Number</td><td>1</td></tr></tbody></table><hr><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><div class="note note-info">            <p>Matter.Engine.<strong>run</strong>(engine) <em>deprecated</em></p>          </div><p><strong>弃用</strong>：使用*Matter.Runner.run(engine)*代替<br><em>Runner.run</em>的弃用了的别名，使用Matter.Runner.run(engine)代替，并且参阅Matter.Runner以获得更多信息。</p><h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>engine</td><td><strong>Engine</strong></td></tr></tbody></table><hr><h1 id="属性-x2F-选项"><a href="#属性-x2F-选项" class="headerlink" title="属性&#x2F;选项"></a>属性&#x2F;选项</h1><p>下面的属性&#x2F;选项由<strong>Matter.Engine.create</strong>创建的对象指定，并且可以传递给它作为选项。</p><h3 id="constraintIterations"><a href="#constraintIterations" class="headerlink" title="constraintIterations"></a>constraintIterations</h3><div class="note note-success">            <p>engine.<strong>constraintIterations</strong> <em>Number</em></p>          </div><p>一个整数，它指定每次更新迭代的约束迭代数。值越高，模拟的质量越好，但是性能会受到影响。默认值为2，通常是足够的。<br><strong>默认值</strong>: <em>2</em></p><hr><h3 id="detector"><a href="#detector" class="headerlink" title="detector"></a>detector</h3><div class="note note-success">            <p>engine.<strong>detector</strong>     <em>Detector</em></p>          </div><p>一个<em>Matter.Detector</em>实例.<br><strong>默认值</strong>: <em>一个</em>Matter.Detector<em>实例.</em></p><hr><h3 id="enableSleeping"><a href="#enableSleeping" class="headerlink" title="enableSleeping"></a>enableSleeping</h3><div class="note note-success">            <p>engine.<strong>enableSleeping</strong>   <em>Boolean</em></p>          </div><p>指定是否允许Matter.Sleeping模块中的睡眠的标志。睡眠可以提高稳定性和性能，但是往往会影响精确度。<br><strong>默认值</strong>: <em>false</em></p><hr><h3 id="gravity"><a href="#gravity" class="headerlink" title="gravity"></a>gravity</h3><div class="note note-success">            <p>engine.<strong>gravity</strong>      <em>Object</em></p>          </div><p>对于engine.world中的所有bodies，应用重力。</p><hr><h3 id="gravity-scale"><a href="#gravity-scale" class="headerlink" title="gravity.scale"></a>gravity.scale</h3><div class="note note-success">            <p>engine.<strong>gravity.scale</strong>    <em>Object</em></p>          </div><p>重力缩放因子。<br><strong>默认值</strong>: <em>0.001</em></p><hr><h3 id="gravity-x"><a href="#gravity-x" class="headerlink" title="gravity.x"></a>gravity.x</h3><div class="note note-success">            <p>engine.<strong>gravity.x</strong>    <em>Object</em></p>          </div><p>重力x分量。<br><strong>默认值</strong>: <em>0</em></p><hr><h3 id="gravity-y"><a href="#gravity-y" class="headerlink" title="gravity.y"></a>gravity.y</h3><div class="note note-success">            <p>engine.<strong>gravity.y</strong>    <em>Object</em></p>          </div><p>重力y分量。<br><strong>默认值</strong>: <em>1</em></p><hr><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><div class="note note-success">            <p>engine.<strong>plugin</strong></p>          </div><p>用于存储特定插件的属性的一个对象。</p><hr><h3 id="positionIterations"><a href="#positionIterations" class="headerlink" title="positionIterations"></a>positionIterations</h3><div class="note note-success">            <p>engine.<strong>positionIterations</strong>   <em>Number</em></p>          </div><p>一个整数，它指定每次更新迭代的位置迭代数。值越高，模拟的质量越好，但是性能会受到影响。<br><strong>默认值</strong>: <em>6</em></p><hr><h3 id="timing"><a href="#timing" class="headerlink" title="timing"></a>timing</h3><div class="note note-success">            <p>engine.<strong>timing</strong>   <em>Object</em></p>          </div><p>An Object containing properties regarding the timing systems of the engine.<br>一个包含了与时间系统相关的属性的对象</p><hr><h3 id="timing-lastDelta"><a href="#timing-lastDelta" class="headerlink" title="timing.lastDelta"></a>timing.lastDelta</h3><div class="note note-success">            <p>engine.<strong>timing.lastDelta</strong>     <em>Number</em></p>          </div><p>表示在上次引擎更新中使用的delta值的一个<strong>整数</strong>。<br><strong>默认值</strong>: <em>0</em></p><hr><h3 id="timing-lastElapsed"><a href="#timing-lastElapsed" class="headerlink" title="timing.lastElapsed"></a>timing.lastElapsed</h3><div class="note note-success">            <p>engine.<strong>timing.lastElapsed</strong>   <em>Number</em></p>          </div><p>一个整数，表示上次引擎更新中所用的总执行时间，以毫秒为单位。它是在上次引擎更新[Engine.update]开始，到它结束时所用的时间。<br>这个值也包括了所有事件处理程序的执行时间。<br><strong>默认值</strong>: <em>0</em></p><hr><h3 id="timing-timeScale"><a href="#timing-timeScale" class="headerlink" title="timing.timeScale"></a>timing.timeScale</h3><div class="note note-success">            <p>engine.<strong>timing.timeScale</strong>     <em>Number</em></p>          </div><p>一个整数，它指定了所有物体的全局时间缩放因子。值为0将会冻结模拟。值为0.1将会产生一个慢动作效果。值为1.2将会产生一个加速效果。<br><strong>默认值</strong>: <em>1</em></p><hr><h3 id="timing-timestamp"><a href="#timing-timestamp" class="headerlink" title="timing.timestamp"></a>timing.timestamp</h3><div class="note note-success">            <p>engine.<strong>timing.timestamp</strong>     <em>Number</em></p>          </div><p>一个整数，它指定了当前模拟时间，以毫秒为单位。它在每次引擎更新[Engine.update]时，都会增加给定的delta参数。<br><strong>默认值</strong>: <em>0</em></p><hr><h3 id="velocityIterations"><a href="#velocityIterations" class="headerlink" title="velocityIterations"></a>velocityIterations</h3><div class="note note-success">            <p>engine.<strong>velocityIterations</strong>       <em>Number</em></p>          </div><p>一个整数，它指定了每次更新执行的速度迭代数。值越高，模拟的质量越好，但是性能会受到影响。<br><strong>默认值</strong>: <em>4</em></p><hr><h3 id="world"><a href="#world" class="headerlink" title="world"></a>world</h3><div class="note note-success">            <p>engine.<strong>world</strong>    <em>Composite</em></p>          </div><p>通过引擎模拟的所有物体，约束和其他组合的根Matter.Composite实例。<br><strong>默认值</strong>: <em>一个Matter.Composite实例</em></p><hr><h3 id="broadphase"><a href="#broadphase" class="headerlink" title="broadphase"></a>broadphase</h3><div class="note note-success">            <p>engine.<strong>broadphase</strong>   <em>Grid</em>  [<em>deprecated</em>]</p>          </div><p><strong>弃用</strong>: 被<code>engine.detector</code>替代。<br>现在是engine.grid的别名。<br><strong>默认值</strong>: <em>一个Matter.Grid实例</em></p><hr><h3 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h3><div class="note note-success">            <p>engine.<strong>grid</strong> <em>Grid</em>    [<em>deprecated</em>]</p>          </div><p><strong>弃用</strong>: 被<code>engine.detector</code>替代。<br>一个Matter.Grid实例。<br><strong>默认值</strong>: <em>一个Matter.Grid实例</em></p><hr><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>下面是Matter.Engine.create创建的对象发出的事件，并且接收使用Matter.Events.on订阅的对象接收。</p><h3 id="afterUpdate"><a href="#afterUpdate" class="headerlink" title="afterUpdate"></a>afterUpdate</h3><div class="note note-secondary">            <p>Events.on(engine, <strong>“afterUpdate”</strong>, callback)</p>          </div><p>触发在引擎更新和所有碰撞事件之后。</p><h4 id="回调参数-callback"><a href="#回调参数-callback" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event"><a href="#event" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><div class="note note-secondary">            <p>Events.on(engine, <strong>“beforeUpdate”</strong>, callback)</p>          </div><p>触发在引擎更新之前。</p><h4 id="回调参数-callback-1"><a href="#回调参数-callback-1" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event-1"><a href="#event-1" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr><h3 id="collisionActive"><a href="#collisionActive" class="headerlink" title="collisionActive"></a>collisionActive</h3><div class="note note-secondary">            <p>Events.on(engine, <strong>“collisionActive”</strong>, callback)</p>          </div><p>触发在引擎更新之后，提供一个当前tick中所有碰撞的对(如果有)的列表。</p><h4 id="回调参数-callback-2"><a href="#回调参数-callback-2" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event-2"><a href="#event-2" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>pairs</td><td>Pair[]</td><td>受影响对的列表</td></tr><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr><h3 id="collisionEnd"><a href="#collisionEnd" class="headerlink" title="collisionEnd"></a>collisionEnd</h3><div class="note note-secondary">            <p>Events.on(engine, <strong>“collisionEnd”</strong>, callback)</p>          </div><p>触发在引擎更新之后，提供一个当前tick中所有碰撞结束的对(如果有)的列表。</p><h4 id="回调参数-callback-3"><a href="#回调参数-callback-3" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event-3"><a href="#event-3" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>pairs</td><td>Pair[]</td><td>受影响对的列表</td></tr><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr><h3 id="collisionStart"><a href="#collisionStart" class="headerlink" title="collisionStart"></a>collisionStart</h3><div class="note note-secondary">            <p>Events.on(engine, <strong>“collisionStart”</strong>, callback)</p>          </div><p>触发在引擎更新之后，提供一个当前tick中所有碰撞开始的对(如果有)的列表。</p><h4 id="回调参数-callback-4"><a href="#回调参数-callback-4" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event-4"><a href="#event-4" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>pairs</td><td>Pair[]</td><td>受影响对的列表</td></tr><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>matter.js</category>
      
      <category>engine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matter.js</tag>
      
      <tag>engine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matter.js中的Runner详细解析</title>
    <link href="/2022/03/19/Matter-js%E4%B8%AD%E7%9A%84Runner%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/03/19/Matter-js%E4%B8%AD%E7%9A%84Runner%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><strong>Matter.Runner</strong>模块是一个可选的游戏循环，它在浏览器中给你一个可以自动更新Matter.Engine的工具。它是为了开发和调试而设计的，也可以用于简单的游戏。如果你使用自己的游戏循环，那么你不需要<strong>Matter.Runner</strong>模块。直接在你的循环中调用**Engine.update(engine, delta)**即可。</p><p>查看使用<a href="https://github.com/liabru/matter-js/tree/master/examples">例程</a></p><span id="more"></span><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="一个自写的基础Runner例程"><a href="#一个自写的基础Runner例程" class="headerlink" title="一个自写的基础Runner例程"></a>一个自写的基础Runner例程</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(run);<br>    <span class="hljs-title class_">Engine</span>.<span class="hljs-title function_">update</span>(engine, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>当使用node时，可以使用setInterval代替window.requestAnimationFrame</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Engine</span>.<span class="hljs-title function_">update</span>(engine, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>);<br>&#125;, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>);<br></code></pre></td></tr></table></figure><h3 id="使用系统提供的Matter-Runner"><a href="#使用系统提供的Matter-Runner" class="headerlink" title="使用系统提供的Matter.Runner"></a>使用系统提供的Matter.Runner</h3><p>Matter.js已经提供了一个默认的Runner，可以直接使用，他就是<strong>Matter.Runner</strong>。它是一个可选的游戏循环，在浏览器中给你一个可以自动更新<strong>Matter.Engine</strong>的工具。它是为了开发和调试而设计的，也可以用于简单的游戏。<br>查看<a href="http://brm.io/matter-js/docs/classes/Runner.html">文档</a></p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>最简单的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> engine = <span class="hljs-title class_">Engine</span>.<span class="hljs-title function_">create</span>();<br><span class="hljs-title class_">Runner</span>.<span class="hljs-title function_">run</span>(engine);<br></code></pre></td></tr></table></figure><p>同样你也可以用下面的方式写，将Runner申明在最前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> engine = <span class="hljs-title class_">Engine</span>.<span class="hljs-title function_">create</span>();<br><span class="hljs-keyword">var</span> runner = <span class="hljs-title class_">Runner</span>.<span class="hljs-title function_">create</span>();<br><span class="hljs-title class_">Runner</span>.<span class="hljs-title function_">run</span>(runner, engine);<br></code></pre></td></tr></table></figure><p>create的选项有很多参数，那些将在后面说明。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><div class="note note-info">            <p>Matter.Runner.<strong>create</strong>(options)</p>          </div><p>创建一个新的Runner。options参数是一个对象，它指定你想重写默认值的任何属性。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>options</td><td>Object</td></tr></tbody></table><hr><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><div class="note note-info">            <p>Matter.Runner.<strong>run</strong>(engine)</p>          </div><p>通过requestAnimationFrame递归调用render函数，连续不断的调用<strong>Matter.Runner.tick</strong>，更新<strong>Matter.Engine</strong>，。</p><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>engine</td><td>Engine</td></tr></tbody></table><hr><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><div class="note note-info">            <p>Matter.Runner.<strong>start</strong>(runner, engine)</p>          </div><p>给<strong>Runner.run</strong>起一个别名，可用一个变量来接收这个返回值，例如,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> runner = <span class="hljs-title class_">Runner</span>.<span class="hljs-title function_">start</span>(runner,engine);<br></code></pre></td></tr></table></figure><h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>runner</td><td>Runner</td></tr><tr><td>engine</td><td>Engine</td></tr></tbody></table><hr><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><div class="note note-info">            <p>Matter.Runner.<strong>stop</strong>(runner)</p>          </div><p>通过取消动画帧请求事件循环，结束<strong>Runner.run</strong>的执行。如果你只想暂停一段时间，可以使用<strong>engine.enabled</strong>代替。</p><h4 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>runner</td><td>Runner</td></tr></tbody></table><hr><h3 id="tick"><a href="#tick" class="headerlink" title="tick"></a>tick</h3><div class="note note-info">            <p>Matter.Runner.<strong>tick</strong>(runner, engine, time)</p>          </div><p>一个游戏循环工具，它更新引擎和渲染器一步（一个“tick”）。功能包括平滑的时间差调整，时间校正和固定或动态时间。如果你使用的是自己的循环，直接调用<strong>Engine.update(engine, delta)</strong></p><h4 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>runner</td><td>Runner</td></tr><tr><td>engine</td><td>Engine</td></tr><tr><td>time</td><td>Number</td></tr></tbody></table><h2 id="属性-x2F-选项"><a href="#属性-x2F-选项" class="headerlink" title="属性&#x2F;选项"></a>属性&#x2F;选项</h2><p>下面的属性&#x2F;选项是由Matter.Runner.create创建的对象指定的，可以作为参数传递给它。</p><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> options = &#123;<br>    <span class="hljs-attr">fps</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-attr">correction</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">deltaSampleSize</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-attr">counterTimestamp</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">frameCounter</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">deltaHistory</span>: [],<br>    <span class="hljs-attr">timePrev</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">timeScalePrev</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">frameRequestId</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">isFixed</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">enabled</span>: <span class="hljs-literal">true</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="delta"><a href="#delta" class="headerlink" title="delta"></a>delta</h3><div class="note note-success">            <p>runner.<strong>delta</strong> <em>Number</em></p>          </div><p>指定每次更新的时间间隔（以毫秒为单位）。如果<strong>engine.timing.isFixed</strong>设置为<strong>true</strong>，那么<strong>delta</strong>是固定的。如果它是<strong>false</strong>，那么<strong>delta</strong>可以动态地改变以保持正确的显示模拟速度。<br><strong>默认值</strong>: <em>1000 &#x2F; 60</em></p><hr><h3 id="enabled"><a href="#enabled" class="headerlink" title="enabled"></a>enabled</h3><div class="note note-success">            <p>runner.<strong>enabled</strong> <em>Boolean</em></p>          </div><p>指定<strong>runner</strong>是否正在运行的标志</p><hr><h3 id="isFixed"><a href="#isFixed" class="headerlink" title="isFixed"></a>isFixed</h3><div class="note note-success">            <p>runner.<strong>isFixed</strong> <em>Boolean</em></p>          </div><p>一个布尔值，指定是否使用固定的时间间隔（否则是可变的）。如果时间是固定的，那么显示模拟速度会受到帧率的影响（但行为将是确定的）。如果时间是可变的，那么显示模拟速度将是稳定的（大约，但是仍然有确定性）。<br><strong>默认值</strong>: <em>false</em></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>下面的事件是由<strong>Matter.Runner.create</strong>创建的对象触发的，并且由订阅了<strong>Matter.Events.on</strong>的对象接收。</p><h3 id="afterTick"><a href="#afterTick" class="headerlink" title="afterTick"></a>afterTick</h3><div class="note note-secondary">            <p>Events.on(runner, <strong>“afterTick”</strong>, callback)</p>          </div><p>在engine更新和渲染之后触发，即每一次tick的结尾执行。</p><h4 id="回调参数-callback"><a href="#回调参数-callback" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event"><a href="#event" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr><h3 id="afterUpdate"><a href="#afterUpdate" class="headerlink" title="afterUpdate"></a>afterUpdate</h3><div class="note note-secondary">            <p>Events.on(runner, <strong>“afterUpdate”</strong>, callback)</p>          </div><p>在update之后触发</p><h4 id="回调参数-callback-1"><a href="#回调参数-callback-1" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event-1"><a href="#event-1" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr><h3 id="beforeTick"><a href="#beforeTick" class="headerlink" title="beforeTick"></a>beforeTick</h3><div class="note note-secondary">            <p>Events.on(runner, <strong>“beforeTick”</strong>, callback)</p>          </div><p>在一个tick的开始触发，在任何updates引擎或timing之前</p><h4 id="回调参数-callback-2"><a href="#回调参数-callback-2" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event-2"><a href="#event-2" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><div class="note note-secondary">            <p>Events.on(runner, <strong>“beforeUpdate”</strong>, callback)</p>          </div><p>在update之前触发</p><h4 id="回调参数-callback-3"><a href="#回调参数-callback-3" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event-3"><a href="#event-3" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr><h3 id="tick-1"><a href="#tick-1" class="headerlink" title="tick"></a>tick</h3><div class="note note-secondary">            <p>Events.on(runner, <strong>“tick”</strong>, callback)</p>          </div><p>在engine更新之后触发，但是在update之前</p><h4 id="回调参数-callback-4"><a href="#回调参数-callback-4" class="headerlink" title="回调参数[callback]"></a>回调参数[callback]</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>event</td><td>Object</td></tr></tbody></table><h4 id="event-4"><a href="#event-4" class="headerlink" title="event"></a>event</h4><p>一个事件对象</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>Number</td><td>事件触发的时间戳</td></tr><tr><td>source</td><td>Object</td><td>事件源对象</td></tr><tr><td>name</td><td>String</td><td>事件的名称</td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>matter.js</category>
      
      <category>runner</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matter.js</tag>
      
      <tag>runner</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matter.js入门案例</title>
    <link href="/2022/03/19/Matter-js%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <url>/2022/03/19/Matter-js%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>在百度找半天找不到个合适的图形库，好不容易找个看起来差不多的，但是又没中文文档，或者写的很草率，所以打算自己写个文档<br>本章节是Matter.js的入门案例，和官网的文档内容是一致的。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Matter.js 当前版本：0.18.0<br>一个基于JavaScript构建的，专为网页端设计的一个2D物理引擎。<br>主要的模块API如下：</p><ul><li>引擎[engine]</li><li>渲染[render]</li><li>Runner</li><li>Body</li><li>Bodies</li><li>Composite</li><li>Composites</li><li>Constraint</li><li>MouseConstraint</li><li>Events</li><li>Common</li><li>插件[plugin]</li></ul><p>使用指南以及案例</p><ul><li>入门案例</li><li>使用例程</li><li>使用指南</li><li>demo</li><li>readme</li><li>项目主页</li><li>Github</li><li>CodePen<h1 id="一个简单的入门案例"><a href="#一个简单的入门案例" class="headerlink" title="一个简单的入门案例"></a>一个简单的入门案例</h1><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><img src="/../images/20220319/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220319162535.png" alt="微信图片_20220319162535"><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2>从<a href="https://github.com/liabru/matter-js/">GitHub</a>下载源码，然后解压出来，打开build目录，复制里面的<em><strong>matter.js</strong></em>出来，放到你的项目目录下，然后在要使用的页面中引用，主要有两种引用方式：<h3 id="使用script标签引入"><a href="#使用script标签引入" class="headerlink" title="使用script标签引入"></a>使用script标签引入</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;matter.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用npm包管理工具引入"><a href="#使用npm包管理工具引入" class="headerlink" title="使用npm包管理工具引入"></a>使用npm包管理工具引入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install matter-js<br></code></pre></td></tr></table></figure><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2>某些webpack的配置，包括默认配置可能会在开发期间影响你项目的性能，寻找解决方案去看<a href="https://github.com/liabru/matter-js/issues/1001">issue</a><h2 id="核心js代码"><a href="#核心js代码" class="headerlink" title="核心js代码"></a>核心js代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给模块起别名，这样好调用</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Engine</span> = <span class="hljs-title class_">Matter</span>.<span class="hljs-property">Engine</span>,<br>    <span class="hljs-title class_">Render</span> = <span class="hljs-title class_">Matter</span>.<span class="hljs-property">Render</span>,<br>    <span class="hljs-title class_">Runner</span> = <span class="hljs-title class_">Matter</span>.<span class="hljs-property">Runner</span>,<br>    <span class="hljs-title class_">Bodies</span> = <span class="hljs-title class_">Matter</span>.<span class="hljs-property">Bodies</span>,<br>    <span class="hljs-title class_">Composite</span> = <span class="hljs-title class_">Matter</span>.<span class="hljs-property">Composite</span>;<br><br><span class="hljs-comment">// 创建一个引擎</span><br><span class="hljs-keyword">var</span> engine = <span class="hljs-title class_">Engine</span>.<span class="hljs-title function_">create</span>();<br><br><span class="hljs-comment">// 创建一个渲染器</span><br><span class="hljs-keyword">var</span> render = <span class="hljs-title class_">Render</span>.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">element</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>,<br>    <span class="hljs-attr">engine</span>: engine<br>&#125;);<br><br><span class="hljs-comment">// 创建两个盒子和一个支撑盒子的地面</span><br><span class="hljs-keyword">var</span> boxA = <span class="hljs-title class_">Bodies</span>.<span class="hljs-title function_">rectangle</span>(<span class="hljs-number">400</span>, <span class="hljs-number">200</span>, <span class="hljs-number">80</span>, <span class="hljs-number">80</span>);<br><span class="hljs-keyword">var</span> boxB = <span class="hljs-title class_">Bodies</span>.<span class="hljs-title function_">rectangle</span>(<span class="hljs-number">450</span>, <span class="hljs-number">50</span>, <span class="hljs-number">80</span>, <span class="hljs-number">80</span>);<br><span class="hljs-keyword">var</span> ground = <span class="hljs-title class_">Bodies</span>.<span class="hljs-title function_">rectangle</span>(<span class="hljs-number">400</span>, <span class="hljs-number">610</span>, <span class="hljs-number">810</span>, <span class="hljs-number">60</span>, &#123; <span class="hljs-attr">isStatic</span>: <span class="hljs-literal">true</span> &#125;);<br><br><span class="hljs-comment">// 添加所有的物体到世界中</span><br><span class="hljs-title class_">Composite</span>.<span class="hljs-title function_">add</span>(engine.<span class="hljs-property">world</span>, [boxA, boxB, ground]);<br><br><span class="hljs-comment">// 运行渲染器</span><br><span class="hljs-title class_">Render</span>.<span class="hljs-title function_">run</span>(render);<br><br><span class="hljs-comment">// 创建运行器</span><br><span class="hljs-keyword">var</span> runner = <span class="hljs-title class_">Runner</span>.<span class="hljs-title function_">create</span>();<br><br><span class="hljs-comment">// 运行引擎</span><br><span class="hljs-title class_">Runner</span>.<span class="hljs-title function_">run</span>(runner, engine);<br></code></pre></td></tr></table></figure>在你引入Matter.js的项目中，创建一个页面，引入Matter.js，然后将将这段代码放到body标签中的一个script标签中(或者在window的load事件中调用，也可以在dom的ready状态下调用)，然后在你的浏览器中打开这个页面，就可以了。<br>如果不出意外的话你将看到两个正方形物体撞在一起，然后掉到地面上。如果你没有出现这个效果的话，建议你按F12，在console中查看你的错误信息。<br>最好的学习方法就是看官方的例子，研究这些<a href="http://brm.io/matter-js-demo/">官方demo</a>，然后引用<a href="https://github.com/liabru/matter-js/blob/master/demo/js/Demo.js">Demo.js</a>来看他们是如何实现的。其中一些例子也支持CodePen，你也可以在<a href="http://codepen.io/collection/Fuagy/">CodePen</a>中运行，你可以在上面运行你的代码做实验（但是不一定完全是最新的）。</li></ul><h2 id="运行和渲染"><a href="#运行和渲染" class="headerlink" title="运行和渲染"></a>运行和渲染</h2><p>这个例子用的是renderer和runner构建的，但是这俩全是可选的，你也可以不用，它很简单的可以用你自己的游戏主循环用你的方式来渲染。<br>你可以去<a href="https://github.com/liabru/matter-js/wiki/Rendering">Rendering</a>和<a href="https://github.com/liabru/matter-js/wiki/Running">Running</a>，看看官方文档来了解怎么操作。</p><p><em><strong><a href="http://brm.io/matter-js/docs/">官方文档</a></strong></em></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>matter.js</category>
      
      <category>入门案例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matter.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在vue3中全局挂载axios</title>
    <link href="/2022/03/18/%E5%9C%A8vue3%E4%B8%AD%E5%85%A8%E5%B1%80%E6%8C%82%E8%BD%BDaxios/"/>
    <url>/2022/03/18/%E5%9C%A8vue3%E4%B8%AD%E5%85%A8%E5%B1%80%E6%8C%82%E8%BD%BDaxios/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vue3中已经不支持全局挂载properties了，所以通过vue-cli生成的vue3项目，添加了axios库以后，使用插件的方式引入插件，由于vue不再支持根级property，所以会报错。</p><span id="more"></span><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="修改axios-js"><a href="#修改axios-js" class="headerlink" title="修改axios.js"></a>修改axios.js</h3><p>在&#x2F;src&#x2F;plugins&#x2F;axios.js按照以下方式修改对应的部分：</p><figure class="highlight diff"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- Plugin.install = function (Vue) &#123;</span><br><span class="hljs-deletion">-  Vue.axios = axios;</span><br><span class="hljs-deletion">-  Object.defineProperties(Vue.prototype, &#123;</span><br><span class="hljs-deletion">-    axios: &#123;</span><br><span class="hljs-deletion">-      get() &#123;</span><br><span class="hljs-deletion">-        return axios;</span><br><span class="hljs-deletion">-      &#125;</span><br><span class="hljs-deletion">-    &#125;,</span><br><span class="hljs-deletion">-    $axios: &#123;</span><br><span class="hljs-deletion">-      get() &#123;</span><br><span class="hljs-deletion">-        return axios;</span><br><span class="hljs-deletion">-      &#125;</span><br><span class="hljs-deletion">-    &#125;</span><br><span class="hljs-deletion">-  &#125;);</span><br><span class="hljs-deletion">-&#125;;</span><br><span class="hljs-deletion">- Vue.use(Plugin)</span><br><span class="hljs-addition">+ let Plugin_axios = &#123;</span><br><span class="hljs-addition">+  install(app, options) &#123;</span><br><span class="hljs-addition">+    app.axios = _axios;</span><br><span class="hljs-addition">+    window.axios = _axios;</span><br><span class="hljs-addition">+    app.config.globalProperties.$axios = &#123;</span><br><span class="hljs-addition">+      axios: &#123;</span><br><span class="hljs-addition">+        get() &#123;</span><br><span class="hljs-addition">+          return _axios;</span><br><span class="hljs-addition">+        &#125;</span><br><span class="hljs-addition">+      &#125;,</span><br><span class="hljs-addition">+      $axios: &#123;</span><br><span class="hljs-addition">+        get() &#123;</span><br><span class="hljs-addition">+          return _axios;</span><br><span class="hljs-addition">+        &#125;</span><br><span class="hljs-addition">+      &#125;,</span><br><span class="hljs-addition">+    &#125;;</span><br><span class="hljs-addition">+  &#125;,</span><br><span class="hljs-addition">+  version: &quot;1.0.0&quot;</span><br><span class="hljs-addition">+&#125;;</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>注意：默认的install已经不再支持，所以把Plugin.install删掉，改成Plugin_axios，并且把Plugin_axios放到最后导出。 </p>          </div><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>打开&#x2F;src&#x2F;main.js，在对应的位置添加如下代码：<br>导入axios</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> Plugin_axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./plugins/axios&#x27;</span><br></code></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(Plugin_axios);<br></code></pre></td></tr></table></figure><p>这样就完成了</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>axios.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-comment">// Full config:  https://github.com/axios/axios#request-config</span><br><span class="hljs-comment">// axios.defaults.baseURL = process.env.baseURL || process.env.apiUrl || &#x27;&#x27;;</span><br><span class="hljs-comment">// axios.defaults.headers.common[&#x27;Authorization&#x27;] = AUTH_TOKEN;</span><br><span class="hljs-comment">// axios.defaults.headers.post[&#x27;Content-Type&#x27;] = &#x27;application/x-www-form-urlencoded&#x27;;</span><br><br><span class="hljs-keyword">let</span> config = &#123;<br>  <span class="hljs-comment">// baseURL: process.env.baseURL || process.env.apiUrl || &quot;&quot;</span><br>  <span class="hljs-comment">// timeout: 60 * 1000, // Timeout</span><br>  <span class="hljs-comment">// withCredentials: true, // Check cross-site Access-Control</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> _axios = axios.<span class="hljs-title function_">create</span>(config);<br><br>_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// Do something before request is sent</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// Do something with request error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><br><span class="hljs-comment">// Add a response interceptor</span><br>_axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-comment">// Do something with response data</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// Do something with response error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Plugin</span>_axios = &#123;<br>  <span class="hljs-title function_">install</span>(<span class="hljs-params">app, options</span>) &#123;<br>    app.<span class="hljs-property">axios</span> = _axios;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">axios</span> = _axios;<br>    app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$axios</span> = &#123;<br>      <span class="hljs-attr">axios</span>: &#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> _axios;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">$axios</span>: &#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> _axios;<br>        &#125;<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">version</span>: <span class="hljs-string">&quot;1.0.0&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Plugin</span>_axios;<br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> Plugin_axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./plugins/axios&#x27;</span><br><br>createApp(App)<br>.use(router)<br>.use(store)<br>.use(Plugin_axios)<br>.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
      <category>axios</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-introjs在项目中的使用</title>
    <link href="/2022/03/01/vue-introjs%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/03/01/vue-introjs%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>intro.js是一个基于Vue.js的简单的引导页，可以用来展示项目的简介，欢迎页面，以及登录页面等等。</p><p>在项目中使用vue-introjs，可以制作出用户引导功能，使功能更加友好。</p><p>在项目中引入vue-introjs.js文件，并在页面中引入vue-introjs.css文件，然后在对应的需要提示的标签上使用v-intro，v-intro-position，和v-intro-step来控制。</p><span id="more"></span><ul><li>本文仅仅是一个简单的示例，如果需要更多的提示功能，可以参考intro.js的官方文档，或者自己实现。<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><figure class="highlight ada"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ada">npm install vue-introjs <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h2 id="2-引入"><a href="#2-引入" class="headerlink" title="2.引入"></a>2.引入</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> VueIntro <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-introjs&#x27;</span><br>Vue.use(VueIntro);<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;intro.js/introjs.css&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="3-例子"><a href="#3-例子" class="headerlink" title="3.例子"></a>3.例子</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;div <br>  v-intro<span class="hljs-operator">=</span><span class="hljs-string">&quot;&#x27;Edit Project\&#x27;s Name Here&#x27;&quot;</span><br>  v-intro-position<span class="hljs-operator">=</span><span class="hljs-string">&quot;&#x27;bottom&#x27;&quot;</span><br>  &gt;<br>  <span class="hljs-number">123</span><br>  &lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h2><img src="/../images/20220302/3ec0baa850ba5c5a58f2386a6af4c80.png" alt="效果图"></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
      <category>intro.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vue-introjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
